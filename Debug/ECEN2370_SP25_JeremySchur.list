
ECEN2370_SP25_JeremySchur.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ecc  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011e8  08006078  08006078  00007078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007260  08007260  0000901c  2**0
                  CONTENTS
  4 .ARM          00000008  08007260  08007260  00008260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007268  08007268  0000901c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007268  08007268  00008268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800726c  0800726c  0000826c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08007270  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000901c  2**0
                  CONTENTS
 10 .bss          00025b98  2000001c  2000001c  0000901c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025bb4  20025bb4  0000901c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000901c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000132c4  00000000  00000000  0000904c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fd5  00000000  00000000  0001c310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a8  00000000  00000000  0001f2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f2b  00000000  00000000  00020690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026cf1  00000000  00000000  000215bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000177d4  00000000  00000000  000482ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2a55  00000000  00000000  0005fa80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001424d5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005240  00000000  00000000  00142518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00147758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000001c 	.word	0x2000001c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006060 	.word	0x08006060

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000020 	.word	0x20000020
 80001e8:	08006060 	.word	0x08006060

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ApplicationInit>:
static ChipState chip;
static bool button_pressed;
static bool screen_pressed;

void ApplicationInit(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80004e0:	f002 f994 	bl	800280c <initialise_monitor_handles>
    LTCD__Init();
 80004e4:	f000 fb0a 	bl	8000afc <LTCD__Init>
    LTCD_Layer_Init(0);
 80004e8:	2000      	movs	r0, #0
 80004ea:	f000 fac7 	bl	8000a7c <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 80004ee:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80004f2:	2000      	movs	r0, #0
 80004f4:	f000 fc20 	bl	8000d38 <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80004f8:	f000 fcf6 	bl	8000ee8 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80004fc:	4b02      	ldr	r3, [pc, #8]	@ (8000508 <ApplicationInit+0x2c>)
 80004fe:	2201      	movs	r2, #1
 8000500:	719a      	strb	r2, [r3, #6]

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	20000038 	.word	0x20000038

0800050c <handle_start_screen>:

Screen handle_start_screen(void){
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	LCD_Clear(0, LCD_COLOR_BLACK);
 8000510:	2100      	movs	r1, #0
 8000512:	2000      	movs	r0, #0
 8000514:	f000 fc10 	bl	8000d38 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8000518:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800051c:	f000 fc2e 	bl	8000d7c <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000520:	484c      	ldr	r0, [pc, #304]	@ (8000654 <handle_start_screen+0x148>)
 8000522:	f000 fc3b 	bl	8000d9c <LCD_SetFont>

	// Single Player Button
	LCD_DisplayChar(25, 80, 'S');
 8000526:	2253      	movs	r2, #83	@ 0x53
 8000528:	2150      	movs	r1, #80	@ 0x50
 800052a:	2019      	movs	r0, #25
 800052c:	f000 fcb4 	bl	8000e98 <LCD_DisplayChar>
	LCD_DisplayChar(36, 80, 'i');
 8000530:	2269      	movs	r2, #105	@ 0x69
 8000532:	2150      	movs	r1, #80	@ 0x50
 8000534:	2024      	movs	r0, #36	@ 0x24
 8000536:	f000 fcaf 	bl	8000e98 <LCD_DisplayChar>
	LCD_DisplayChar(45, 80, 'n');
 800053a:	226e      	movs	r2, #110	@ 0x6e
 800053c:	2150      	movs	r1, #80	@ 0x50
 800053e:	202d      	movs	r0, #45	@ 0x2d
 8000540:	f000 fcaa 	bl	8000e98 <LCD_DisplayChar>
	LCD_DisplayChar(60, 80, 'g');
 8000544:	2267      	movs	r2, #103	@ 0x67
 8000546:	2150      	movs	r1, #80	@ 0x50
 8000548:	203c      	movs	r0, #60	@ 0x3c
 800054a:	f000 fca5 	bl	8000e98 <LCD_DisplayChar>
	LCD_DisplayChar(70, 80, 'l');
 800054e:	226c      	movs	r2, #108	@ 0x6c
 8000550:	2150      	movs	r1, #80	@ 0x50
 8000552:	2046      	movs	r0, #70	@ 0x46
 8000554:	f000 fca0 	bl	8000e98 <LCD_DisplayChar>
	LCD_DisplayChar(80, 80, 'e');
 8000558:	2265      	movs	r2, #101	@ 0x65
 800055a:	2150      	movs	r1, #80	@ 0x50
 800055c:	2050      	movs	r0, #80	@ 0x50
 800055e:	f000 fc9b 	bl	8000e98 <LCD_DisplayChar>

	LCD_DisplayChar(25, 100, 'P');
 8000562:	2250      	movs	r2, #80	@ 0x50
 8000564:	2164      	movs	r1, #100	@ 0x64
 8000566:	2019      	movs	r0, #25
 8000568:	f000 fc96 	bl	8000e98 <LCD_DisplayChar>
	LCD_DisplayChar(35, 100, 'l');
 800056c:	226c      	movs	r2, #108	@ 0x6c
 800056e:	2164      	movs	r1, #100	@ 0x64
 8000570:	2023      	movs	r0, #35	@ 0x23
 8000572:	f000 fc91 	bl	8000e98 <LCD_DisplayChar>
	LCD_DisplayChar(45, 100, 'a');
 8000576:	2261      	movs	r2, #97	@ 0x61
 8000578:	2164      	movs	r1, #100	@ 0x64
 800057a:	202d      	movs	r0, #45	@ 0x2d
 800057c:	f000 fc8c 	bl	8000e98 <LCD_DisplayChar>
	LCD_DisplayChar(56, 100, 'y');
 8000580:	2279      	movs	r2, #121	@ 0x79
 8000582:	2164      	movs	r1, #100	@ 0x64
 8000584:	2038      	movs	r0, #56	@ 0x38
 8000586:	f000 fc87 	bl	8000e98 <LCD_DisplayChar>
	LCD_DisplayChar(70, 100, 'e');
 800058a:	2265      	movs	r2, #101	@ 0x65
 800058c:	2164      	movs	r1, #100	@ 0x64
 800058e:	2046      	movs	r0, #70	@ 0x46
 8000590:	f000 fc82 	bl	8000e98 <LCD_DisplayChar>
	LCD_DisplayChar(83, 100, 'r');
 8000594:	2272      	movs	r2, #114	@ 0x72
 8000596:	2164      	movs	r1, #100	@ 0x64
 8000598:	2053      	movs	r0, #83	@ 0x53
 800059a:	f000 fc7d 	bl	8000e98 <LCD_DisplayChar>

	LCD_Draw_Circle_Fill(60, 145, 20, LCD_COLOR_GREEN);
 800059e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80005a2:	2214      	movs	r2, #20
 80005a4:	2191      	movs	r1, #145	@ 0x91
 80005a6:	203c      	movs	r0, #60	@ 0x3c
 80005a8:	f000 fb24 	bl	8000bf4 <LCD_Draw_Circle_Fill>

	// Multi-player button
	LCD_DisplayChar(152, 80,  'M');
 80005ac:	224d      	movs	r2, #77	@ 0x4d
 80005ae:	2150      	movs	r1, #80	@ 0x50
 80005b0:	2098      	movs	r0, #152	@ 0x98
 80005b2:	f000 fc71 	bl	8000e98 <LCD_DisplayChar>
	LCD_DisplayChar(169, 80,  'u');
 80005b6:	2275      	movs	r2, #117	@ 0x75
 80005b8:	2150      	movs	r1, #80	@ 0x50
 80005ba:	20a9      	movs	r0, #169	@ 0xa9
 80005bc:	f000 fc6c 	bl	8000e98 <LCD_DisplayChar>
	LCD_DisplayChar(181, 80,  'l');
 80005c0:	226c      	movs	r2, #108	@ 0x6c
 80005c2:	2150      	movs	r1, #80	@ 0x50
 80005c4:	20b5      	movs	r0, #181	@ 0xb5
 80005c6:	f000 fc67 	bl	8000e98 <LCD_DisplayChar>
	LCD_DisplayChar(189, 80,  't');
 80005ca:	2274      	movs	r2, #116	@ 0x74
 80005cc:	2150      	movs	r1, #80	@ 0x50
 80005ce:	20bd      	movs	r0, #189	@ 0xbd
 80005d0:	f000 fc62 	bl	8000e98 <LCD_DisplayChar>
	LCD_DisplayChar(197, 80,  'i');
 80005d4:	2269      	movs	r2, #105	@ 0x69
 80005d6:	2150      	movs	r1, #80	@ 0x50
 80005d8:	20c5      	movs	r0, #197	@ 0xc5
 80005da:	f000 fc5d 	bl	8000e98 <LCD_DisplayChar>

	LCD_DisplayChar(145, 100, 'P');
 80005de:	2250      	movs	r2, #80	@ 0x50
 80005e0:	2164      	movs	r1, #100	@ 0x64
 80005e2:	2091      	movs	r0, #145	@ 0x91
 80005e4:	f000 fc58 	bl	8000e98 <LCD_DisplayChar>
	LCD_DisplayChar(155, 100, 'l');
 80005e8:	226c      	movs	r2, #108	@ 0x6c
 80005ea:	2164      	movs	r1, #100	@ 0x64
 80005ec:	209b      	movs	r0, #155	@ 0x9b
 80005ee:	f000 fc53 	bl	8000e98 <LCD_DisplayChar>
	LCD_DisplayChar(165, 100, 'a');
 80005f2:	2261      	movs	r2, #97	@ 0x61
 80005f4:	2164      	movs	r1, #100	@ 0x64
 80005f6:	20a5      	movs	r0, #165	@ 0xa5
 80005f8:	f000 fc4e 	bl	8000e98 <LCD_DisplayChar>
	LCD_DisplayChar(176, 100, 'y');
 80005fc:	2279      	movs	r2, #121	@ 0x79
 80005fe:	2164      	movs	r1, #100	@ 0x64
 8000600:	20b0      	movs	r0, #176	@ 0xb0
 8000602:	f000 fc49 	bl	8000e98 <LCD_DisplayChar>
	LCD_DisplayChar(190, 100, 'e');
 8000606:	2265      	movs	r2, #101	@ 0x65
 8000608:	2164      	movs	r1, #100	@ 0x64
 800060a:	20be      	movs	r0, #190	@ 0xbe
 800060c:	f000 fc44 	bl	8000e98 <LCD_DisplayChar>
	LCD_DisplayChar(203, 100, 'r');
 8000610:	2272      	movs	r2, #114	@ 0x72
 8000612:	2164      	movs	r1, #100	@ 0x64
 8000614:	20cb      	movs	r0, #203	@ 0xcb
 8000616:	f000 fc3f 	bl	8000e98 <LCD_DisplayChar>

	LCD_Draw_Circle_Fill(180, 145, 20, LCD_COLOR_GREEN);
 800061a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800061e:	2214      	movs	r2, #20
 8000620:	2191      	movs	r1, #145	@ 0x91
 8000622:	20b4      	movs	r0, #180	@ 0xb4
 8000624:	f000 fae6 	bl	8000bf4 <LCD_Draw_Circle_Fill>


	while (1) {
		if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 8000628:	480b      	ldr	r0, [pc, #44]	@ (8000658 <handle_start_screen+0x14c>)
 800062a:	f000 fc68 	bl	8000efe <returnTouchStateAndLocation>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d1f9      	bne.n	8000628 <handle_start_screen+0x11c>
			if (StaticTouchData.x < LCD_PIXEL_WIDTH / 2) {
 8000634:	4b08      	ldr	r3, [pc, #32]	@ (8000658 <handle_start_screen+0x14c>)
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	2b77      	cmp	r3, #119	@ 0x77
 800063a:	d804      	bhi.n	8000646 <handle_start_screen+0x13a>
				state.mode = SINGLE_PLAYER;
 800063c:	4b07      	ldr	r3, [pc, #28]	@ (800065c <handle_start_screen+0x150>)
 800063e:	2200      	movs	r2, #0
 8000640:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			} else {
				state.mode = MULTI_PLAYER;
			}
			break;
 8000644:	e003      	b.n	800064e <handle_start_screen+0x142>
				state.mode = MULTI_PLAYER;
 8000646:	4b05      	ldr	r3, [pc, #20]	@ (800065c <handle_start_screen+0x150>)
 8000648:	2201      	movs	r2, #1
 800064a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
		}
	}

	return GAME_SCREEN;
 800064e:	2301      	movs	r3, #1
}
 8000650:	4618      	mov	r0, r3
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000004 	.word	0x20000004
 8000658:	20000038 	.word	0x20000038
 800065c:	20000040 	.word	0x20000040

08000660 <handle_game_screen>:

Screen handle_game_screen(void){
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
	game_init(&state);
 8000666:	4838      	ldr	r0, [pc, #224]	@ (8000748 <handle_game_screen+0xe8>)
 8000668:	f000 f878 	bl	800075c <game_init>

	while (state.status == GAME_ONGOING){
 800066c:	e062      	b.n	8000734 <handle_game_screen+0xd4>
		button_pressed = false;
 800066e:	4b37      	ldr	r3, [pc, #220]	@ (800074c <handle_game_screen+0xec>)
 8000670:	2200      	movs	r2, #0
 8000672:	701a      	strb	r2, [r3, #0]
		while(!button_pressed) {
 8000674:	e057      	b.n	8000726 <handle_game_screen+0xc6>
			uint16_t color = (state.current_player == 1) ? LCD_COLOR_RED : LCD_COLOR_BLUE;
 8000676:	4b34      	ldr	r3, [pc, #208]	@ (8000748 <handle_game_screen+0xe8>)
 8000678:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800067c:	2b01      	cmp	r3, #1
 800067e:	d102      	bne.n	8000686 <handle_game_screen+0x26>
 8000680:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000684:	e000      	b.n	8000688 <handle_game_screen+0x28>
 8000686:	231f      	movs	r3, #31
 8000688:	80fb      	strh	r3, [r7, #6]

			uint16_t x = chip.col * CELL_WIDTH + CELL_WIDTH / 2;
 800068a:	4b31      	ldr	r3, [pc, #196]	@ (8000750 <handle_game_screen+0xf0>)
 800068c:	785b      	ldrb	r3, [r3, #1]
 800068e:	461a      	mov	r2, r3
 8000690:	0112      	lsls	r2, r2, #4
 8000692:	4413      	add	r3, r2
 8000694:	005b      	lsls	r3, r3, #1
 8000696:	b29b      	uxth	r3, r3
 8000698:	3311      	adds	r3, #17
 800069a:	80bb      	strh	r3, [r7, #4]
			uint16_t y = chip.row * CELL_HEIGHT + CELL_HEIGHT / 2;
 800069c:	4b2c      	ldr	r3, [pc, #176]	@ (8000750 <handle_game_screen+0xf0>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	461a      	mov	r2, r3
 80006a2:	0052      	lsls	r2, r2, #1
 80006a4:	441a      	add	r2, r3
 80006a6:	00d2      	lsls	r2, r2, #3
 80006a8:	1ad3      	subs	r3, r2, r3
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	3317      	adds	r3, #23
 80006b0:	807b      	strh	r3, [r7, #2]

			draw_board(&state);
 80006b2:	4825      	ldr	r0, [pc, #148]	@ (8000748 <handle_game_screen+0xe8>)
 80006b4:	f000 f880 	bl	80007b8 <draw_board>
			draw_chip(x, y, color);
 80006b8:	88fa      	ldrh	r2, [r7, #6]
 80006ba:	8879      	ldrh	r1, [r7, #2]
 80006bc:	88bb      	ldrh	r3, [r7, #4]
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 f901 	bl	80008c6 <draw_chip>

			screen_pressed = false;
 80006c4:	4b23      	ldr	r3, [pc, #140]	@ (8000754 <handle_game_screen+0xf4>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	701a      	strb	r2, [r3, #0]
			while(!screen_pressed){
 80006ca:	e025      	b.n	8000718 <handle_game_screen+0xb8>
				if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 80006cc:	4822      	ldr	r0, [pc, #136]	@ (8000758 <handle_game_screen+0xf8>)
 80006ce:	f000 fc16 	bl	8000efe <returnTouchStateAndLocation>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d11f      	bne.n	8000718 <handle_game_screen+0xb8>
					if (StaticTouchData.x < LCD_PIXEL_WIDTH / 2) {
 80006d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000758 <handle_game_screen+0xf8>)
 80006da:	881b      	ldrh	r3, [r3, #0]
 80006dc:	2b77      	cmp	r3, #119	@ 0x77
 80006de:	d80c      	bhi.n	80006fa <handle_game_screen+0x9a>
						chip.col = (chip.col == 0) ? 0 : chip.col - 1;
 80006e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000750 <handle_game_screen+0xf0>)
 80006e2:	785b      	ldrb	r3, [r3, #1]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d004      	beq.n	80006f2 <handle_game_screen+0x92>
 80006e8:	4b19      	ldr	r3, [pc, #100]	@ (8000750 <handle_game_screen+0xf0>)
 80006ea:	785b      	ldrb	r3, [r3, #1]
 80006ec:	3b01      	subs	r3, #1
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	e000      	b.n	80006f4 <handle_game_screen+0x94>
 80006f2:	2300      	movs	r3, #0
 80006f4:	4a16      	ldr	r2, [pc, #88]	@ (8000750 <handle_game_screen+0xf0>)
 80006f6:	7053      	strb	r3, [r2, #1]
 80006f8:	e00b      	b.n	8000712 <handle_game_screen+0xb2>
					} else {
						chip.col = (chip.col == COLS - 1) ? COLS - 1 : chip.col + 1;
 80006fa:	4b15      	ldr	r3, [pc, #84]	@ (8000750 <handle_game_screen+0xf0>)
 80006fc:	785b      	ldrb	r3, [r3, #1]
 80006fe:	2b06      	cmp	r3, #6
 8000700:	d004      	beq.n	800070c <handle_game_screen+0xac>
 8000702:	4b13      	ldr	r3, [pc, #76]	@ (8000750 <handle_game_screen+0xf0>)
 8000704:	785b      	ldrb	r3, [r3, #1]
 8000706:	3301      	adds	r3, #1
 8000708:	b2db      	uxtb	r3, r3
 800070a:	e000      	b.n	800070e <handle_game_screen+0xae>
 800070c:	2306      	movs	r3, #6
 800070e:	4a10      	ldr	r2, [pc, #64]	@ (8000750 <handle_game_screen+0xf0>)
 8000710:	7053      	strb	r3, [r2, #1]
					}
					screen_pressed = true;
 8000712:	4b10      	ldr	r3, [pc, #64]	@ (8000754 <handle_game_screen+0xf4>)
 8000714:	2201      	movs	r2, #1
 8000716:	701a      	strb	r2, [r3, #0]
			while(!screen_pressed){
 8000718:	4b0e      	ldr	r3, [pc, #56]	@ (8000754 <handle_game_screen+0xf4>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	f083 0301 	eor.w	r3, r3, #1
 8000720:	b2db      	uxtb	r3, r3
 8000722:	2b00      	cmp	r3, #0
 8000724:	d1d2      	bne.n	80006cc <handle_game_screen+0x6c>
		while(!button_pressed) {
 8000726:	4b09      	ldr	r3, [pc, #36]	@ (800074c <handle_game_screen+0xec>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	f083 0301 	eor.w	r3, r3, #1
 800072e:	b2db      	uxtb	r3, r3
 8000730:	2b00      	cmp	r3, #0
 8000732:	d1a0      	bne.n	8000676 <handle_game_screen+0x16>
	while (state.status == GAME_ONGOING){
 8000734:	4b04      	ldr	r3, [pc, #16]	@ (8000748 <handle_game_screen+0xe8>)
 8000736:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800073a:	2b00      	cmp	r3, #0
 800073c:	d097      	beq.n	800066e <handle_game_screen+0xe>
		}
		// Add handler for button press and add logic to drop chip

	}

	return END_SCREEN;
 800073e:	2302      	movs	r3, #2
}
 8000740:	4618      	mov	r0, r3
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000040 	.word	0x20000040
 800074c:	20000072 	.word	0x20000072
 8000750:	20000070 	.word	0x20000070
 8000754:	20000073 	.word	0x20000073
 8000758:	20000038 	.word	0x20000038

0800075c <game_init>:
 *      Author: jeremyschur
 */

#include "Game.h"

void game_init(GameState *state) {
 800075c:	b480      	push	{r7}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
	for (uint8_t r = 0; r < ROWS; r++) {
 8000764:	2300      	movs	r3, #0
 8000766:	73fb      	strb	r3, [r7, #15]
 8000768:	e015      	b.n	8000796 <game_init+0x3a>
		for (uint8_t c = 0; c < COLS; c++) {
 800076a:	2300      	movs	r3, #0
 800076c:	73bb      	strb	r3, [r7, #14]
 800076e:	e00c      	b.n	800078a <game_init+0x2e>
			state->board[r][c] = EMPTY;
 8000770:	7bfa      	ldrb	r2, [r7, #15]
 8000772:	7bb9      	ldrb	r1, [r7, #14]
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	4613      	mov	r3, r2
 8000778:	00db      	lsls	r3, r3, #3
 800077a:	1a9b      	subs	r3, r3, r2
 800077c:	4403      	add	r3, r0
 800077e:	440b      	add	r3, r1
 8000780:	2200      	movs	r2, #0
 8000782:	701a      	strb	r2, [r3, #0]
		for (uint8_t c = 0; c < COLS; c++) {
 8000784:	7bbb      	ldrb	r3, [r7, #14]
 8000786:	3301      	adds	r3, #1
 8000788:	73bb      	strb	r3, [r7, #14]
 800078a:	7bbb      	ldrb	r3, [r7, #14]
 800078c:	2b06      	cmp	r3, #6
 800078e:	d9ef      	bls.n	8000770 <game_init+0x14>
	for (uint8_t r = 0; r < ROWS; r++) {
 8000790:	7bfb      	ldrb	r3, [r7, #15]
 8000792:	3301      	adds	r3, #1
 8000794:	73fb      	strb	r3, [r7, #15]
 8000796:	7bfb      	ldrb	r3, [r7, #15]
 8000798:	2b05      	cmp	r3, #5
 800079a:	d9e6      	bls.n	800076a <game_init+0xe>
		}
	}
	state->current_player = 1;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2201      	movs	r2, #1
 80007a0:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	state->status = GAME_ONGOING;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2200      	movs	r2, #0
 80007a8:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
}
 80007ac:	bf00      	nop
 80007ae:	3714      	adds	r7, #20
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <draw_board>:

void draw_board(GameState *state) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	LCD_Clear(0, LCD_COLOR_BLACK);
 80007c0:	2100      	movs	r1, #0
 80007c2:	2000      	movs	r0, #0
 80007c4:	f000 fab8 	bl	8000d38 <LCD_Clear>

	// Draw vertical grid lines
	for (uint8_t c = 1; c < COLS; c++) {
 80007c8:	2301      	movs	r3, #1
 80007ca:	75fb      	strb	r3, [r7, #23]
 80007cc:	e011      	b.n	80007f2 <draw_board+0x3a>
		uint16_t x = c * CELL_WIDTH;
 80007ce:	7dfb      	ldrb	r3, [r7, #23]
 80007d0:	b29b      	uxth	r3, r3
 80007d2:	461a      	mov	r2, r3
 80007d4:	0112      	lsls	r2, r2, #4
 80007d6:	4413      	add	r3, r2
 80007d8:	005b      	lsls	r3, r3, #1
 80007da:	817b      	strh	r3, [r7, #10]
		LCD_Draw_Vertical_Line(x, TOP_MARGIN, LCD_PIXEL_HEIGHT - TOP_MARGIN, LCD_COLOR_WHITE);
 80007dc:	8978      	ldrh	r0, [r7, #10]
 80007de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007e2:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80007e6:	2128      	movs	r1, #40	@ 0x28
 80007e8:	f000 fa57 	bl	8000c9a <LCD_Draw_Vertical_Line>
	for (uint8_t c = 1; c < COLS; c++) {
 80007ec:	7dfb      	ldrb	r3, [r7, #23]
 80007ee:	3301      	adds	r3, #1
 80007f0:	75fb      	strb	r3, [r7, #23]
 80007f2:	7dfb      	ldrb	r3, [r7, #23]
 80007f4:	2b06      	cmp	r3, #6
 80007f6:	d9ea      	bls.n	80007ce <draw_board+0x16>
	}

	// Draw horizontal grid lines
	for (uint8_t r = 1; r < ROWS; r++) {
 80007f8:	2301      	movs	r3, #1
 80007fa:	75bb      	strb	r3, [r7, #22]
 80007fc:	e014      	b.n	8000828 <draw_board+0x70>
		uint16_t y = TOP_MARGIN + r * CELL_HEIGHT;
 80007fe:	7dbb      	ldrb	r3, [r7, #22]
 8000800:	b29b      	uxth	r3, r3
 8000802:	461a      	mov	r2, r3
 8000804:	0052      	lsls	r2, r2, #1
 8000806:	441a      	add	r2, r3
 8000808:	00d2      	lsls	r2, r2, #3
 800080a:	1ad3      	subs	r3, r2, r3
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	b29b      	uxth	r3, r3
 8000810:	3328      	adds	r3, #40	@ 0x28
 8000812:	81bb      	strh	r3, [r7, #12]
		LCD_Draw_Horizontal_Line(0, y, LCD_PIXEL_WIDTH, LCD_COLOR_WHITE);
 8000814:	89b9      	ldrh	r1, [r7, #12]
 8000816:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800081a:	22f0      	movs	r2, #240	@ 0xf0
 800081c:	2000      	movs	r0, #0
 800081e:	f000 fa63 	bl	8000ce8 <LCD_Draw_Horizontal_Line>
	for (uint8_t r = 1; r < ROWS; r++) {
 8000822:	7dbb      	ldrb	r3, [r7, #22]
 8000824:	3301      	adds	r3, #1
 8000826:	75bb      	strb	r3, [r7, #22]
 8000828:	7dbb      	ldrb	r3, [r7, #22]
 800082a:	2b05      	cmp	r3, #5
 800082c:	d9e7      	bls.n	80007fe <draw_board+0x46>
	}

	// Draw chips
	for (uint8_t r = 0; r < ROWS; r++) {
 800082e:	2300      	movs	r3, #0
 8000830:	757b      	strb	r3, [r7, #21]
 8000832:	e040      	b.n	80008b6 <draw_board+0xfe>
		for (uint8_t c = 0; c < COLS; c++) {
 8000834:	2300      	movs	r3, #0
 8000836:	753b      	strb	r3, [r7, #20]
 8000838:	e037      	b.n	80008aa <draw_board+0xf2>
			if (state->board[r][c] != EMPTY) {
 800083a:	7d7a      	ldrb	r2, [r7, #21]
 800083c:	7d39      	ldrb	r1, [r7, #20]
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	4613      	mov	r3, r2
 8000842:	00db      	lsls	r3, r3, #3
 8000844:	1a9b      	subs	r3, r3, r2
 8000846:	4403      	add	r3, r0
 8000848:	440b      	add	r3, r1
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d029      	beq.n	80008a4 <draw_board+0xec>
				uint16_t color = (state->board[r][c] == RED) ? LCD_COLOR_RED : LCD_COLOR_BLUE;
 8000850:	7d7a      	ldrb	r2, [r7, #21]
 8000852:	7d39      	ldrb	r1, [r7, #20]
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	4613      	mov	r3, r2
 8000858:	00db      	lsls	r3, r3, #3
 800085a:	1a9b      	subs	r3, r3, r2
 800085c:	4403      	add	r3, r0
 800085e:	440b      	add	r3, r1
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b01      	cmp	r3, #1
 8000864:	d102      	bne.n	800086c <draw_board+0xb4>
 8000866:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800086a:	e000      	b.n	800086e <draw_board+0xb6>
 800086c:	231f      	movs	r3, #31
 800086e:	827b      	strh	r3, [r7, #18]

				uint16_t x = c * CELL_WIDTH + CELL_WIDTH / 2;
 8000870:	7d3b      	ldrb	r3, [r7, #20]
 8000872:	b29b      	uxth	r3, r3
 8000874:	461a      	mov	r2, r3
 8000876:	0112      	lsls	r2, r2, #4
 8000878:	4413      	add	r3, r2
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	b29b      	uxth	r3, r3
 800087e:	3311      	adds	r3, #17
 8000880:	823b      	strh	r3, [r7, #16]
				uint16_t y = TOP_MARGIN + r * CELL_HEIGHT + CELL_HEIGHT / 2;
 8000882:	7d7b      	ldrb	r3, [r7, #21]
 8000884:	b29b      	uxth	r3, r3
 8000886:	461a      	mov	r2, r3
 8000888:	0052      	lsls	r2, r2, #1
 800088a:	441a      	add	r2, r3
 800088c:	00d2      	lsls	r2, r2, #3
 800088e:	1ad3      	subs	r3, r2, r3
 8000890:	005b      	lsls	r3, r3, #1
 8000892:	b29b      	uxth	r3, r3
 8000894:	333f      	adds	r3, #63	@ 0x3f
 8000896:	81fb      	strh	r3, [r7, #14]

				draw_chip(x, y, color);
 8000898:	8a7a      	ldrh	r2, [r7, #18]
 800089a:	89f9      	ldrh	r1, [r7, #14]
 800089c:	8a3b      	ldrh	r3, [r7, #16]
 800089e:	4618      	mov	r0, r3
 80008a0:	f000 f811 	bl	80008c6 <draw_chip>
		for (uint8_t c = 0; c < COLS; c++) {
 80008a4:	7d3b      	ldrb	r3, [r7, #20]
 80008a6:	3301      	adds	r3, #1
 80008a8:	753b      	strb	r3, [r7, #20]
 80008aa:	7d3b      	ldrb	r3, [r7, #20]
 80008ac:	2b06      	cmp	r3, #6
 80008ae:	d9c4      	bls.n	800083a <draw_board+0x82>
	for (uint8_t r = 0; r < ROWS; r++) {
 80008b0:	7d7b      	ldrb	r3, [r7, #21]
 80008b2:	3301      	adds	r3, #1
 80008b4:	757b      	strb	r3, [r7, #21]
 80008b6:	7d7b      	ldrb	r3, [r7, #21]
 80008b8:	2b05      	cmp	r3, #5
 80008ba:	d9bb      	bls.n	8000834 <draw_board+0x7c>
			}
		}
	}
}
 80008bc:	bf00      	nop
 80008be:	bf00      	nop
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <draw_chip>:


void draw_chip(uint16_t x, uint16_t y, uint16_t color) {
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b082      	sub	sp, #8
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	4603      	mov	r3, r0
 80008ce:	80fb      	strh	r3, [r7, #6]
 80008d0:	460b      	mov	r3, r1
 80008d2:	80bb      	strh	r3, [r7, #4]
 80008d4:	4613      	mov	r3, r2
 80008d6:	807b      	strh	r3, [r7, #2]
	LCD_Draw_Circle_Fill(x, y, CHIP_RADIUS, color);
 80008d8:	887b      	ldrh	r3, [r7, #2]
 80008da:	88b9      	ldrh	r1, [r7, #4]
 80008dc:	88f8      	ldrh	r0, [r7, #6]
 80008de:	220f      	movs	r2, #15
 80008e0:	f000 f988 	bl	8000bf4 <LCD_Draw_Circle_Fill>
}
 80008e4:	bf00      	nop
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08c      	sub	sp, #48	@ 0x30
 80008f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	61bb      	str	r3, [r7, #24]
 80008f6:	4b5a      	ldr	r3, [pc, #360]	@ (8000a60 <LCD_GPIO_Init+0x174>)
 80008f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008fa:	4a59      	ldr	r2, [pc, #356]	@ (8000a60 <LCD_GPIO_Init+0x174>)
 80008fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000900:	6453      	str	r3, [r2, #68]	@ 0x44
 8000902:	4b57      	ldr	r3, [pc, #348]	@ (8000a60 <LCD_GPIO_Init+0x174>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000906:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800090a:	61bb      	str	r3, [r7, #24]
 800090c:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
 8000912:	4b53      	ldr	r3, [pc, #332]	@ (8000a60 <LCD_GPIO_Init+0x174>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	4a52      	ldr	r2, [pc, #328]	@ (8000a60 <LCD_GPIO_Init+0x174>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6313      	str	r3, [r2, #48]	@ 0x30
 800091e:	4b50      	ldr	r3, [pc, #320]	@ (8000a60 <LCD_GPIO_Init+0x174>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	617b      	str	r3, [r7, #20]
 8000928:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
 800092e:	4b4c      	ldr	r3, [pc, #304]	@ (8000a60 <LCD_GPIO_Init+0x174>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	4a4b      	ldr	r2, [pc, #300]	@ (8000a60 <LCD_GPIO_Init+0x174>)
 8000934:	f043 0302 	orr.w	r3, r3, #2
 8000938:	6313      	str	r3, [r2, #48]	@ 0x30
 800093a:	4b49      	ldr	r3, [pc, #292]	@ (8000a60 <LCD_GPIO_Init+0x174>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	4b45      	ldr	r3, [pc, #276]	@ (8000a60 <LCD_GPIO_Init+0x174>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	4a44      	ldr	r2, [pc, #272]	@ (8000a60 <LCD_GPIO_Init+0x174>)
 8000950:	f043 0304 	orr.w	r3, r3, #4
 8000954:	6313      	str	r3, [r2, #48]	@ 0x30
 8000956:	4b42      	ldr	r3, [pc, #264]	@ (8000a60 <LCD_GPIO_Init+0x174>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	f003 0304 	and.w	r3, r3, #4
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	4b3e      	ldr	r3, [pc, #248]	@ (8000a60 <LCD_GPIO_Init+0x174>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	4a3d      	ldr	r2, [pc, #244]	@ (8000a60 <LCD_GPIO_Init+0x174>)
 800096c:	f043 0308 	orr.w	r3, r3, #8
 8000970:	6313      	str	r3, [r2, #48]	@ 0x30
 8000972:	4b3b      	ldr	r3, [pc, #236]	@ (8000a60 <LCD_GPIO_Init+0x174>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	f003 0308 	and.w	r3, r3, #8
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	4b37      	ldr	r3, [pc, #220]	@ (8000a60 <LCD_GPIO_Init+0x174>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	4a36      	ldr	r2, [pc, #216]	@ (8000a60 <LCD_GPIO_Init+0x174>)
 8000988:	f043 0320 	orr.w	r3, r3, #32
 800098c:	6313      	str	r3, [r2, #48]	@ 0x30
 800098e:	4b34      	ldr	r3, [pc, #208]	@ (8000a60 <LCD_GPIO_Init+0x174>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	f003 0320 	and.w	r3, r3, #32
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	4b30      	ldr	r3, [pc, #192]	@ (8000a60 <LCD_GPIO_Init+0x174>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	4a2f      	ldr	r2, [pc, #188]	@ (8000a60 <LCD_GPIO_Init+0x174>)
 80009a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009aa:	4b2d      	ldr	r3, [pc, #180]	@ (8000a60 <LCD_GPIO_Init+0x174>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80009b6:	f641 0358 	movw	r3, #6232	@ 0x1858
 80009ba:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80009bc:	2302      	movs	r3, #2
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80009c4:	2302      	movs	r3, #2
 80009c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80009c8:	230e      	movs	r3, #14
 80009ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	4824      	ldr	r0, [pc, #144]	@ (8000a64 <LCD_GPIO_Init+0x178>)
 80009d4:	f002 f8da 	bl	8002b8c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80009d8:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80009dc:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	4820      	ldr	r0, [pc, #128]	@ (8000a68 <LCD_GPIO_Init+0x17c>)
 80009e6:	f002 f8d1 	bl	8002b8c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80009ea:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80009ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	4619      	mov	r1, r3
 80009f6:	481d      	ldr	r0, [pc, #116]	@ (8000a6c <LCD_GPIO_Init+0x180>)
 80009f8:	f002 f8c8 	bl	8002b8c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80009fc:	2348      	movs	r3, #72	@ 0x48
 80009fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	4619      	mov	r1, r3
 8000a06:	481a      	ldr	r0, [pc, #104]	@ (8000a70 <LCD_GPIO_Init+0x184>)
 8000a08:	f002 f8c0 	bl	8002b8c <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000a0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	4619      	mov	r1, r3
 8000a18:	4816      	ldr	r0, [pc, #88]	@ (8000a74 <LCD_GPIO_Init+0x188>)
 8000a1a:	f002 f8b7 	bl	8002b8c <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000a1e:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000a22:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000a24:	f107 031c 	add.w	r3, r7, #28
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4813      	ldr	r0, [pc, #76]	@ (8000a78 <LCD_GPIO_Init+0x18c>)
 8000a2c:	f002 f8ae 	bl	8002b8c <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000a30:	2303      	movs	r3, #3
 8000a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000a34:	2309      	movs	r3, #9
 8000a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000a38:	f107 031c 	add.w	r3, r7, #28
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	480a      	ldr	r0, [pc, #40]	@ (8000a68 <LCD_GPIO_Init+0x17c>)
 8000a40:	f002 f8a4 	bl	8002b8c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000a44:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4809      	ldr	r0, [pc, #36]	@ (8000a78 <LCD_GPIO_Init+0x18c>)
 8000a52:	f002 f89b 	bl	8002b8c <HAL_GPIO_Init>
}
 8000a56:	bf00      	nop
 8000a58:	3730      	adds	r7, #48	@ 0x30
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40020000 	.word	0x40020000
 8000a68:	40020400 	.word	0x40020400
 8000a6c:	40020800 	.word	0x40020800
 8000a70:	40020c00 	.word	0x40020c00
 8000a74:	40021400 	.word	0x40021400
 8000a78:	40021800 	.word	0x40021800

08000a7c <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b090      	sub	sp, #64	@ 0x40
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000a8a:	23f0      	movs	r3, #240	@ 0xf0
 8000a8c:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8000a92:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000a96:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000a98:	2302      	movs	r3, #2
 8000a9a:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000a9c:	23ff      	movs	r3, #255	@ 0xff
 8000a9e:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000aa4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000aaa:	2305      	movs	r3, #5
 8000aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d101      	bne.n	8000ab8 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8000af4 <LTCD_Layer_Init+0x78>)
 8000ab6:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000ab8:	23f0      	movs	r3, #240	@ 0xf0
 8000aba:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000abc:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000ac0:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000ad4:	79fa      	ldrb	r2, [r7, #7]
 8000ad6:	f107 030c 	add.w	r3, r7, #12
 8000ada:	4619      	mov	r1, r3
 8000adc:	4806      	ldr	r0, [pc, #24]	@ (8000af8 <LTCD_Layer_Init+0x7c>)
 8000ade:	f003 fc97 	bl	8004410 <HAL_LTDC_ConfigLayer>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000ae8:	f000 f9f8 	bl	8000edc <LCD_Error_Handler>
	}
}
 8000aec:	bf00      	nop
 8000aee:	3740      	adds	r7, #64	@ 0x40
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000150 	.word	0x20000150
 8000af8:	20000074 	.word	0x20000074

08000afc <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000b00:	4b2a      	ldr	r3, [pc, #168]	@ (8000bac <LTCD__Init+0xb0>)
 8000b02:	4a2b      	ldr	r2, [pc, #172]	@ (8000bb0 <LTCD__Init+0xb4>)
 8000b04:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000b06:	4b29      	ldr	r3, [pc, #164]	@ (8000bac <LTCD__Init+0xb0>)
 8000b08:	2209      	movs	r2, #9
 8000b0a:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000b0c:	4b27      	ldr	r3, [pc, #156]	@ (8000bac <LTCD__Init+0xb0>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000b12:	4b26      	ldr	r3, [pc, #152]	@ (8000bac <LTCD__Init+0xb0>)
 8000b14:	221d      	movs	r2, #29
 8000b16:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000b18:	4b24      	ldr	r3, [pc, #144]	@ (8000bac <LTCD__Init+0xb0>)
 8000b1a:	2203      	movs	r2, #3
 8000b1c:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000b1e:	4b23      	ldr	r3, [pc, #140]	@ (8000bac <LTCD__Init+0xb0>)
 8000b20:	f240 120d 	movw	r2, #269	@ 0x10d
 8000b24:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000b26:	4b21      	ldr	r3, [pc, #132]	@ (8000bac <LTCD__Init+0xb0>)
 8000b28:	f240 1243 	movw	r2, #323	@ 0x143
 8000b2c:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000b2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bac <LTCD__Init+0xb0>)
 8000b30:	f240 1217 	movw	r2, #279	@ 0x117
 8000b34:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000b36:	4b1d      	ldr	r3, [pc, #116]	@ (8000bac <LTCD__Init+0xb0>)
 8000b38:	f240 1247 	movw	r2, #327	@ 0x147
 8000b3c:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000b3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000bac <LTCD__Init+0xb0>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000b46:	4b19      	ldr	r3, [pc, #100]	@ (8000bac <LTCD__Init+0xb0>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000b4e:	4b17      	ldr	r3, [pc, #92]	@ (8000bac <LTCD__Init+0xb0>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000b56:	4b17      	ldr	r3, [pc, #92]	@ (8000bb4 <LTCD__Init+0xb8>)
 8000b58:	2208      	movs	r2, #8
 8000b5a:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000b5c:	4b15      	ldr	r3, [pc, #84]	@ (8000bb4 <LTCD__Init+0xb8>)
 8000b5e:	22c0      	movs	r2, #192	@ 0xc0
 8000b60:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000b62:	4b14      	ldr	r3, [pc, #80]	@ (8000bb4 <LTCD__Init+0xb8>)
 8000b64:	2204      	movs	r2, #4
 8000b66:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000b68:	4b12      	ldr	r3, [pc, #72]	@ (8000bb4 <LTCD__Init+0xb8>)
 8000b6a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000b6e:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000b70:	4810      	ldr	r0, [pc, #64]	@ (8000bb4 <LTCD__Init+0xb8>)
 8000b72:	f004 faa7 	bl	80050c4 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b76:	4b0d      	ldr	r3, [pc, #52]	@ (8000bac <LTCD__Init+0xb0>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bac <LTCD__Init+0xb0>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b82:	4b0a      	ldr	r3, [pc, #40]	@ (8000bac <LTCD__Init+0xb0>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b88:	4b08      	ldr	r3, [pc, #32]	@ (8000bac <LTCD__Init+0xb0>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000b8e:	f7ff fead 	bl	80008ec <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b92:	4806      	ldr	r0, [pc, #24]	@ (8000bac <LTCD__Init+0xb0>)
 8000b94:	f003 fb6c 	bl	8004270 <HAL_LTDC_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000b9e:	f000 f99d 	bl	8000edc <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000ba2:	f000 f9b8 	bl	8000f16 <ili9341_Init>
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000074 	.word	0x20000074
 8000bb0:	40016800 	.word	0x40016800
 8000bb4:	2000011c 	.word	0x2000011c

08000bb8 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	80fb      	strh	r3, [r7, #6]
 8000bc2:	460b      	mov	r3, r1
 8000bc4:	80bb      	strh	r3, [r7, #4]
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000bca:	88ba      	ldrh	r2, [r7, #4]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	011b      	lsls	r3, r3, #4
 8000bd0:	1a9b      	subs	r3, r3, r2
 8000bd2:	011b      	lsls	r3, r3, #4
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	88fb      	ldrh	r3, [r7, #6]
 8000bd8:	4413      	add	r3, r2
 8000bda:	4905      	ldr	r1, [pc, #20]	@ (8000bf0 <LCD_Draw_Pixel+0x38>)
 8000bdc:	887a      	ldrh	r2, [r7, #2]
 8000bde:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	20000150 	.word	0x20000150

08000bf4 <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8000bf4:	b590      	push	{r4, r7, lr}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4604      	mov	r4, r0
 8000bfc:	4608      	mov	r0, r1
 8000bfe:	4611      	mov	r1, r2
 8000c00:	461a      	mov	r2, r3
 8000c02:	4623      	mov	r3, r4
 8000c04:	80fb      	strh	r3, [r7, #6]
 8000c06:	4603      	mov	r3, r0
 8000c08:	80bb      	strh	r3, [r7, #4]
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	807b      	strh	r3, [r7, #2]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 8000c12:	887b      	ldrh	r3, [r7, #2]
 8000c14:	425b      	negs	r3, r3
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	81fb      	strh	r3, [r7, #14]
 8000c1a:	e034      	b.n	8000c86 <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8000c1c:	887b      	ldrh	r3, [r7, #2]
 8000c1e:	425b      	negs	r3, r3
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	81bb      	strh	r3, [r7, #12]
 8000c24:	e024      	b.n	8000c70 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8000c26:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c2a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000c2e:	fb03 f202 	mul.w	r2, r3, r2
 8000c32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c36:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8000c3a:	fb01 f303 	mul.w	r3, r1, r3
 8000c3e:	441a      	add	r2, r3
 8000c40:	887b      	ldrh	r3, [r7, #2]
 8000c42:	8879      	ldrh	r1, [r7, #2]
 8000c44:	fb01 f303 	mul.w	r3, r1, r3
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	dc0b      	bgt.n	8000c64 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8000c4c:	89ba      	ldrh	r2, [r7, #12]
 8000c4e:	88fb      	ldrh	r3, [r7, #6]
 8000c50:	4413      	add	r3, r2
 8000c52:	b298      	uxth	r0, r3
 8000c54:	89fa      	ldrh	r2, [r7, #14]
 8000c56:	88bb      	ldrh	r3, [r7, #4]
 8000c58:	4413      	add	r3, r2
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	883a      	ldrh	r2, [r7, #0]
 8000c5e:	4619      	mov	r1, r3
 8000c60:	f7ff ffaa 	bl	8000bb8 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8000c64:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	81bb      	strh	r3, [r7, #12]
 8000c70:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000c74:	887b      	ldrh	r3, [r7, #2]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	ddd5      	ble.n	8000c26 <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 8000c7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	3301      	adds	r3, #1
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	81fb      	strh	r3, [r7, #14]
 8000c86:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000c8a:	887b      	ldrh	r3, [r7, #2]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	ddc5      	ble.n	8000c1c <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8000c90:	bf00      	nop
 8000c92:	bf00      	nop
 8000c94:	3714      	adds	r7, #20
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd90      	pop	{r4, r7, pc}

08000c9a <LCD_Draw_Vertical_Line>:

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000c9a:	b590      	push	{r4, r7, lr}
 8000c9c:	b085      	sub	sp, #20
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	4611      	mov	r1, r2
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	4623      	mov	r3, r4
 8000caa:	80fb      	strh	r3, [r7, #6]
 8000cac:	4603      	mov	r3, r0
 8000cae:	80bb      	strh	r3, [r7, #4]
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	807b      	strh	r3, [r7, #2]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000cb8:	2300      	movs	r3, #0
 8000cba:	81fb      	strh	r3, [r7, #14]
 8000cbc:	e00b      	b.n	8000cd6 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8000cbe:	89fa      	ldrh	r2, [r7, #14]
 8000cc0:	88bb      	ldrh	r3, [r7, #4]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	b299      	uxth	r1, r3
 8000cc6:	883a      	ldrh	r2, [r7, #0]
 8000cc8:	88fb      	ldrh	r3, [r7, #6]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff ff74 	bl	8000bb8 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000cd0:	89fb      	ldrh	r3, [r7, #14]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	81fb      	strh	r3, [r7, #14]
 8000cd6:	89fa      	ldrh	r2, [r7, #14]
 8000cd8:	887b      	ldrh	r3, [r7, #2]
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	d3ef      	bcc.n	8000cbe <LCD_Draw_Vertical_Line+0x24>
  }
}
 8000cde:	bf00      	nop
 8000ce0:	bf00      	nop
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd90      	pop	{r4, r7, pc}

08000ce8 <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000ce8:	b590      	push	{r4, r7, lr}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4608      	mov	r0, r1
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4623      	mov	r3, r4
 8000cf8:	80fb      	strh	r3, [r7, #6]
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	80bb      	strh	r3, [r7, #4]
 8000cfe:	460b      	mov	r3, r1
 8000d00:	807b      	strh	r3, [r7, #2]
 8000d02:	4613      	mov	r3, r2
 8000d04:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000d06:	2300      	movs	r3, #0
 8000d08:	81fb      	strh	r3, [r7, #14]
 8000d0a:	e00b      	b.n	8000d24 <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(i+x, y, color);
 8000d0c:	89fa      	ldrh	r2, [r7, #14]
 8000d0e:	88fb      	ldrh	r3, [r7, #6]
 8000d10:	4413      	add	r3, r2
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	883a      	ldrh	r2, [r7, #0]
 8000d16:	88b9      	ldrh	r1, [r7, #4]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff ff4d 	bl	8000bb8 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000d1e:	89fb      	ldrh	r3, [r7, #14]
 8000d20:	3301      	adds	r3, #1
 8000d22:	81fb      	strh	r3, [r7, #14]
 8000d24:	89fa      	ldrh	r2, [r7, #14]
 8000d26:	887b      	ldrh	r3, [r7, #2]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d3ef      	bcc.n	8000d0c <LCD_Draw_Horizontal_Line+0x24>
  }
}
 8000d2c:	bf00      	nop
 8000d2e:	bf00      	nop
 8000d30:	3714      	adds	r7, #20
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd90      	pop	{r4, r7, pc}
	...

08000d38 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	460a      	mov	r2, r1
 8000d42:	71fb      	strb	r3, [r7, #7]
 8000d44:	4613      	mov	r3, r2
 8000d46:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d10e      	bne.n	8000d6c <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	e007      	b.n	8000d64 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000d54:	4908      	ldr	r1, [pc, #32]	@ (8000d78 <LCD_Clear+0x40>)
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	88ba      	ldrh	r2, [r7, #4]
 8000d5a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	3301      	adds	r3, #1
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000d6a:	d3f3      	bcc.n	8000d54 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000d6c:	bf00      	nop
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	20000150 	.word	0x20000150

08000d7c <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000d86:	4a04      	ldr	r2, [pc, #16]	@ (8000d98 <LCD_SetTextColor+0x1c>)
 8000d88:	88fb      	ldrh	r3, [r7, #6]
 8000d8a:	8013      	strh	r3, [r2, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	20000000 	.word	0x20000000

08000d9c <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000da4:	4a04      	ldr	r2, [pc, #16]	@ (8000db8 <LCD_SetFont+0x1c>)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6013      	str	r3, [r2, #0]
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	2000014c 	.word	0x2000014c

08000dbc <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	603a      	str	r2, [r7, #0]
 8000dc6:	80fb      	strh	r3, [r7, #6]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	e04c      	b.n	8000e74 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	e03f      	b.n	8000e60 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	683a      	ldr	r2, [r7, #0]
 8000de6:	4413      	add	r3, r2
 8000de8:	881b      	ldrh	r3, [r3, #0]
 8000dea:	4619      	mov	r1, r3
 8000dec:	4b27      	ldr	r3, [pc, #156]	@ (8000e8c <LCD_Draw_Char+0xd0>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	889b      	ldrh	r3, [r3, #4]
 8000df2:	4a27      	ldr	r2, [pc, #156]	@ (8000e90 <LCD_Draw_Char+0xd4>)
 8000df4:	fba2 2303 	umull	r2, r3, r2, r3
 8000df8:	08db      	lsrs	r3, r3, #3
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	00db      	lsls	r3, r3, #3
 8000dfe:	2280      	movs	r2, #128	@ 0x80
 8000e00:	409a      	lsls	r2, r3
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	fa42 f303 	asr.w	r3, r2, r3
 8000e08:	400b      	ands	r3, r1
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d104      	bne.n	8000e18 <LCD_Draw_Char+0x5c>
 8000e0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000e8c <LCD_Draw_Char+0xd0>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	889b      	ldrh	r3, [r3, #4]
 8000e14:	2b0c      	cmp	r3, #12
 8000e16:	d920      	bls.n	8000e5a <LCD_Draw_Char+0x9e>
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	683a      	ldr	r2, [r7, #0]
 8000e1e:	4413      	add	r3, r2
 8000e20:	881b      	ldrh	r3, [r3, #0]
 8000e22:	461a      	mov	r2, r3
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	fa42 f303 	asr.w	r3, r2, r3
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d104      	bne.n	8000e3c <LCD_Draw_Char+0x80>
 8000e32:	4b16      	ldr	r3, [pc, #88]	@ (8000e8c <LCD_Draw_Char+0xd0>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	889b      	ldrh	r3, [r3, #4]
 8000e38:	2b0c      	cmp	r3, #12
 8000e3a:	d80e      	bhi.n	8000e5a <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	88fb      	ldrh	r3, [r7, #6]
 8000e42:	4413      	add	r3, r2
 8000e44:	b298      	uxth	r0, r3
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	88bb      	ldrh	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	4a10      	ldr	r2, [pc, #64]	@ (8000e94 <LCD_Draw_Char+0xd8>)
 8000e52:	8812      	ldrh	r2, [r2, #0]
 8000e54:	4619      	mov	r1, r3
 8000e56:	f7ff feaf 	bl	8000bb8 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	4b0a      	ldr	r3, [pc, #40]	@ (8000e8c <LCD_Draw_Char+0xd0>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	889b      	ldrh	r3, [r3, #4]
 8000e66:	461a      	mov	r2, r3
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d3b8      	bcc.n	8000de0 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	3301      	adds	r3, #1
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	4b05      	ldr	r3, [pc, #20]	@ (8000e8c <LCD_Draw_Char+0xd0>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	88db      	ldrh	r3, [r3, #6]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d3ab      	bcc.n	8000dda <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000e82:	bf00      	nop
 8000e84:	bf00      	nop
 8000e86:	3710      	adds	r7, #16
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	2000014c 	.word	0x2000014c
 8000e90:	aaaaaaab 	.word	0xaaaaaaab
 8000e94:	20000000 	.word	0x20000000

08000e98 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	80fb      	strh	r3, [r7, #6]
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	80bb      	strh	r3, [r7, #4]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000eaa:	78fb      	ldrb	r3, [r7, #3]
 8000eac:	3b20      	subs	r3, #32
 8000eae:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000eb0:	4b09      	ldr	r3, [pc, #36]	@ (8000ed8 <LCD_DisplayChar+0x40>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	78fb      	ldrb	r3, [r7, #3]
 8000eb8:	4907      	ldr	r1, [pc, #28]	@ (8000ed8 <LCD_DisplayChar+0x40>)
 8000eba:	6809      	ldr	r1, [r1, #0]
 8000ebc:	88c9      	ldrh	r1, [r1, #6]
 8000ebe:	fb01 f303 	mul.w	r3, r1, r3
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	441a      	add	r2, r3
 8000ec6:	88b9      	ldrh	r1, [r7, #4]
 8000ec8:	88fb      	ldrh	r3, [r7, #6]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff ff76 	bl	8000dbc <LCD_Draw_Char>
}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	2000014c 	.word	0x2000014c

08000edc <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee0:	b672      	cpsid	i
}
 8000ee2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <LCD_Error_Handler+0x8>

08000ee8 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8000eec:	f001 f945 	bl	800217a <STMPE811_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d001      	beq.n	8000efa <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8000ef6:	bf00      	nop
 8000ef8:	e7fd      	b.n	8000ef6 <InitializeLCDTouch+0xe>
  }
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}

08000efe <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f001 f9ef 	bl	80022ea <STMPE811_ReadTouch>
 8000f0c:	4603      	mov	r3, r0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000f1a:	f000 f9ff 	bl	800131c <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8000f1e:	20ca      	movs	r0, #202	@ 0xca
 8000f20:	f000 f943 	bl	80011aa <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8000f24:	20c3      	movs	r0, #195	@ 0xc3
 8000f26:	f000 f94d 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8000f2a:	2008      	movs	r0, #8
 8000f2c:	f000 f94a 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8000f30:	2050      	movs	r0, #80	@ 0x50
 8000f32:	f000 f947 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8000f36:	20cf      	movs	r0, #207	@ 0xcf
 8000f38:	f000 f937 	bl	80011aa <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	f000 f941 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8000f42:	20c1      	movs	r0, #193	@ 0xc1
 8000f44:	f000 f93e 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8000f48:	2030      	movs	r0, #48	@ 0x30
 8000f4a:	f000 f93b 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8000f4e:	20ed      	movs	r0, #237	@ 0xed
 8000f50:	f000 f92b 	bl	80011aa <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8000f54:	2064      	movs	r0, #100	@ 0x64
 8000f56:	f000 f935 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8000f5a:	2003      	movs	r0, #3
 8000f5c:	f000 f932 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8000f60:	2012      	movs	r0, #18
 8000f62:	f000 f92f 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8000f66:	2081      	movs	r0, #129	@ 0x81
 8000f68:	f000 f92c 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8000f6c:	20e8      	movs	r0, #232	@ 0xe8
 8000f6e:	f000 f91c 	bl	80011aa <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8000f72:	2085      	movs	r0, #133	@ 0x85
 8000f74:	f000 f926 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f000 f923 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8000f7e:	2078      	movs	r0, #120	@ 0x78
 8000f80:	f000 f920 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8000f84:	20cb      	movs	r0, #203	@ 0xcb
 8000f86:	f000 f910 	bl	80011aa <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8000f8a:	2039      	movs	r0, #57	@ 0x39
 8000f8c:	f000 f91a 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8000f90:	202c      	movs	r0, #44	@ 0x2c
 8000f92:	f000 f917 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000f96:	2000      	movs	r0, #0
 8000f98:	f000 f914 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8000f9c:	2034      	movs	r0, #52	@ 0x34
 8000f9e:	f000 f911 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8000fa2:	2002      	movs	r0, #2
 8000fa4:	f000 f90e 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8000fa8:	20f7      	movs	r0, #247	@ 0xf7
 8000faa:	f000 f8fe 	bl	80011aa <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8000fae:	2020      	movs	r0, #32
 8000fb0:	f000 f908 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8000fb4:	20ea      	movs	r0, #234	@ 0xea
 8000fb6:	f000 f8f8 	bl	80011aa <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f000 f902 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f000 f8ff 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8000fc6:	20b1      	movs	r0, #177	@ 0xb1
 8000fc8:	f000 f8ef 	bl	80011aa <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000fcc:	2000      	movs	r0, #0
 8000fce:	f000 f8f9 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8000fd2:	201b      	movs	r0, #27
 8000fd4:	f000 f8f6 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8000fd8:	20b6      	movs	r0, #182	@ 0xb6
 8000fda:	f000 f8e6 	bl	80011aa <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8000fde:	200a      	movs	r0, #10
 8000fe0:	f000 f8f0 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8000fe4:	20a2      	movs	r0, #162	@ 0xa2
 8000fe6:	f000 f8ed 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8000fea:	20c0      	movs	r0, #192	@ 0xc0
 8000fec:	f000 f8dd 	bl	80011aa <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8000ff0:	2010      	movs	r0, #16
 8000ff2:	f000 f8e7 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8000ff6:	20c1      	movs	r0, #193	@ 0xc1
 8000ff8:	f000 f8d7 	bl	80011aa <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8000ffc:	2010      	movs	r0, #16
 8000ffe:	f000 f8e1 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001002:	20c5      	movs	r0, #197	@ 0xc5
 8001004:	f000 f8d1 	bl	80011aa <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001008:	2045      	movs	r0, #69	@ 0x45
 800100a:	f000 f8db 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 800100e:	2015      	movs	r0, #21
 8001010:	f000 f8d8 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001014:	20c7      	movs	r0, #199	@ 0xc7
 8001016:	f000 f8c8 	bl	80011aa <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 800101a:	2090      	movs	r0, #144	@ 0x90
 800101c:	f000 f8d2 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001020:	2036      	movs	r0, #54	@ 0x36
 8001022:	f000 f8c2 	bl	80011aa <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001026:	20c8      	movs	r0, #200	@ 0xc8
 8001028:	f000 f8cc 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 800102c:	20f2      	movs	r0, #242	@ 0xf2
 800102e:	f000 f8bc 	bl	80011aa <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001032:	2000      	movs	r0, #0
 8001034:	f000 f8c6 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8001038:	20b0      	movs	r0, #176	@ 0xb0
 800103a:	f000 f8b6 	bl	80011aa <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 800103e:	20c2      	movs	r0, #194	@ 0xc2
 8001040:	f000 f8c0 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001044:	20b6      	movs	r0, #182	@ 0xb6
 8001046:	f000 f8b0 	bl	80011aa <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 800104a:	200a      	movs	r0, #10
 800104c:	f000 f8ba 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8001050:	20a7      	movs	r0, #167	@ 0xa7
 8001052:	f000 f8b7 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001056:	2027      	movs	r0, #39	@ 0x27
 8001058:	f000 f8b4 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800105c:	2004      	movs	r0, #4
 800105e:	f000 f8b1 	bl	80011c4 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001062:	202a      	movs	r0, #42	@ 0x2a
 8001064:	f000 f8a1 	bl	80011aa <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001068:	2000      	movs	r0, #0
 800106a:	f000 f8ab 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800106e:	2000      	movs	r0, #0
 8001070:	f000 f8a8 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001074:	2000      	movs	r0, #0
 8001076:	f000 f8a5 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 800107a:	20ef      	movs	r0, #239	@ 0xef
 800107c:	f000 f8a2 	bl	80011c4 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8001080:	202b      	movs	r0, #43	@ 0x2b
 8001082:	f000 f892 	bl	80011aa <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001086:	2000      	movs	r0, #0
 8001088:	f000 f89c 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800108c:	2000      	movs	r0, #0
 800108e:	f000 f899 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001092:	2001      	movs	r0, #1
 8001094:	f000 f896 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8001098:	203f      	movs	r0, #63	@ 0x3f
 800109a:	f000 f893 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 800109e:	20f6      	movs	r0, #246	@ 0xf6
 80010a0:	f000 f883 	bl	80011aa <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f000 f88d 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80010aa:	2000      	movs	r0, #0
 80010ac:	f000 f88a 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 80010b0:	2006      	movs	r0, #6
 80010b2:	f000 f887 	bl	80011c4 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 80010b6:	202c      	movs	r0, #44	@ 0x2c
 80010b8:	f000 f877 	bl	80011aa <ili9341_Write_Reg>
  LCD_Delay(200);
 80010bc:	20c8      	movs	r0, #200	@ 0xc8
 80010be:	f000 f9e9 	bl	8001494 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 80010c2:	2026      	movs	r0, #38	@ 0x26
 80010c4:	f000 f871 	bl	80011aa <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80010c8:	2001      	movs	r0, #1
 80010ca:	f000 f87b 	bl	80011c4 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 80010ce:	20e0      	movs	r0, #224	@ 0xe0
 80010d0:	f000 f86b 	bl	80011aa <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 80010d4:	200f      	movs	r0, #15
 80010d6:	f000 f875 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 80010da:	2029      	movs	r0, #41	@ 0x29
 80010dc:	f000 f872 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 80010e0:	2024      	movs	r0, #36	@ 0x24
 80010e2:	f000 f86f 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80010e6:	200c      	movs	r0, #12
 80010e8:	f000 f86c 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 80010ec:	200e      	movs	r0, #14
 80010ee:	f000 f869 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80010f2:	2009      	movs	r0, #9
 80010f4:	f000 f866 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 80010f8:	204e      	movs	r0, #78	@ 0x4e
 80010fa:	f000 f863 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80010fe:	2078      	movs	r0, #120	@ 0x78
 8001100:	f000 f860 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001104:	203c      	movs	r0, #60	@ 0x3c
 8001106:	f000 f85d 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 800110a:	2009      	movs	r0, #9
 800110c:	f000 f85a 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001110:	2013      	movs	r0, #19
 8001112:	f000 f857 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001116:	2005      	movs	r0, #5
 8001118:	f000 f854 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 800111c:	2017      	movs	r0, #23
 800111e:	f000 f851 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001122:	2011      	movs	r0, #17
 8001124:	f000 f84e 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001128:	2000      	movs	r0, #0
 800112a:	f000 f84b 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 800112e:	20e1      	movs	r0, #225	@ 0xe1
 8001130:	f000 f83b 	bl	80011aa <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001134:	2000      	movs	r0, #0
 8001136:	f000 f845 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 800113a:	2016      	movs	r0, #22
 800113c:	f000 f842 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001140:	201b      	movs	r0, #27
 8001142:	f000 f83f 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001146:	2004      	movs	r0, #4
 8001148:	f000 f83c 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 800114c:	2011      	movs	r0, #17
 800114e:	f000 f839 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001152:	2007      	movs	r0, #7
 8001154:	f000 f836 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8001158:	2031      	movs	r0, #49	@ 0x31
 800115a:	f000 f833 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 800115e:	2033      	movs	r0, #51	@ 0x33
 8001160:	f000 f830 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8001164:	2042      	movs	r0, #66	@ 0x42
 8001166:	f000 f82d 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 800116a:	2005      	movs	r0, #5
 800116c:	f000 f82a 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001170:	200c      	movs	r0, #12
 8001172:	f000 f827 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8001176:	200a      	movs	r0, #10
 8001178:	f000 f824 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 800117c:	2028      	movs	r0, #40	@ 0x28
 800117e:	f000 f821 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001182:	202f      	movs	r0, #47	@ 0x2f
 8001184:	f000 f81e 	bl	80011c4 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8001188:	200f      	movs	r0, #15
 800118a:	f000 f81b 	bl	80011c4 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 800118e:	2011      	movs	r0, #17
 8001190:	f000 f80b 	bl	80011aa <ili9341_Write_Reg>
  LCD_Delay(200);
 8001194:	20c8      	movs	r0, #200	@ 0xc8
 8001196:	f000 f97d 	bl	8001494 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 800119a:	2029      	movs	r0, #41	@ 0x29
 800119c:	f000 f805 	bl	80011aa <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 80011a0:	202c      	movs	r0, #44	@ 0x2c
 80011a2:	f000 f802 	bl	80011aa <ili9341_Write_Reg>
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}

080011aa <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	4603      	mov	r3, r0
 80011b2:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 f94a 	bl	8001450 <LCD_IO_WriteReg>
}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80011ce:	88fb      	ldrh	r3, [r7, #6]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f000 f91b 	bl	800140c <LCD_IO_WriteData>
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80011e4:	4819      	ldr	r0, [pc, #100]	@ (800124c <SPI_Init+0x6c>)
 80011e6:	f004 fb4c 	bl	8005882 <HAL_SPI_GetState>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d12b      	bne.n	8001248 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 80011f0:	4b16      	ldr	r3, [pc, #88]	@ (800124c <SPI_Init+0x6c>)
 80011f2:	4a17      	ldr	r2, [pc, #92]	@ (8001250 <SPI_Init+0x70>)
 80011f4:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80011f6:	4b15      	ldr	r3, [pc, #84]	@ (800124c <SPI_Init+0x6c>)
 80011f8:	2218      	movs	r2, #24
 80011fa:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80011fc:	4b13      	ldr	r3, [pc, #76]	@ (800124c <SPI_Init+0x6c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001202:	4b12      	ldr	r3, [pc, #72]	@ (800124c <SPI_Init+0x6c>)
 8001204:	2200      	movs	r2, #0
 8001206:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001208:	4b10      	ldr	r3, [pc, #64]	@ (800124c <SPI_Init+0x6c>)
 800120a:	2200      	movs	r2, #0
 800120c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800120e:	4b0f      	ldr	r3, [pc, #60]	@ (800124c <SPI_Init+0x6c>)
 8001210:	2200      	movs	r2, #0
 8001212:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001214:	4b0d      	ldr	r3, [pc, #52]	@ (800124c <SPI_Init+0x6c>)
 8001216:	2207      	movs	r2, #7
 8001218:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800121a:	4b0c      	ldr	r3, [pc, #48]	@ (800124c <SPI_Init+0x6c>)
 800121c:	2200      	movs	r2, #0
 800121e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001220:	4b0a      	ldr	r3, [pc, #40]	@ (800124c <SPI_Init+0x6c>)
 8001222:	2200      	movs	r2, #0
 8001224:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001226:	4b09      	ldr	r3, [pc, #36]	@ (800124c <SPI_Init+0x6c>)
 8001228:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800122c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800122e:	4b07      	ldr	r3, [pc, #28]	@ (800124c <SPI_Init+0x6c>)
 8001230:	2200      	movs	r2, #0
 8001232:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001234:	4b05      	ldr	r3, [pc, #20]	@ (800124c <SPI_Init+0x6c>)
 8001236:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800123a:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 800123c:	4803      	ldr	r0, [pc, #12]	@ (800124c <SPI_Init+0x6c>)
 800123e:	f000 f833 	bl	80012a8 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001242:	4802      	ldr	r0, [pc, #8]	@ (800124c <SPI_Init+0x6c>)
 8001244:	f004 f928 	bl	8005498 <HAL_SPI_Init>
  }
}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20025950 	.word	0x20025950
 8001250:	40015000 	.word	0x40015000

08001254 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800125e:	2300      	movs	r3, #0
 8001260:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8001262:	4b09      	ldr	r3, [pc, #36]	@ (8001288 <SPI_Write+0x34>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	1db9      	adds	r1, r7, #6
 8001268:	2201      	movs	r2, #1
 800126a:	4808      	ldr	r0, [pc, #32]	@ (800128c <SPI_Write+0x38>)
 800126c:	f004 f9c5 	bl	80055fa <HAL_SPI_Transmit>
 8001270:	4603      	mov	r3, r0
 8001272:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 800127a:	f000 f809 	bl	8001290 <SPI_Error>
  }
}
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	2000000c 	.word	0x2000000c
 800128c:	20025950 	.word	0x20025950

08001290 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001294:	4803      	ldr	r0, [pc, #12]	@ (80012a4 <SPI_Error+0x14>)
 8001296:	f004 f988 	bl	80055aa <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 800129a:	f7ff ffa1 	bl	80011e0 <SPI_Init>
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20025950 	.word	0x20025950

080012a8 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	@ 0x28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 80012b0:	2300      	movs	r3, #0
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	4b17      	ldr	r3, [pc, #92]	@ (8001314 <SPI_MspInit+0x6c>)
 80012b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b8:	4a16      	ldr	r2, [pc, #88]	@ (8001314 <SPI_MspInit+0x6c>)
 80012ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80012be:	6453      	str	r3, [r2, #68]	@ 0x44
 80012c0:	4b14      	ldr	r3, [pc, #80]	@ (8001314 <SPI_MspInit+0x6c>)
 80012c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012c8:	613b      	str	r3, [r7, #16]
 80012ca:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	4b10      	ldr	r3, [pc, #64]	@ (8001314 <SPI_MspInit+0x6c>)
 80012d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d4:	4a0f      	ldr	r2, [pc, #60]	@ (8001314 <SPI_MspInit+0x6c>)
 80012d6:	f043 0320 	orr.w	r3, r3, #32
 80012da:	6313      	str	r3, [r2, #48]	@ 0x30
 80012dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001314 <SPI_MspInit+0x6c>)
 80012de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e0:	f003 0320 	and.w	r3, r3, #32
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 80012e8:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80012ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80012f2:	2302      	movs	r3, #2
 80012f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80012f6:	2301      	movs	r3, #1
 80012f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 80012fa:	2305      	movs	r3, #5
 80012fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	4619      	mov	r1, r3
 8001304:	4804      	ldr	r0, [pc, #16]	@ (8001318 <SPI_MspInit+0x70>)
 8001306:	f001 fc41 	bl	8002b8c <HAL_GPIO_Init>
}
 800130a:	bf00      	nop
 800130c:	3728      	adds	r7, #40	@ 0x28
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800
 8001318:	40021400 	.word	0x40021400

0800131c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b088      	sub	sp, #32
 8001320:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8001322:	4b36      	ldr	r3, [pc, #216]	@ (80013fc <LCD_IO_Init+0xe0>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d164      	bne.n	80013f4 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 800132a:	4b34      	ldr	r3, [pc, #208]	@ (80013fc <LCD_IO_Init+0xe0>)
 800132c:	2201      	movs	r2, #1
 800132e:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001330:	2300      	movs	r3, #0
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	4b32      	ldr	r3, [pc, #200]	@ (8001400 <LCD_IO_Init+0xe4>)
 8001336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001338:	4a31      	ldr	r2, [pc, #196]	@ (8001400 <LCD_IO_Init+0xe4>)
 800133a:	f043 0308 	orr.w	r3, r3, #8
 800133e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001340:	4b2f      	ldr	r3, [pc, #188]	@ (8001400 <LCD_IO_Init+0xe4>)
 8001342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001344:	f003 0308 	and.w	r3, r3, #8
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 800134c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001350:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001352:	2301      	movs	r3, #1
 8001354:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800135a:	2302      	movs	r3, #2
 800135c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800135e:	f107 030c 	add.w	r3, r7, #12
 8001362:	4619      	mov	r1, r3
 8001364:	4827      	ldr	r0, [pc, #156]	@ (8001404 <LCD_IO_Init+0xe8>)
 8001366:	f001 fc11 	bl	8002b8c <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	4b24      	ldr	r3, [pc, #144]	@ (8001400 <LCD_IO_Init+0xe4>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001372:	4a23      	ldr	r2, [pc, #140]	@ (8001400 <LCD_IO_Init+0xe4>)
 8001374:	f043 0308 	orr.w	r3, r3, #8
 8001378:	6313      	str	r3, [r2, #48]	@ 0x30
 800137a:	4b21      	ldr	r3, [pc, #132]	@ (8001400 <LCD_IO_Init+0xe4>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	f003 0308 	and.w	r3, r3, #8
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001386:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800138a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800138c:	2301      	movs	r3, #1
 800138e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001394:	2302      	movs	r3, #2
 8001396:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001398:	f107 030c 	add.w	r3, r7, #12
 800139c:	4619      	mov	r1, r3
 800139e:	4819      	ldr	r0, [pc, #100]	@ (8001404 <LCD_IO_Init+0xe8>)
 80013a0:	f001 fbf4 	bl	8002b8c <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80013a4:	2300      	movs	r3, #0
 80013a6:	603b      	str	r3, [r7, #0]
 80013a8:	4b15      	ldr	r3, [pc, #84]	@ (8001400 <LCD_IO_Init+0xe4>)
 80013aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ac:	4a14      	ldr	r2, [pc, #80]	@ (8001400 <LCD_IO_Init+0xe4>)
 80013ae:	f043 0304 	orr.w	r3, r3, #4
 80013b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b4:	4b12      	ldr	r3, [pc, #72]	@ (8001400 <LCD_IO_Init+0xe4>)
 80013b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b8:	f003 0304 	and.w	r3, r3, #4
 80013bc:	603b      	str	r3, [r7, #0]
 80013be:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80013c0:	2304      	movs	r3, #4
 80013c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80013c4:	2301      	movs	r3, #1
 80013c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80013cc:	2302      	movs	r3, #2
 80013ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80013d0:	f107 030c 	add.w	r3, r7, #12
 80013d4:	4619      	mov	r1, r3
 80013d6:	480c      	ldr	r0, [pc, #48]	@ (8001408 <LCD_IO_Init+0xec>)
 80013d8:	f001 fbd8 	bl	8002b8c <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80013dc:	2200      	movs	r2, #0
 80013de:	2104      	movs	r1, #4
 80013e0:	4809      	ldr	r0, [pc, #36]	@ (8001408 <LCD_IO_Init+0xec>)
 80013e2:	f001 fe8b 	bl	80030fc <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80013e6:	2201      	movs	r2, #1
 80013e8:	2104      	movs	r1, #4
 80013ea:	4807      	ldr	r0, [pc, #28]	@ (8001408 <LCD_IO_Init+0xec>)
 80013ec:	f001 fe86 	bl	80030fc <HAL_GPIO_WritePin>

    SPI_Init();
 80013f0:	f7ff fef6 	bl	80011e0 <SPI_Init>
  }
}
 80013f4:	bf00      	nop
 80013f6:	3720      	adds	r7, #32
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	200259a8 	.word	0x200259a8
 8001400:	40023800 	.word	0x40023800
 8001404:	40020c00 	.word	0x40020c00
 8001408:	40020800 	.word	0x40020800

0800140c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001416:	2201      	movs	r2, #1
 8001418:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800141c:	480a      	ldr	r0, [pc, #40]	@ (8001448 <LCD_IO_WriteData+0x3c>)
 800141e:	f001 fe6d 	bl	80030fc <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001422:	2200      	movs	r2, #0
 8001424:	2104      	movs	r1, #4
 8001426:	4809      	ldr	r0, [pc, #36]	@ (800144c <LCD_IO_WriteData+0x40>)
 8001428:	f001 fe68 	bl	80030fc <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 800142c:	88fb      	ldrh	r3, [r7, #6]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff ff10 	bl	8001254 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001434:	2201      	movs	r2, #1
 8001436:	2104      	movs	r1, #4
 8001438:	4804      	ldr	r0, [pc, #16]	@ (800144c <LCD_IO_WriteData+0x40>)
 800143a:	f001 fe5f 	bl	80030fc <HAL_GPIO_WritePin>
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40020c00 	.word	0x40020c00
 800144c:	40020800 	.word	0x40020800

08001450 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800145a:	2200      	movs	r2, #0
 800145c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001460:	480a      	ldr	r0, [pc, #40]	@ (800148c <LCD_IO_WriteReg+0x3c>)
 8001462:	f001 fe4b 	bl	80030fc <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001466:	2200      	movs	r2, #0
 8001468:	2104      	movs	r1, #4
 800146a:	4809      	ldr	r0, [pc, #36]	@ (8001490 <LCD_IO_WriteReg+0x40>)
 800146c:	f001 fe46 	bl	80030fc <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	b29b      	uxth	r3, r3
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff feed 	bl	8001254 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800147a:	2201      	movs	r2, #1
 800147c:	2104      	movs	r1, #4
 800147e:	4804      	ldr	r0, [pc, #16]	@ (8001490 <LCD_IO_WriteReg+0x40>)
 8001480:	f001 fe3c 	bl	80030fc <HAL_GPIO_WritePin>
}
 8001484:	bf00      	nop
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40020c00 	.word	0x40020c00
 8001490:	40020800 	.word	0x40020800

08001494 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f001 fa6b 	bl	8002978 <HAL_Delay>
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80014b0:	f001 f9f0 	bl	8002894 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80014b4:	f000 f82a 	bl	800150c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80014b8:	f000 fa1a 	bl	80018f0 <MX_GPIO_Init>
	MX_LTDC_Init();
 80014bc:	f000 f8d0 	bl	8001660 <MX_LTDC_Init>
	MX_RNG_Init();
 80014c0:	f000 f980 	bl	80017c4 <MX_RNG_Init>
	MX_TIM2_Init();
 80014c4:	f000 f9c8 	bl	8001858 <MX_TIM2_Init>
	MX_SPI5_Init();
 80014c8:	f000 f990 	bl	80017ec <MX_SPI5_Init>
	MX_I2C3_Init();
 80014cc:	f000 f888 	bl	80015e0 <MX_I2C3_Init>
	/* USER CODE BEGIN 2 */
	ApplicationInit(); // Initializes the LCD functionality
 80014d0:	f7ff f804 	bl	80004dc <ApplicationInit>
//  LCD_Visual_Demo();
	HAL_Delay(5000);
 80014d4:	f241 3088 	movw	r0, #5000	@ 0x1388
 80014d8:	f001 fa4e 	bl	8002978 <HAL_Delay>
//#if COMPILE_TOUCH_FUNCTIONS == 1 // This block will need to be deleted
//  LCD_Touch_Polling_Demo(); // This function Will not return
//#endif
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	Screen current_screen = START_SCREEN;
 80014dc:	2300      	movs	r3, #0
 80014de:	71fb      	strb	r3, [r7, #7]
	while (1) {
		switch (current_screen) {
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d010      	beq.n	8001508 <main+0x5e>
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	dcfa      	bgt.n	80014e0 <main+0x36>
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d002      	beq.n	80014f4 <main+0x4a>
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d005      	beq.n	80014fe <main+0x54>
 80014f2:	e7f5      	b.n	80014e0 <main+0x36>
		case START_SCREEN:
			current_screen = handle_start_screen();
 80014f4:	f7ff f80a 	bl	800050c <handle_start_screen>
 80014f8:	4603      	mov	r3, r0
 80014fa:	71fb      	strb	r3, [r7, #7]
			break;
 80014fc:	e005      	b.n	800150a <main+0x60>
		case GAME_SCREEN:
			current_screen = handle_game_screen();
 80014fe:	f7ff f8af 	bl	8000660 <handle_game_screen>
 8001502:	4603      	mov	r3, r0
 8001504:	71fb      	strb	r3, [r7, #7]
			break;
 8001506:	e000      	b.n	800150a <main+0x60>
		case END_SCREEN:
//			current_screen = handle_game_over_screen();
			break;
 8001508:	bf00      	nop
		switch (current_screen) {
 800150a:	e7e9      	b.n	80014e0 <main+0x36>

0800150c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b094      	sub	sp, #80	@ 0x50
 8001510:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001512:	f107 0320 	add.w	r3, r7, #32
 8001516:	2230      	movs	r2, #48	@ 0x30
 8001518:	2100      	movs	r1, #0
 800151a:	4618      	mov	r0, r3
 800151c:	f004 fd74 	bl	8006008 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001520:	f107 030c 	add.w	r3, r7, #12
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001530:	2300      	movs	r3, #0
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	4b28      	ldr	r3, [pc, #160]	@ (80015d8 <SystemClock_Config+0xcc>)
 8001536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001538:	4a27      	ldr	r2, [pc, #156]	@ (80015d8 <SystemClock_Config+0xcc>)
 800153a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800153e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001540:	4b25      	ldr	r3, [pc, #148]	@ (80015d8 <SystemClock_Config+0xcc>)
 8001542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001544:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800154c:	2300      	movs	r3, #0
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	4b22      	ldr	r3, [pc, #136]	@ (80015dc <SystemClock_Config+0xd0>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a21      	ldr	r2, [pc, #132]	@ (80015dc <SystemClock_Config+0xd0>)
 8001556:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800155a:	6013      	str	r3, [r2, #0]
 800155c:	4b1f      	ldr	r3, [pc, #124]	@ (80015dc <SystemClock_Config+0xd0>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001564:	607b      	str	r3, [r7, #4]
 8001566:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001568:	2301      	movs	r3, #1
 800156a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800156c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001570:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001572:	2302      	movs	r3, #2
 8001574:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001576:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800157a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800157c:	2308      	movs	r3, #8
 800157e:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001580:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001584:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001586:	2302      	movs	r3, #2
 8001588:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800158a:	2307      	movs	r3, #7
 800158c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800158e:	f107 0320 	add.w	r3, r7, #32
 8001592:	4618      	mov	r0, r3
 8001594:	f003 f912 	bl	80047bc <HAL_RCC_OscConfig>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <SystemClock_Config+0x96>
		Error_Handler();
 800159e:	f000 fb55 	bl	8001c4c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80015a2:	230f      	movs	r3, #15
 80015a4:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015a6:	2302      	movs	r3, #2
 80015a8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015ae:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80015b2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015b8:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80015ba:	f107 030c 	add.w	r3, r7, #12
 80015be:	2105      	movs	r1, #5
 80015c0:	4618      	mov	r0, r3
 80015c2:	f003 fb73 	bl	8004cac <HAL_RCC_ClockConfig>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <SystemClock_Config+0xc4>
		Error_Handler();
 80015cc:	f000 fb3e 	bl	8001c4c <Error_Handler>
	}
}
 80015d0:	bf00      	nop
 80015d2:	3750      	adds	r7, #80	@ 0x50
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40007000 	.word	0x40007000

080015e0 <MX_I2C3_Init>:
/**
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 80015e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001654 <MX_I2C3_Init+0x74>)
 80015e6:	4a1c      	ldr	r2, [pc, #112]	@ (8001658 <MX_I2C3_Init+0x78>)
 80015e8:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 100000;
 80015ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001654 <MX_I2C3_Init+0x74>)
 80015ec:	4a1b      	ldr	r2, [pc, #108]	@ (800165c <MX_I2C3_Init+0x7c>)
 80015ee:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015f0:	4b18      	ldr	r3, [pc, #96]	@ (8001654 <MX_I2C3_Init+0x74>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 80015f6:	4b17      	ldr	r3, [pc, #92]	@ (8001654 <MX_I2C3_Init+0x74>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015fc:	4b15      	ldr	r3, [pc, #84]	@ (8001654 <MX_I2C3_Init+0x74>)
 80015fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001602:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001604:	4b13      	ldr	r3, [pc, #76]	@ (8001654 <MX_I2C3_Init+0x74>)
 8001606:	2200      	movs	r2, #0
 8001608:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 800160a:	4b12      	ldr	r3, [pc, #72]	@ (8001654 <MX_I2C3_Init+0x74>)
 800160c:	2200      	movs	r2, #0
 800160e:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001610:	4b10      	ldr	r3, [pc, #64]	@ (8001654 <MX_I2C3_Init+0x74>)
 8001612:	2200      	movs	r2, #0
 8001614:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001616:	4b0f      	ldr	r3, [pc, #60]	@ (8001654 <MX_I2C3_Init+0x74>)
 8001618:	2200      	movs	r2, #0
 800161a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 800161c:	480d      	ldr	r0, [pc, #52]	@ (8001654 <MX_I2C3_Init+0x74>)
 800161e:	f001 fd87 	bl	8003130 <HAL_I2C_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_I2C3_Init+0x4c>
		Error_Handler();
 8001628:	f000 fb10 	bl	8001c4c <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE)
 800162c:	2100      	movs	r1, #0
 800162e:	4809      	ldr	r0, [pc, #36]	@ (8001654 <MX_I2C3_Init+0x74>)
 8001630:	f002 fda2 	bl	8004178 <HAL_I2CEx_ConfigAnalogFilter>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_I2C3_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 800163a:	f000 fb07 	bl	8001c4c <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK) {
 800163e:	2100      	movs	r1, #0
 8001640:	4804      	ldr	r0, [pc, #16]	@ (8001654 <MX_I2C3_Init+0x74>)
 8001642:	f002 fdd5 	bl	80041f0 <HAL_I2CEx_ConfigDigitalFilter>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_I2C3_Init+0x70>
		Error_Handler();
 800164c:	f000 fafe 	bl	8001c4c <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	200259ac 	.word	0x200259ac
 8001658:	40005c00 	.word	0x40005c00
 800165c:	000186a0 	.word	0x000186a0

08001660 <MX_LTDC_Init>:
/**
 * @brief LTDC Initialization Function
 * @param None
 * @retval None
 */
static void MX_LTDC_Init(void) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b09a      	sub	sp, #104	@ 0x68
 8001664:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN LTDC_Init 0 */

	/* USER CODE END LTDC_Init 0 */

	LTDC_LayerCfgTypeDef pLayerCfg = { 0 };
 8001666:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800166a:	2234      	movs	r2, #52	@ 0x34
 800166c:	2100      	movs	r1, #0
 800166e:	4618      	mov	r0, r3
 8001670:	f004 fcca 	bl	8006008 <memset>
	LTDC_LayerCfgTypeDef pLayerCfg1 = { 0 };
 8001674:	463b      	mov	r3, r7
 8001676:	2234      	movs	r2, #52	@ 0x34
 8001678:	2100      	movs	r1, #0
 800167a:	4618      	mov	r0, r3
 800167c:	f004 fcc4 	bl	8006008 <memset>

	/* USER CODE BEGIN LTDC_Init 1 */

	/* USER CODE END LTDC_Init 1 */
	hltdc.Instance = LTDC;
 8001680:	4b4e      	ldr	r3, [pc, #312]	@ (80017bc <MX_LTDC_Init+0x15c>)
 8001682:	4a4f      	ldr	r2, [pc, #316]	@ (80017c0 <MX_LTDC_Init+0x160>)
 8001684:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001686:	4b4d      	ldr	r3, [pc, #308]	@ (80017bc <MX_LTDC_Init+0x15c>)
 8001688:	2200      	movs	r2, #0
 800168a:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800168c:	4b4b      	ldr	r3, [pc, #300]	@ (80017bc <MX_LTDC_Init+0x15c>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001692:	4b4a      	ldr	r3, [pc, #296]	@ (80017bc <MX_LTDC_Init+0x15c>)
 8001694:	2200      	movs	r2, #0
 8001696:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001698:	4b48      	ldr	r3, [pc, #288]	@ (80017bc <MX_LTDC_Init+0x15c>)
 800169a:	2200      	movs	r2, #0
 800169c:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 7;
 800169e:	4b47      	ldr	r3, [pc, #284]	@ (80017bc <MX_LTDC_Init+0x15c>)
 80016a0:	2207      	movs	r2, #7
 80016a2:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 3;
 80016a4:	4b45      	ldr	r3, [pc, #276]	@ (80017bc <MX_LTDC_Init+0x15c>)
 80016a6:	2203      	movs	r2, #3
 80016a8:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 14;
 80016aa:	4b44      	ldr	r3, [pc, #272]	@ (80017bc <MX_LTDC_Init+0x15c>)
 80016ac:	220e      	movs	r2, #14
 80016ae:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 5;
 80016b0:	4b42      	ldr	r3, [pc, #264]	@ (80017bc <MX_LTDC_Init+0x15c>)
 80016b2:	2205      	movs	r2, #5
 80016b4:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 654;
 80016b6:	4b41      	ldr	r3, [pc, #260]	@ (80017bc <MX_LTDC_Init+0x15c>)
 80016b8:	f240 228e 	movw	r2, #654	@ 0x28e
 80016bc:	625a      	str	r2, [r3, #36]	@ 0x24
	hltdc.Init.AccumulatedActiveH = 485;
 80016be:	4b3f      	ldr	r3, [pc, #252]	@ (80017bc <MX_LTDC_Init+0x15c>)
 80016c0:	f240 12e5 	movw	r2, #485	@ 0x1e5
 80016c4:	629a      	str	r2, [r3, #40]	@ 0x28
	hltdc.Init.TotalWidth = 660;
 80016c6:	4b3d      	ldr	r3, [pc, #244]	@ (80017bc <MX_LTDC_Init+0x15c>)
 80016c8:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80016cc:	62da      	str	r2, [r3, #44]	@ 0x2c
	hltdc.Init.TotalHeigh = 487;
 80016ce:	4b3b      	ldr	r3, [pc, #236]	@ (80017bc <MX_LTDC_Init+0x15c>)
 80016d0:	f240 12e7 	movw	r2, #487	@ 0x1e7
 80016d4:	631a      	str	r2, [r3, #48]	@ 0x30
	hltdc.Init.Backcolor.Blue = 0;
 80016d6:	4b39      	ldr	r3, [pc, #228]	@ (80017bc <MX_LTDC_Init+0x15c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 80016de:	4b37      	ldr	r3, [pc, #220]	@ (80017bc <MX_LTDC_Init+0x15c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	hltdc.Init.Backcolor.Red = 0;
 80016e6:	4b35      	ldr	r3, [pc, #212]	@ (80017bc <MX_LTDC_Init+0x15c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK) {
 80016ee:	4833      	ldr	r0, [pc, #204]	@ (80017bc <MX_LTDC_Init+0x15c>)
 80016f0:	f002 fdbe 	bl	8004270 <HAL_LTDC_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_LTDC_Init+0x9e>
		Error_Handler();
 80016fa:	f000 faa7 	bl	8001c4c <Error_Handler>
	}
	pLayerCfg.WindowX0 = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.WindowX1 = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.WindowY0 = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	63fb      	str	r3, [r7, #60]	@ 0x3c
	pLayerCfg.WindowY1 = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	643b      	str	r3, [r7, #64]	@ 0x40
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800170e:	2300      	movs	r3, #0
 8001710:	647b      	str	r3, [r7, #68]	@ 0x44
	pLayerCfg.Alpha = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	64bb      	str	r3, [r7, #72]	@ 0x48
	pLayerCfg.Alpha0 = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	64fb      	str	r3, [r7, #76]	@ 0x4c
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800171a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800171e:	653b      	str	r3, [r7, #80]	@ 0x50
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001720:	2305      	movs	r3, #5
 8001722:	657b      	str	r3, [r7, #84]	@ 0x54
	pLayerCfg.FBStartAdress = 0;
 8001724:	2300      	movs	r3, #0
 8001726:	65bb      	str	r3, [r7, #88]	@ 0x58
	pLayerCfg.ImageWidth = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	65fb      	str	r3, [r7, #92]	@ 0x5c
	pLayerCfg.ImageHeight = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	663b      	str	r3, [r7, #96]	@ 0x60
	pLayerCfg.Backcolor.Blue = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
	pLayerCfg.Backcolor.Green = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
	pLayerCfg.Backcolor.Red = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK) {
 8001742:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001746:	2200      	movs	r2, #0
 8001748:	4619      	mov	r1, r3
 800174a:	481c      	ldr	r0, [pc, #112]	@ (80017bc <MX_LTDC_Init+0x15c>)
 800174c:	f002 fe60 	bl	8004410 <HAL_LTDC_ConfigLayer>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_LTDC_Init+0xfa>
		Error_Handler();
 8001756:	f000 fa79 	bl	8001c4c <Error_Handler>
	}
	pLayerCfg1.WindowX0 = 0;
 800175a:	2300      	movs	r3, #0
 800175c:	603b      	str	r3, [r7, #0]
	pLayerCfg1.WindowX1 = 0;
 800175e:	2300      	movs	r3, #0
 8001760:	607b      	str	r3, [r7, #4]
	pLayerCfg1.WindowY0 = 0;
 8001762:	2300      	movs	r3, #0
 8001764:	60bb      	str	r3, [r7, #8]
	pLayerCfg1.WindowY1 = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
	pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800176a:	2300      	movs	r3, #0
 800176c:	613b      	str	r3, [r7, #16]
	pLayerCfg1.Alpha = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
	pLayerCfg1.Alpha0 = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	61bb      	str	r3, [r7, #24]
	pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001776:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800177a:	61fb      	str	r3, [r7, #28]
	pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800177c:	2305      	movs	r3, #5
 800177e:	623b      	str	r3, [r7, #32]
	pLayerCfg1.FBStartAdress = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg1.ImageWidth = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg1.ImageHeight = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	pLayerCfg1.Backcolor.Blue = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	pLayerCfg1.Backcolor.Green = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	pLayerCfg1.Backcolor.Red = 0;
 8001798:	2300      	movs	r3, #0
 800179a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK) {
 800179e:	463b      	mov	r3, r7
 80017a0:	2201      	movs	r2, #1
 80017a2:	4619      	mov	r1, r3
 80017a4:	4805      	ldr	r0, [pc, #20]	@ (80017bc <MX_LTDC_Init+0x15c>)
 80017a6:	f002 fe33 	bl	8004410 <HAL_LTDC_ConfigLayer>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_LTDC_Init+0x154>
		Error_Handler();
 80017b0:	f000 fa4c 	bl	8001c4c <Error_Handler>
	}
	/* USER CODE BEGIN LTDC_Init 2 */

	/* USER CODE END LTDC_Init 2 */

}
 80017b4:	bf00      	nop
 80017b6:	3768      	adds	r7, #104	@ 0x68
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20025a00 	.word	0x20025a00
 80017c0:	40016800 	.word	0x40016800

080017c4 <MX_RNG_Init>:
/**
 * @brief RNG Initialization Function
 * @param None
 * @retval None
 */
static void MX_RNG_Init(void) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
	/* USER CODE END RNG_Init 0 */

	/* USER CODE BEGIN RNG_Init 1 */

	/* USER CODE END RNG_Init 1 */
	hrng.Instance = RNG;
 80017c8:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <MX_RNG_Init+0x20>)
 80017ca:	4a07      	ldr	r2, [pc, #28]	@ (80017e8 <MX_RNG_Init+0x24>)
 80017cc:	601a      	str	r2, [r3, #0]
	if (HAL_RNG_Init(&hrng) != HAL_OK) {
 80017ce:	4805      	ldr	r0, [pc, #20]	@ (80017e4 <MX_RNG_Init+0x20>)
 80017d0:	f003 fe38 	bl	8005444 <HAL_RNG_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_RNG_Init+0x1a>
		Error_Handler();
 80017da:	f000 fa37 	bl	8001c4c <Error_Handler>
	}
	/* USER CODE BEGIN RNG_Init 2 */

	/* USER CODE END RNG_Init 2 */

}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20025aa8 	.word	0x20025aa8
 80017e8:	50060800 	.word	0x50060800

080017ec <MX_SPI5_Init>:
/**
 * @brief SPI5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI5_Init(void) {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI5_Init 1 */

	/* USER CODE END SPI5_Init 1 */
	/* SPI5 parameter configuration*/
	hspi5.Instance = SPI5;
 80017f0:	4b17      	ldr	r3, [pc, #92]	@ (8001850 <MX_SPI5_Init+0x64>)
 80017f2:	4a18      	ldr	r2, [pc, #96]	@ (8001854 <MX_SPI5_Init+0x68>)
 80017f4:	601a      	str	r2, [r3, #0]
	hspi5.Init.Mode = SPI_MODE_MASTER;
 80017f6:	4b16      	ldr	r3, [pc, #88]	@ (8001850 <MX_SPI5_Init+0x64>)
 80017f8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017fc:	605a      	str	r2, [r3, #4]
	hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80017fe:	4b14      	ldr	r3, [pc, #80]	@ (8001850 <MX_SPI5_Init+0x64>)
 8001800:	2200      	movs	r2, #0
 8001802:	609a      	str	r2, [r3, #8]
	hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001804:	4b12      	ldr	r3, [pc, #72]	@ (8001850 <MX_SPI5_Init+0x64>)
 8001806:	2200      	movs	r2, #0
 8001808:	60da      	str	r2, [r3, #12]
	hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800180a:	4b11      	ldr	r3, [pc, #68]	@ (8001850 <MX_SPI5_Init+0x64>)
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
	hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001810:	4b0f      	ldr	r3, [pc, #60]	@ (8001850 <MX_SPI5_Init+0x64>)
 8001812:	2200      	movs	r2, #0
 8001814:	615a      	str	r2, [r3, #20]
	hspi5.Init.NSS = SPI_NSS_SOFT;
 8001816:	4b0e      	ldr	r3, [pc, #56]	@ (8001850 <MX_SPI5_Init+0x64>)
 8001818:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800181c:	619a      	str	r2, [r3, #24]
	hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800181e:	4b0c      	ldr	r3, [pc, #48]	@ (8001850 <MX_SPI5_Init+0x64>)
 8001820:	2200      	movs	r2, #0
 8001822:	61da      	str	r2, [r3, #28]
	hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001824:	4b0a      	ldr	r3, [pc, #40]	@ (8001850 <MX_SPI5_Init+0x64>)
 8001826:	2200      	movs	r2, #0
 8001828:	621a      	str	r2, [r3, #32]
	hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800182a:	4b09      	ldr	r3, [pc, #36]	@ (8001850 <MX_SPI5_Init+0x64>)
 800182c:	2200      	movs	r2, #0
 800182e:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001830:	4b07      	ldr	r3, [pc, #28]	@ (8001850 <MX_SPI5_Init+0x64>)
 8001832:	2200      	movs	r2, #0
 8001834:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi5.Init.CRCPolynomial = 10;
 8001836:	4b06      	ldr	r3, [pc, #24]	@ (8001850 <MX_SPI5_Init+0x64>)
 8001838:	220a      	movs	r2, #10
 800183a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi5) != HAL_OK) {
 800183c:	4804      	ldr	r0, [pc, #16]	@ (8001850 <MX_SPI5_Init+0x64>)
 800183e:	f003 fe2b 	bl	8005498 <HAL_SPI_Init>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_SPI5_Init+0x60>
		Error_Handler();
 8001848:	f000 fa00 	bl	8001c4c <Error_Handler>
	}
	/* USER CODE BEGIN SPI5_Init 2 */

	/* USER CODE END SPI5_Init 2 */

}
 800184c:	bf00      	nop
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20025ab8 	.word	0x20025ab8
 8001854:	40015000 	.word	0x40015000

08001858 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800185e:	f107 0308 	add.w	r3, r7, #8
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800186c:	463b      	mov	r3, r7
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001874:	4b1d      	ldr	r3, [pc, #116]	@ (80018ec <MX_TIM2_Init+0x94>)
 8001876:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800187a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 800187c:	4b1b      	ldr	r3, [pc, #108]	@ (80018ec <MX_TIM2_Init+0x94>)
 800187e:	2200      	movs	r2, #0
 8001880:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001882:	4b1a      	ldr	r3, [pc, #104]	@ (80018ec <MX_TIM2_Init+0x94>)
 8001884:	2200      	movs	r2, #0
 8001886:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8001888:	4b18      	ldr	r3, [pc, #96]	@ (80018ec <MX_TIM2_Init+0x94>)
 800188a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800188e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001890:	4b16      	ldr	r3, [pc, #88]	@ (80018ec <MX_TIM2_Init+0x94>)
 8001892:	2200      	movs	r2, #0
 8001894:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001896:	4b15      	ldr	r3, [pc, #84]	@ (80018ec <MX_TIM2_Init+0x94>)
 8001898:	2200      	movs	r2, #0
 800189a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800189c:	4813      	ldr	r0, [pc, #76]	@ (80018ec <MX_TIM2_Init+0x94>)
 800189e:	f004 f8db 	bl	8005a58 <HAL_TIM_Base_Init>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_TIM2_Init+0x54>
		Error_Handler();
 80018a8:	f000 f9d0 	bl	8001c4c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018b0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80018b2:	f107 0308 	add.w	r3, r7, #8
 80018b6:	4619      	mov	r1, r3
 80018b8:	480c      	ldr	r0, [pc, #48]	@ (80018ec <MX_TIM2_Init+0x94>)
 80018ba:	f004 f91c 	bl	8005af6 <HAL_TIM_ConfigClockSource>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_TIM2_Init+0x70>
		Error_Handler();
 80018c4:	f000 f9c2 	bl	8001c4c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c8:	2300      	movs	r3, #0
 80018ca:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018cc:	2300      	movs	r3, #0
 80018ce:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80018d0:	463b      	mov	r3, r7
 80018d2:	4619      	mov	r1, r3
 80018d4:	4805      	ldr	r0, [pc, #20]	@ (80018ec <MX_TIM2_Init+0x94>)
 80018d6:	f004 fb1b 	bl	8005f10 <HAL_TIMEx_MasterConfigSynchronization>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 80018e0:	f000 f9b4 	bl	8001c4c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80018e4:	bf00      	nop
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20025b10 	.word	0x20025b10

080018f0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08e      	sub	sp, #56	@ 0x38
 80018f4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80018f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	609a      	str	r2, [r3, #8]
 8001902:	60da      	str	r2, [r3, #12]
 8001904:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	623b      	str	r3, [r7, #32]
 800190a:	4bb2      	ldr	r3, [pc, #712]	@ (8001bd4 <MX_GPIO_Init+0x2e4>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190e:	4ab1      	ldr	r2, [pc, #708]	@ (8001bd4 <MX_GPIO_Init+0x2e4>)
 8001910:	f043 0304 	orr.w	r3, r3, #4
 8001914:	6313      	str	r3, [r2, #48]	@ 0x30
 8001916:	4baf      	ldr	r3, [pc, #700]	@ (8001bd4 <MX_GPIO_Init+0x2e4>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	f003 0304 	and.w	r3, r3, #4
 800191e:	623b      	str	r3, [r7, #32]
 8001920:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	61fb      	str	r3, [r7, #28]
 8001926:	4bab      	ldr	r3, [pc, #684]	@ (8001bd4 <MX_GPIO_Init+0x2e4>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	4aaa      	ldr	r2, [pc, #680]	@ (8001bd4 <MX_GPIO_Init+0x2e4>)
 800192c:	f043 0320 	orr.w	r3, r3, #32
 8001930:	6313      	str	r3, [r2, #48]	@ 0x30
 8001932:	4ba8      	ldr	r3, [pc, #672]	@ (8001bd4 <MX_GPIO_Init+0x2e4>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	f003 0320 	and.w	r3, r3, #32
 800193a:	61fb      	str	r3, [r7, #28]
 800193c:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	61bb      	str	r3, [r7, #24]
 8001942:	4ba4      	ldr	r3, [pc, #656]	@ (8001bd4 <MX_GPIO_Init+0x2e4>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001946:	4aa3      	ldr	r2, [pc, #652]	@ (8001bd4 <MX_GPIO_Init+0x2e4>)
 8001948:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800194c:	6313      	str	r3, [r2, #48]	@ 0x30
 800194e:	4ba1      	ldr	r3, [pc, #644]	@ (8001bd4 <MX_GPIO_Init+0x2e4>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001956:	61bb      	str	r3, [r7, #24]
 8001958:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	4b9d      	ldr	r3, [pc, #628]	@ (8001bd4 <MX_GPIO_Init+0x2e4>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001962:	4a9c      	ldr	r2, [pc, #624]	@ (8001bd4 <MX_GPIO_Init+0x2e4>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	6313      	str	r3, [r2, #48]	@ 0x30
 800196a:	4b9a      	ldr	r3, [pc, #616]	@ (8001bd4 <MX_GPIO_Init+0x2e4>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	4b96      	ldr	r3, [pc, #600]	@ (8001bd4 <MX_GPIO_Init+0x2e4>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197e:	4a95      	ldr	r2, [pc, #596]	@ (8001bd4 <MX_GPIO_Init+0x2e4>)
 8001980:	f043 0302 	orr.w	r3, r3, #2
 8001984:	6313      	str	r3, [r2, #48]	@ 0x30
 8001986:	4b93      	ldr	r3, [pc, #588]	@ (8001bd4 <MX_GPIO_Init+0x2e4>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	4b8f      	ldr	r3, [pc, #572]	@ (8001bd4 <MX_GPIO_Init+0x2e4>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199a:	4a8e      	ldr	r2, [pc, #568]	@ (8001bd4 <MX_GPIO_Init+0x2e4>)
 800199c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a2:	4b8c      	ldr	r3, [pc, #560]	@ (8001bd4 <MX_GPIO_Init+0x2e4>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	4b88      	ldr	r3, [pc, #544]	@ (8001bd4 <MX_GPIO_Init+0x2e4>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b6:	4a87      	ldr	r2, [pc, #540]	@ (8001bd4 <MX_GPIO_Init+0x2e4>)
 80019b8:	f043 0310 	orr.w	r3, r3, #16
 80019bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019be:	4b85      	ldr	r3, [pc, #532]	@ (8001bd4 <MX_GPIO_Init+0x2e4>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c2:	f003 0310 	and.w	r3, r3, #16
 80019c6:	60bb      	str	r3, [r7, #8]
 80019c8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	607b      	str	r3, [r7, #4]
 80019ce:	4b81      	ldr	r3, [pc, #516]	@ (8001bd4 <MX_GPIO_Init+0x2e4>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d2:	4a80      	ldr	r2, [pc, #512]	@ (8001bd4 <MX_GPIO_Init+0x2e4>)
 80019d4:	f043 0308 	orr.w	r3, r3, #8
 80019d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019da:	4b7e      	ldr	r3, [pc, #504]	@ (8001bd4 <MX_GPIO_Init+0x2e4>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019de:	f003 0308 	and.w	r3, r3, #8
 80019e2:	607b      	str	r3, [r7, #4]
 80019e4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin | CSX_Pin | OTG_FS_PSO_Pin,
 80019e6:	2200      	movs	r2, #0
 80019e8:	2116      	movs	r1, #22
 80019ea:	487b      	ldr	r0, [pc, #492]	@ (8001bd8 <MX_GPIO_Init+0x2e8>)
 80019ec:	f001 fb86 	bl	80030fc <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80019f0:	2200      	movs	r2, #0
 80019f2:	2180      	movs	r1, #128	@ 0x80
 80019f4:	4879      	ldr	r0, [pc, #484]	@ (8001bdc <MX_GPIO_Init+0x2ec>)
 80019f6:	f001 fb81 	bl	80030fc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, RDX_Pin | WRX_DCX_Pin, GPIO_PIN_RESET);
 80019fa:	2200      	movs	r2, #0
 80019fc:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001a00:	4877      	ldr	r0, [pc, #476]	@ (8001be0 <MX_GPIO_Init+0x2f0>)
 8001a02:	f001 fb7b 	bl	80030fc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, LD3_Pin | LD4_Pin, GPIO_PIN_RESET);
 8001a06:	2200      	movs	r2, #0
 8001a08:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001a0c:	4875      	ldr	r0, [pc, #468]	@ (8001be4 <MX_GPIO_Init+0x2f4>)
 8001a0e:	f001 fb75 	bl	80030fc <HAL_GPIO_WritePin>

	/*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
	 A4_Pin A5_Pin SDNRAS_Pin A6_Pin
	 A7_Pin A8_Pin A9_Pin */
	GPIO_InitStruct.Pin = A0_Pin | A1_Pin | A2_Pin | A3_Pin | A4_Pin | A5_Pin
 8001a12:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001a16:	627b      	str	r3, [r7, #36]	@ 0x24
			| SDNRAS_Pin | A6_Pin | A7_Pin | A8_Pin | A9_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a20:	2303      	movs	r3, #3
 8001a22:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a24:	230c      	movs	r3, #12
 8001a26:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	486e      	ldr	r0, [pc, #440]	@ (8001be8 <MX_GPIO_Init+0x2f8>)
 8001a30:	f001 f8ac 	bl	8002b8c <HAL_GPIO_Init>

	/*Configure GPIO pin : SDNWE_Pin */
	GPIO_InitStruct.Pin = SDNWE_Pin;
 8001a34:	2301      	movs	r3, #1
 8001a36:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a40:	2303      	movs	r3, #3
 8001a42:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a44:	230c      	movs	r3, #12
 8001a46:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001a48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4862      	ldr	r0, [pc, #392]	@ (8001bd8 <MX_GPIO_Init+0x2e8>)
 8001a50:	f001 f89c 	bl	8002b8c <HAL_GPIO_Init>

	/*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
	GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin | CSX_Pin | OTG_FS_PSO_Pin;
 8001a54:	2316      	movs	r3, #22
 8001a56:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a60:	2300      	movs	r3, #0
 8001a62:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a68:	4619      	mov	r1, r3
 8001a6a:	485b      	ldr	r0, [pc, #364]	@ (8001bd8 <MX_GPIO_Init+0x2e8>)
 8001a6c:	f001 f88e 	bl	8002b8c <HAL_GPIO_Init>

	/*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
	GPIO_InitStruct.Pin = B1_Pin | MEMS_INT1_Pin | MEMS_INT2_Pin | TP_INT1_Pin;
 8001a70:	f248 0307 	movw	r3, #32775	@ 0x8007
 8001a74:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a76:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a84:	4619      	mov	r1, r3
 8001a86:	4855      	ldr	r0, [pc, #340]	@ (8001bdc <MX_GPIO_Init+0x2ec>)
 8001a88:	f001 f880 	bl	8002b8c <HAL_GPIO_Init>

	/*Configure GPIO pin : ACP_RST_Pin */
	GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001a8c:	2380      	movs	r3, #128	@ 0x80
 8001a8e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a90:	2301      	movs	r3, #1
 8001a92:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001a9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	484e      	ldr	r0, [pc, #312]	@ (8001bdc <MX_GPIO_Init+0x2ec>)
 8001aa4:	f001 f872 	bl	8002b8c <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OC_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001aa8:	2320      	movs	r3, #32
 8001aaa:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001aac:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001ab6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001aba:	4619      	mov	r1, r3
 8001abc:	4846      	ldr	r0, [pc, #280]	@ (8001bd8 <MX_GPIO_Init+0x2e8>)
 8001abe:	f001 f865 	bl	8002b8c <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001ace:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4845      	ldr	r0, [pc, #276]	@ (8001bec <MX_GPIO_Init+0x2fc>)
 8001ad6:	f001 f859 	bl	8002b8c <HAL_GPIO_Init>

	/*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
	 SDCLK_Pin SDNCAS_Pin */
	GPIO_InitStruct.Pin = A10_Pin | A11_Pin | BA0_Pin | BA1_Pin | SDCLK_Pin
 8001ada:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001ade:	627b      	str	r3, [r7, #36]	@ 0x24
			| SDNCAS_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001aec:	230c      	movs	r3, #12
 8001aee:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001af0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001af4:	4619      	mov	r1, r3
 8001af6:	483b      	ldr	r0, [pc, #236]	@ (8001be4 <MX_GPIO_Init+0x2f4>)
 8001af8:	f001 f848 	bl	8002b8c <HAL_GPIO_Init>

	/*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
	 D8_Pin D9_Pin D10_Pin D11_Pin
	 D12_Pin NBL0_Pin NBL1_Pin */
	GPIO_InitStruct.Pin = D4_Pin | D5_Pin | D6_Pin | D7_Pin | D8_Pin | D9_Pin
 8001afc:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001b00:	627b      	str	r3, [r7, #36]	@ 0x24
			| D10_Pin | D11_Pin | D12_Pin | NBL0_Pin | NBL1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b02:	2302      	movs	r3, #2
 8001b04:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b0e:	230c      	movs	r3, #12
 8001b10:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b16:	4619      	mov	r1, r3
 8001b18:	4835      	ldr	r0, [pc, #212]	@ (8001bf0 <MX_GPIO_Init+0x300>)
 8001b1a:	f001 f837 	bl	8002b8c <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
	GPIO_InitStruct.Pin = OTG_HS_ID_Pin | OTG_HS_DM_Pin | OTG_HS_DP_Pin;
 8001b1e:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8001b22:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b24:	2302      	movs	r3, #2
 8001b26:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001b30:	230c      	movs	r3, #12
 8001b32:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b38:	4619      	mov	r1, r3
 8001b3a:	482c      	ldr	r0, [pc, #176]	@ (8001bec <MX_GPIO_Init+0x2fc>)
 8001b3c:	f001 f826 	bl	8002b8c <HAL_GPIO_Init>

	/*Configure GPIO pin : VBUS_HS_Pin */
	GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001b40:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b44:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b46:	2300      	movs	r3, #0
 8001b48:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001b4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b52:	4619      	mov	r1, r3
 8001b54:	4825      	ldr	r0, [pc, #148]	@ (8001bec <MX_GPIO_Init+0x2fc>)
 8001b56:	f001 f819 	bl	8002b8c <HAL_GPIO_Init>

	/*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
	 D1_Pin D2_Pin D3_Pin */
	GPIO_InitStruct.Pin = D13_Pin | D14_Pin | D15_Pin | D0_Pin | D1_Pin | D2_Pin
 8001b5a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001b5e:	627b      	str	r3, [r7, #36]	@ 0x24
			| D3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b60:	2302      	movs	r3, #2
 8001b62:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b6c:	230c      	movs	r3, #12
 8001b6e:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b74:	4619      	mov	r1, r3
 8001b76:	481a      	ldr	r0, [pc, #104]	@ (8001be0 <MX_GPIO_Init+0x2f0>)
 8001b78:	f001 f808 	bl	8002b8c <HAL_GPIO_Init>

	/*Configure GPIO pin : TE_Pin */
	GPIO_InitStruct.Pin = TE_Pin;
 8001b7c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b80:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b82:	2300      	movs	r3, #0
 8001b84:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001b8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4813      	ldr	r0, [pc, #76]	@ (8001be0 <MX_GPIO_Init+0x2f0>)
 8001b92:	f000 fffb 	bl	8002b8c <HAL_GPIO_Init>

	/*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
	GPIO_InitStruct.Pin = RDX_Pin | WRX_DCX_Pin;
 8001b96:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001b9a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ba8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bac:	4619      	mov	r1, r3
 8001bae:	480c      	ldr	r0, [pc, #48]	@ (8001be0 <MX_GPIO_Init+0x2f0>)
 8001bb0:	f000 ffec 	bl	8002b8c <HAL_GPIO_Init>

	/*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
	GPIO_InitStruct.Pin = STLINK_RX_Pin | STLINK_TX_Pin;
 8001bb4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001bb8:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bc6:	2307      	movs	r3, #7
 8001bc8:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bce:	4619      	mov	r1, r3
 8001bd0:	e010      	b.n	8001bf4 <MX_GPIO_Init+0x304>
 8001bd2:	bf00      	nop
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	40020800 	.word	0x40020800
 8001bdc:	40020000 	.word	0x40020000
 8001be0:	40020c00 	.word	0x40020c00
 8001be4:	40021800 	.word	0x40021800
 8001be8:	40021400 	.word	0x40021400
 8001bec:	40020400 	.word	0x40020400
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	4812      	ldr	r0, [pc, #72]	@ (8001c40 <MX_GPIO_Init+0x350>)
 8001bf6:	f000 ffc9 	bl	8002b8c <HAL_GPIO_Init>

	/*Configure GPIO pins : LD3_Pin LD4_Pin */
	GPIO_InitStruct.Pin = LD3_Pin | LD4_Pin;
 8001bfa:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001bfe:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c00:	2301      	movs	r3, #1
 8001c02:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c10:	4619      	mov	r1, r3
 8001c12:	480c      	ldr	r0, [pc, #48]	@ (8001c44 <MX_GPIO_Init+0x354>)
 8001c14:	f000 ffba 	bl	8002b8c <HAL_GPIO_Init>

	/*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
	GPIO_InitStruct.Pin = SDCKE1_Pin | SDNE1_Pin;
 8001c18:	2360      	movs	r3, #96	@ 0x60
 8001c1a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c24:	2303      	movs	r3, #3
 8001c26:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c28:	230c      	movs	r3, #12
 8001c2a:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c30:	4619      	mov	r1, r3
 8001c32:	4805      	ldr	r0, [pc, #20]	@ (8001c48 <MX_GPIO_Init+0x358>)
 8001c34:	f000 ffaa 	bl	8002b8c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001c38:	bf00      	nop
 8001c3a:	3738      	adds	r7, #56	@ 0x38
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40020000 	.word	0x40020000
 8001c44:	40021800 	.word	0x40021800
 8001c48:	40020400 	.word	0x40020400

08001c4c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001c50:	b672      	cpsid	i
}
 8001c52:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001c54:	bf00      	nop
 8001c56:	e7fd      	b.n	8001c54 <Error_Handler+0x8>

08001c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	607b      	str	r3, [r7, #4]
 8001c62:	4b10      	ldr	r3, [pc, #64]	@ (8001ca4 <HAL_MspInit+0x4c>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c66:	4a0f      	ldr	r2, [pc, #60]	@ (8001ca4 <HAL_MspInit+0x4c>)
 8001c68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ca4 <HAL_MspInit+0x4c>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c76:	607b      	str	r3, [r7, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	603b      	str	r3, [r7, #0]
 8001c7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ca4 <HAL_MspInit+0x4c>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c82:	4a08      	ldr	r2, [pc, #32]	@ (8001ca4 <HAL_MspInit+0x4c>)
 8001c84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <HAL_MspInit+0x4c>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c92:	603b      	str	r3, [r7, #0]
 8001c94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c96:	2007      	movs	r0, #7
 8001c98:	f000 ff44 	bl	8002b24 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c9c:	bf00      	nop
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40023800 	.word	0x40023800

08001ca8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08a      	sub	sp, #40	@ 0x28
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb0:	f107 0314 	add.w	r3, r7, #20
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
 8001cbe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a29      	ldr	r2, [pc, #164]	@ (8001d6c <HAL_I2C_MspInit+0xc4>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d14b      	bne.n	8001d62 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	613b      	str	r3, [r7, #16]
 8001cce:	4b28      	ldr	r3, [pc, #160]	@ (8001d70 <HAL_I2C_MspInit+0xc8>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd2:	4a27      	ldr	r2, [pc, #156]	@ (8001d70 <HAL_I2C_MspInit+0xc8>)
 8001cd4:	f043 0304 	orr.w	r3, r3, #4
 8001cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cda:	4b25      	ldr	r3, [pc, #148]	@ (8001d70 <HAL_I2C_MspInit+0xc8>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	4b21      	ldr	r3, [pc, #132]	@ (8001d70 <HAL_I2C_MspInit+0xc8>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cee:	4a20      	ldr	r2, [pc, #128]	@ (8001d70 <HAL_I2C_MspInit+0xc8>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d70 <HAL_I2C_MspInit+0xc8>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001d02:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d08:	2312      	movs	r3, #18
 8001d0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d10:	2300      	movs	r3, #0
 8001d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d14:	2304      	movs	r3, #4
 8001d16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001d18:	f107 0314 	add.w	r3, r7, #20
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4815      	ldr	r0, [pc, #84]	@ (8001d74 <HAL_I2C_MspInit+0xcc>)
 8001d20:	f000 ff34 	bl	8002b8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001d24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d2a:	2312      	movs	r3, #18
 8001d2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d32:	2300      	movs	r3, #0
 8001d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d36:	2304      	movs	r3, #4
 8001d38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001d3a:	f107 0314 	add.w	r3, r7, #20
 8001d3e:	4619      	mov	r1, r3
 8001d40:	480d      	ldr	r0, [pc, #52]	@ (8001d78 <HAL_I2C_MspInit+0xd0>)
 8001d42:	f000 ff23 	bl	8002b8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	4b09      	ldr	r3, [pc, #36]	@ (8001d70 <HAL_I2C_MspInit+0xc8>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4e:	4a08      	ldr	r2, [pc, #32]	@ (8001d70 <HAL_I2C_MspInit+0xc8>)
 8001d50:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001d54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d56:	4b06      	ldr	r3, [pc, #24]	@ (8001d70 <HAL_I2C_MspInit+0xc8>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d5e:	60bb      	str	r3, [r7, #8]
 8001d60:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001d62:	bf00      	nop
 8001d64:	3728      	adds	r7, #40	@ 0x28
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40005c00 	.word	0x40005c00
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40020800 	.word	0x40020800
 8001d78:	40020000 	.word	0x40020000

08001d7c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b09a      	sub	sp, #104	@ 0x68
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d84:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d98:	2230      	movs	r2, #48	@ 0x30
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f004 f933 	bl	8006008 <memset>
  if(hltdc->Instance==LTDC)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a81      	ldr	r2, [pc, #516]	@ (8001fac <HAL_LTDC_MspInit+0x230>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	f040 80fb 	bne.w	8001fa4 <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001dae:	2308      	movs	r3, #8
 8001db0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 8001db2:	23c8      	movs	r3, #200	@ 0xc8
 8001db4:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001db6:	2302      	movs	r3, #2
 8001db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 8001dba:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001dbe:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f003 f97d 	bl	80050c4 <HAL_RCCEx_PeriphCLKConfig>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8001dd0:	f7ff ff3c 	bl	8001c4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	623b      	str	r3, [r7, #32]
 8001dd8:	4b75      	ldr	r3, [pc, #468]	@ (8001fb0 <HAL_LTDC_MspInit+0x234>)
 8001dda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ddc:	4a74      	ldr	r2, [pc, #464]	@ (8001fb0 <HAL_LTDC_MspInit+0x234>)
 8001dde:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001de2:	6453      	str	r3, [r2, #68]	@ 0x44
 8001de4:	4b72      	ldr	r3, [pc, #456]	@ (8001fb0 <HAL_LTDC_MspInit+0x234>)
 8001de6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001dec:	623b      	str	r3, [r7, #32]
 8001dee:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001df0:	2300      	movs	r3, #0
 8001df2:	61fb      	str	r3, [r7, #28]
 8001df4:	4b6e      	ldr	r3, [pc, #440]	@ (8001fb0 <HAL_LTDC_MspInit+0x234>)
 8001df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df8:	4a6d      	ldr	r2, [pc, #436]	@ (8001fb0 <HAL_LTDC_MspInit+0x234>)
 8001dfa:	f043 0320 	orr.w	r3, r3, #32
 8001dfe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e00:	4b6b      	ldr	r3, [pc, #428]	@ (8001fb0 <HAL_LTDC_MspInit+0x234>)
 8001e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e04:	f003 0320 	and.w	r3, r3, #32
 8001e08:	61fb      	str	r3, [r7, #28]
 8001e0a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61bb      	str	r3, [r7, #24]
 8001e10:	4b67      	ldr	r3, [pc, #412]	@ (8001fb0 <HAL_LTDC_MspInit+0x234>)
 8001e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e14:	4a66      	ldr	r2, [pc, #408]	@ (8001fb0 <HAL_LTDC_MspInit+0x234>)
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e1c:	4b64      	ldr	r3, [pc, #400]	@ (8001fb0 <HAL_LTDC_MspInit+0x234>)
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	61bb      	str	r3, [r7, #24]
 8001e26:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]
 8001e2c:	4b60      	ldr	r3, [pc, #384]	@ (8001fb0 <HAL_LTDC_MspInit+0x234>)
 8001e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e30:	4a5f      	ldr	r2, [pc, #380]	@ (8001fb0 <HAL_LTDC_MspInit+0x234>)
 8001e32:	f043 0302 	orr.w	r3, r3, #2
 8001e36:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e38:	4b5d      	ldr	r3, [pc, #372]	@ (8001fb0 <HAL_LTDC_MspInit+0x234>)
 8001e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	617b      	str	r3, [r7, #20]
 8001e42:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e44:	2300      	movs	r3, #0
 8001e46:	613b      	str	r3, [r7, #16]
 8001e48:	4b59      	ldr	r3, [pc, #356]	@ (8001fb0 <HAL_LTDC_MspInit+0x234>)
 8001e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4c:	4a58      	ldr	r2, [pc, #352]	@ (8001fb0 <HAL_LTDC_MspInit+0x234>)
 8001e4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e52:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e54:	4b56      	ldr	r3, [pc, #344]	@ (8001fb0 <HAL_LTDC_MspInit+0x234>)
 8001e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e5c:	613b      	str	r3, [r7, #16]
 8001e5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e60:	2300      	movs	r3, #0
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	4b52      	ldr	r3, [pc, #328]	@ (8001fb0 <HAL_LTDC_MspInit+0x234>)
 8001e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e68:	4a51      	ldr	r2, [pc, #324]	@ (8001fb0 <HAL_LTDC_MspInit+0x234>)
 8001e6a:	f043 0304 	orr.w	r3, r3, #4
 8001e6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e70:	4b4f      	ldr	r3, [pc, #316]	@ (8001fb0 <HAL_LTDC_MspInit+0x234>)
 8001e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60bb      	str	r3, [r7, #8]
 8001e80:	4b4b      	ldr	r3, [pc, #300]	@ (8001fb0 <HAL_LTDC_MspInit+0x234>)
 8001e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e84:	4a4a      	ldr	r2, [pc, #296]	@ (8001fb0 <HAL_LTDC_MspInit+0x234>)
 8001e86:	f043 0308 	orr.w	r3, r3, #8
 8001e8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e8c:	4b48      	ldr	r3, [pc, #288]	@ (8001fb0 <HAL_LTDC_MspInit+0x234>)
 8001e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e90:	f003 0308 	and.w	r3, r3, #8
 8001e94:	60bb      	str	r3, [r7, #8]
 8001e96:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001e98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e9c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001eaa:	230e      	movs	r3, #14
 8001eac:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001eae:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	483f      	ldr	r0, [pc, #252]	@ (8001fb4 <HAL_LTDC_MspInit+0x238>)
 8001eb6:	f000 fe69 	bl	8002b8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001eba:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001ebe:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ecc:	230e      	movs	r3, #14
 8001ece:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4838      	ldr	r0, [pc, #224]	@ (8001fb8 <HAL_LTDC_MspInit+0x23c>)
 8001ed8:	f000 fe58 	bl	8002b8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001edc:	2303      	movs	r3, #3
 8001ede:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001eec:	2309      	movs	r3, #9
 8001eee:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4831      	ldr	r0, [pc, #196]	@ (8001fbc <HAL_LTDC_MspInit+0x240>)
 8001ef8:	f000 fe48 	bl	8002b8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001efc:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001f00:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f02:	2302      	movs	r3, #2
 8001f04:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f0e:	230e      	movs	r3, #14
 8001f10:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f12:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f16:	4619      	mov	r1, r3
 8001f18:	4828      	ldr	r0, [pc, #160]	@ (8001fbc <HAL_LTDC_MspInit+0x240>)
 8001f1a:	f000 fe37 	bl	8002b8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001f1e:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001f22:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f24:	2302      	movs	r3, #2
 8001f26:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f30:	230e      	movs	r3, #14
 8001f32:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f34:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4821      	ldr	r0, [pc, #132]	@ (8001fc0 <HAL_LTDC_MspInit+0x244>)
 8001f3c:	f000 fe26 	bl	8002b8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001f40:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001f44:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f46:	2302      	movs	r3, #2
 8001f48:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f52:	230e      	movs	r3, #14
 8001f54:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f56:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4819      	ldr	r0, [pc, #100]	@ (8001fc4 <HAL_LTDC_MspInit+0x248>)
 8001f5e:	f000 fe15 	bl	8002b8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001f62:	2348      	movs	r3, #72	@ 0x48
 8001f64:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f66:	2302      	movs	r3, #2
 8001f68:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f72:	230e      	movs	r3, #14
 8001f74:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f76:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4812      	ldr	r0, [pc, #72]	@ (8001fc8 <HAL_LTDC_MspInit+0x24c>)
 8001f7e:	f000 fe05 	bl	8002b8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001f82:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001f86:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f90:	2300      	movs	r3, #0
 8001f92:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001f94:	2309      	movs	r3, #9
 8001f96:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f98:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4808      	ldr	r0, [pc, #32]	@ (8001fc0 <HAL_LTDC_MspInit+0x244>)
 8001fa0:	f000 fdf4 	bl	8002b8c <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001fa4:	bf00      	nop
 8001fa6:	3768      	adds	r7, #104	@ 0x68
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40016800 	.word	0x40016800
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	40021400 	.word	0x40021400
 8001fb8:	40020000 	.word	0x40020000
 8001fbc:	40020400 	.word	0x40020400
 8001fc0:	40021800 	.word	0x40021800
 8001fc4:	40020800 	.word	0x40020800
 8001fc8:	40020c00 	.word	0x40020c00

08001fcc <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a0b      	ldr	r2, [pc, #44]	@ (8002008 <HAL_RNG_MspInit+0x3c>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d10d      	bne.n	8001ffa <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800200c <HAL_RNG_MspInit+0x40>)
 8001fe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fe6:	4a09      	ldr	r2, [pc, #36]	@ (800200c <HAL_RNG_MspInit+0x40>)
 8001fe8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001fec:	6353      	str	r3, [r2, #52]	@ 0x34
 8001fee:	4b07      	ldr	r3, [pc, #28]	@ (800200c <HAL_RNG_MspInit+0x40>)
 8001ff0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8001ffa:	bf00      	nop
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	50060800 	.word	0x50060800
 800200c:	40023800 	.word	0x40023800

08002010 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b08a      	sub	sp, #40	@ 0x28
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002018:	f107 0314 	add.w	r3, r7, #20
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a19      	ldr	r2, [pc, #100]	@ (8002094 <HAL_SPI_MspInit+0x84>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d12c      	bne.n	800208c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	613b      	str	r3, [r7, #16]
 8002036:	4b18      	ldr	r3, [pc, #96]	@ (8002098 <HAL_SPI_MspInit+0x88>)
 8002038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800203a:	4a17      	ldr	r2, [pc, #92]	@ (8002098 <HAL_SPI_MspInit+0x88>)
 800203c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002040:	6453      	str	r3, [r2, #68]	@ 0x44
 8002042:	4b15      	ldr	r3, [pc, #84]	@ (8002098 <HAL_SPI_MspInit+0x88>)
 8002044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002046:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800204a:	613b      	str	r3, [r7, #16]
 800204c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	4b11      	ldr	r3, [pc, #68]	@ (8002098 <HAL_SPI_MspInit+0x88>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002056:	4a10      	ldr	r2, [pc, #64]	@ (8002098 <HAL_SPI_MspInit+0x88>)
 8002058:	f043 0320 	orr.w	r3, r3, #32
 800205c:	6313      	str	r3, [r2, #48]	@ 0x30
 800205e:	4b0e      	ldr	r3, [pc, #56]	@ (8002098 <HAL_SPI_MspInit+0x88>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002062:	f003 0320 	and.w	r3, r3, #32
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800206a:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800206e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002070:	2302      	movs	r3, #2
 8002072:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002078:	2300      	movs	r3, #0
 800207a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800207c:	2305      	movs	r3, #5
 800207e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002080:	f107 0314 	add.w	r3, r7, #20
 8002084:	4619      	mov	r1, r3
 8002086:	4805      	ldr	r0, [pc, #20]	@ (800209c <HAL_SPI_MspInit+0x8c>)
 8002088:	f000 fd80 	bl	8002b8c <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 800208c:	bf00      	nop
 800208e:	3728      	adds	r7, #40	@ 0x28
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40015000 	.word	0x40015000
 8002098:	40023800 	.word	0x40023800
 800209c:	40021400 	.word	0x40021400

080020a0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a08      	ldr	r2, [pc, #32]	@ (80020d0 <HAL_SPI_MspDeInit+0x30>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d10a      	bne.n	80020c8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80020b2:	4b08      	ldr	r3, [pc, #32]	@ (80020d4 <HAL_SPI_MspDeInit+0x34>)
 80020b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020b6:	4a07      	ldr	r2, [pc, #28]	@ (80020d4 <HAL_SPI_MspDeInit+0x34>)
 80020b8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80020bc:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80020be:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80020c2:	4805      	ldr	r0, [pc, #20]	@ (80020d8 <HAL_SPI_MspDeInit+0x38>)
 80020c4:	f000 ff0e 	bl	8002ee4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80020c8:	bf00      	nop
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40015000 	.word	0x40015000
 80020d4:	40023800 	.word	0x40023800
 80020d8:	40021400 	.word	0x40021400

080020dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020ec:	d10d      	bne.n	800210a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	4b09      	ldr	r3, [pc, #36]	@ (8002118 <HAL_TIM_Base_MspInit+0x3c>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f6:	4a08      	ldr	r2, [pc, #32]	@ (8002118 <HAL_TIM_Base_MspInit+0x3c>)
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80020fe:	4b06      	ldr	r3, [pc, #24]	@ (8002118 <HAL_TIM_Base_MspInit+0x3c>)
 8002100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800210a:	bf00      	nop
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40023800 	.word	0x40023800

0800211c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002120:	bf00      	nop
 8002122:	e7fd      	b.n	8002120 <NMI_Handler+0x4>

08002124 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002128:	bf00      	nop
 800212a:	e7fd      	b.n	8002128 <HardFault_Handler+0x4>

0800212c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002130:	bf00      	nop
 8002132:	e7fd      	b.n	8002130 <MemManage_Handler+0x4>

08002134 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002138:	bf00      	nop
 800213a:	e7fd      	b.n	8002138 <BusFault_Handler+0x4>

0800213c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002140:	bf00      	nop
 8002142:	e7fd      	b.n	8002140 <UsageFault_Handler+0x4>

08002144 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002148:	bf00      	nop
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002152:	b480      	push	{r7}
 8002154:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002164:	bf00      	nop
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002172:	f000 fbe1 	bl	8002938 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}

0800217a <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b082      	sub	sp, #8
 800217e:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8002180:	f000 f9ce 	bl	8002520 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8002184:	f000 f98e 	bl	80024a4 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002188:	2202      	movs	r2, #2
 800218a:	2103      	movs	r1, #3
 800218c:	2082      	movs	r0, #130	@ 0x82
 800218e:	f000 fa1b 	bl	80025c8 <I2C3_Write>
    HAL_Delay(5);
 8002192:	2005      	movs	r0, #5
 8002194:	f000 fbf0 	bl	8002978 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002198:	2200      	movs	r2, #0
 800219a:	2103      	movs	r1, #3
 800219c:	2082      	movs	r0, #130	@ 0x82
 800219e:	f000 fa13 	bl	80025c8 <I2C3_Write>
    HAL_Delay(2);
 80021a2:	2002      	movs	r0, #2
 80021a4:	f000 fbe8 	bl	8002978 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 80021a8:	1cba      	adds	r2, r7, #2
 80021aa:	2302      	movs	r3, #2
 80021ac:	2100      	movs	r1, #0
 80021ae:	2082      	movs	r0, #130	@ 0x82
 80021b0:	f000 fa5a 	bl	8002668 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 80021b4:	887b      	ldrh	r3, [r7, #2]
 80021b6:	021b      	lsls	r3, r3, #8
 80021b8:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 80021ba:	887b      	ldrh	r3, [r7, #2]
 80021bc:	0a1b      	lsrs	r3, r3, #8
 80021be:	b29a      	uxth	r2, r3
 80021c0:	88fb      	ldrh	r3, [r7, #6]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 80021c6:	88fb      	ldrh	r3, [r7, #6]
 80021c8:	f640 0211 	movw	r2, #2065	@ 0x811
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d001      	beq.n	80021d4 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e075      	b.n	80022c0 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 80021d4:	2202      	movs	r2, #2
 80021d6:	2103      	movs	r1, #3
 80021d8:	2082      	movs	r0, #130	@ 0x82
 80021da:	f000 f9f5 	bl	80025c8 <I2C3_Write>
    HAL_Delay(5);
 80021de:	2005      	movs	r0, #5
 80021e0:	f000 fbca 	bl	8002978 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 80021e4:	2200      	movs	r2, #0
 80021e6:	2103      	movs	r1, #3
 80021e8:	2082      	movs	r0, #130	@ 0x82
 80021ea:	f000 f9ed 	bl	80025c8 <I2C3_Write>
    HAL_Delay(2);
 80021ee:	2002      	movs	r0, #2
 80021f0:	f000 fbc2 	bl	8002978 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 80021f4:	2004      	movs	r0, #4
 80021f6:	f000 f867 	bl	80022c8 <STMPE811_Read>
 80021fa:	4603      	mov	r3, r0
 80021fc:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 80021fe:	797b      	ldrb	r3, [r7, #5]
 8002200:	f023 0301 	bic.w	r3, r3, #1
 8002204:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002206:	797b      	ldrb	r3, [r7, #5]
 8002208:	461a      	mov	r2, r3
 800220a:	2104      	movs	r1, #4
 800220c:	2082      	movs	r0, #130	@ 0x82
 800220e:	f000 f9db 	bl	80025c8 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002212:	2004      	movs	r0, #4
 8002214:	f000 f858 	bl	80022c8 <STMPE811_Read>
 8002218:	4603      	mov	r3, r0
 800221a:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 800221c:	797b      	ldrb	r3, [r7, #5]
 800221e:	f023 0302 	bic.w	r3, r3, #2
 8002222:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002224:	797b      	ldrb	r3, [r7, #5]
 8002226:	461a      	mov	r2, r3
 8002228:	2104      	movs	r1, #4
 800222a:	2082      	movs	r0, #130	@ 0x82
 800222c:	f000 f9cc 	bl	80025c8 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8002230:	2249      	movs	r2, #73	@ 0x49
 8002232:	2120      	movs	r1, #32
 8002234:	2082      	movs	r0, #130	@ 0x82
 8002236:	f000 f9c7 	bl	80025c8 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 800223a:	2002      	movs	r0, #2
 800223c:	f000 fb9c 	bl	8002978 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8002240:	2201      	movs	r2, #1
 8002242:	2121      	movs	r1, #33	@ 0x21
 8002244:	2082      	movs	r0, #130	@ 0x82
 8002246:	f000 f9bf 	bl	80025c8 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 800224a:	2017      	movs	r0, #23
 800224c:	f000 f83c 	bl	80022c8 <STMPE811_Read>
 8002250:	4603      	mov	r3, r0
 8002252:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8002254:	797b      	ldrb	r3, [r7, #5]
 8002256:	f043 031e 	orr.w	r3, r3, #30
 800225a:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 800225c:	797b      	ldrb	r3, [r7, #5]
 800225e:	461a      	mov	r2, r3
 8002260:	2117      	movs	r1, #23
 8002262:	2082      	movs	r0, #130	@ 0x82
 8002264:	f000 f9b0 	bl	80025c8 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8002268:	229a      	movs	r2, #154	@ 0x9a
 800226a:	2141      	movs	r1, #65	@ 0x41
 800226c:	2082      	movs	r0, #130	@ 0x82
 800226e:	f000 f9ab 	bl	80025c8 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8002272:	2201      	movs	r2, #1
 8002274:	214a      	movs	r1, #74	@ 0x4a
 8002276:	2082      	movs	r0, #130	@ 0x82
 8002278:	f000 f9a6 	bl	80025c8 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800227c:	2201      	movs	r2, #1
 800227e:	214b      	movs	r1, #75	@ 0x4b
 8002280:	2082      	movs	r0, #130	@ 0x82
 8002282:	f000 f9a1 	bl	80025c8 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002286:	2200      	movs	r2, #0
 8002288:	214b      	movs	r1, #75	@ 0x4b
 800228a:	2082      	movs	r0, #130	@ 0x82
 800228c:	f000 f99c 	bl	80025c8 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8002290:	2201      	movs	r2, #1
 8002292:	2156      	movs	r1, #86	@ 0x56
 8002294:	2082      	movs	r0, #130	@ 0x82
 8002296:	f000 f997 	bl	80025c8 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 800229a:	2201      	movs	r2, #1
 800229c:	2158      	movs	r1, #88	@ 0x58
 800229e:	2082      	movs	r0, #130	@ 0x82
 80022a0:	f000 f992 	bl	80025c8 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 80022a4:	2203      	movs	r2, #3
 80022a6:	2140      	movs	r1, #64	@ 0x40
 80022a8:	2082      	movs	r0, #130	@ 0x82
 80022aa:	f000 f98d 	bl	80025c8 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 80022ae:	22ff      	movs	r2, #255	@ 0xff
 80022b0:	210b      	movs	r1, #11
 80022b2:	2082      	movs	r0, #130	@ 0x82
 80022b4:	f000 f988 	bl	80025c8 <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 80022b8:	20c8      	movs	r0, #200	@ 0xc8
 80022ba:	f000 fb5d 	bl	8002978 <HAL_Delay>

    return STMPE811_State_Ok;
 80022be:	2302      	movs	r3, #2

}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 80022d2:	f107 020f 	add.w	r2, r7, #15
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	4619      	mov	r1, r3
 80022da:	2082      	movs	r0, #130	@ 0x82
 80022dc:	f000 f99e 	bl	800261c <I2C3_Read>

    return readData;
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b084      	sub	sp, #16
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	791a      	ldrb	r2, [r3, #4]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 80022fa:	2040      	movs	r0, #64	@ 0x40
 80022fc:	f7ff ffe4 	bl	80022c8 <STMPE811_Read>
 8002300:	4603      	mov	r3, r0
 8002302:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 8002304:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002308:	2b00      	cmp	r3, #0
 800230a:	db0e      	blt.n	800232a <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002312:	2201      	movs	r2, #1
 8002314:	214b      	movs	r1, #75	@ 0x4b
 8002316:	2082      	movs	r0, #130	@ 0x82
 8002318:	f000 f956 	bl	80025c8 <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 800231c:	2200      	movs	r2, #0
 800231e:	214b      	movs	r1, #75	@ 0x4b
 8002320:	2082      	movs	r0, #130	@ 0x82
 8002322:	f000 f951 	bl	80025c8 <I2C3_Write>

        return STMPE811_State_Released;
 8002326:	2301      	movs	r3, #1
 8002328:	e0a7      	b.n	800247a <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	799b      	ldrb	r3, [r3, #6]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d117      	bne.n	8002362 <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f000 f9b8 	bl	80026ac <TM_STMPE811_ReadX>
 800233c:	4603      	mov	r3, r0
 800233e:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002342:	b29a      	uxth	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	885b      	ldrh	r3, [r3, #2]
 800234c:	4618      	mov	r0, r3
 800234e:	f000 fa0b 	bl	8002768 <TM_STMPE811_ReadY>
 8002352:	4603      	mov	r3, r0
 8002354:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002358:	3301      	adds	r3, #1
 800235a:	b29a      	uxth	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	805a      	strh	r2, [r3, #2]
 8002360:	e048      	b.n	80023f4 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	799b      	ldrb	r3, [r3, #6]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d112      	bne.n	8002390 <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	881b      	ldrh	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f000 f99c 	bl	80026ac <TM_STMPE811_ReadX>
 8002374:	4603      	mov	r3, r0
 8002376:	461a      	mov	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	885b      	ldrh	r3, [r3, #2]
 8002380:	4618      	mov	r0, r3
 8002382:	f000 f9f1 	bl	8002768 <TM_STMPE811_ReadY>
 8002386:	4603      	mov	r3, r0
 8002388:	461a      	mov	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	805a      	strh	r2, [r3, #2]
 800238e:	e031      	b.n	80023f4 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	799b      	ldrb	r3, [r3, #6]
 8002394:	2b02      	cmp	r3, #2
 8002396:	d115      	bne.n	80023c4 <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	885b      	ldrh	r3, [r3, #2]
 800239c:	4618      	mov	r0, r3
 800239e:	f000 f985 	bl	80026ac <TM_STMPE811_ReadX>
 80023a2:	4603      	mov	r3, r0
 80023a4:	461a      	mov	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 f9da 	bl	8002768 <TM_STMPE811_ReadY>
 80023b4:	4603      	mov	r3, r0
 80023b6:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80023ba:	3301      	adds	r3, #1
 80023bc:	b29a      	uxth	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	801a      	strh	r2, [r3, #0]
 80023c2:	e017      	b.n	80023f4 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	799b      	ldrb	r3, [r3, #6]
 80023c8:	2b03      	cmp	r3, #3
 80023ca:	d113      	bne.n	80023f4 <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	881b      	ldrh	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f000 f96b 	bl	80026ac <TM_STMPE811_ReadX>
 80023d6:	4603      	mov	r3, r0
 80023d8:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80023dc:	b29a      	uxth	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	881b      	ldrh	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 f9be 	bl	8002768 <TM_STMPE811_ReadY>
 80023ec:	4603      	mov	r3, r0
 80023ee:	461a      	mov	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80023f4:	2201      	movs	r2, #1
 80023f6:	214b      	movs	r1, #75	@ 0x4b
 80023f8:	2082      	movs	r0, #130	@ 0x82
 80023fa:	f000 f8e5 	bl	80025c8 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80023fe:	2200      	movs	r2, #0
 8002400:	214b      	movs	r1, #75	@ 0x4b
 8002402:	2082      	movs	r0, #130	@ 0x82
 8002404:	f000 f8e0 	bl	80025c8 <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	799b      	ldrb	r3, [r3, #6]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d003      	beq.n	8002418 <STMPE811_ReadTouch+0x12e>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	799b      	ldrb	r3, [r3, #6]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d115      	bne.n	8002444 <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	881b      	ldrh	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d027      	beq.n	8002470 <STMPE811_ReadTouch+0x186>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	881b      	ldrh	r3, [r3, #0]
 8002424:	2bee      	cmp	r3, #238	@ 0xee
 8002426:	d823      	bhi.n	8002470 <STMPE811_ReadTouch+0x186>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	885b      	ldrh	r3, [r3, #2]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d01f      	beq.n	8002470 <STMPE811_ReadTouch+0x186>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	885b      	ldrh	r3, [r3, #2]
 8002434:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8002438:	d81a      	bhi.n	8002470 <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8002440:	2300      	movs	r3, #0
 8002442:	e01a      	b.n	800247a <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d012      	beq.n	8002472 <STMPE811_ReadTouch+0x188>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	881b      	ldrh	r3, [r3, #0]
 8002450:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8002454:	d80d      	bhi.n	8002472 <STMPE811_ReadTouch+0x188>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	885b      	ldrh	r3, [r3, #2]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d009      	beq.n	8002472 <STMPE811_ReadTouch+0x188>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	885b      	ldrh	r3, [r3, #2]
 8002462:	2bee      	cmp	r3, #238	@ 0xee
 8002464:	d805      	bhi.n	8002472 <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 800246c:	2300      	movs	r3, #0
 800246e:	e004      	b.n	800247a <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002470:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2201      	movs	r2, #1
 8002476:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 8002478:	2301      	movs	r3, #1
}
 800247a:	4618      	mov	r0, r3
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8002488:	4b05      	ldr	r3, [pc, #20]	@ (80024a0 <verifyHAL_I2C_IS_OKAY+0x1c>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8002490:	bf00      	nop
 8002492:	e7fd      	b.n	8002490 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8002494:	bf00      	nop
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	20025bac 	.word	0x20025bac

080024a4 <I2C3_Init>:

static void I2C3_Init()
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	603b      	str	r3, [r7, #0]
 80024ae:	4b18      	ldr	r3, [pc, #96]	@ (8002510 <I2C3_Init+0x6c>)
 80024b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b2:	4a17      	ldr	r2, [pc, #92]	@ (8002510 <I2C3_Init+0x6c>)
 80024b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80024b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80024ba:	4b15      	ldr	r3, [pc, #84]	@ (8002510 <I2C3_Init+0x6c>)
 80024bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80024c2:	603b      	str	r3, [r7, #0]
 80024c4:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 80024c6:	4b13      	ldr	r3, [pc, #76]	@ (8002514 <I2C3_Init+0x70>)
 80024c8:	4a13      	ldr	r2, [pc, #76]	@ (8002518 <I2C3_Init+0x74>)
 80024ca:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 80024cc:	4b11      	ldr	r3, [pc, #68]	@ (8002514 <I2C3_Init+0x70>)
 80024ce:	4a13      	ldr	r2, [pc, #76]	@ (800251c <I2C3_Init+0x78>)
 80024d0:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024d2:	4b10      	ldr	r3, [pc, #64]	@ (8002514 <I2C3_Init+0x70>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 80024d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002514 <I2C3_Init+0x70>)
 80024da:	2200      	movs	r2, #0
 80024dc:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024de:	4b0d      	ldr	r3, [pc, #52]	@ (8002514 <I2C3_Init+0x70>)
 80024e0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80024e4:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 80024e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002514 <I2C3_Init+0x70>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024ec:	4b09      	ldr	r3, [pc, #36]	@ (8002514 <I2C3_Init+0x70>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 80024f2:	4808      	ldr	r0, [pc, #32]	@ (8002514 <I2C3_Init+0x70>)
 80024f4:	f000 fe1c 	bl	8003130 <HAL_I2C_Init>
 80024f8:	4603      	mov	r3, r0
 80024fa:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8002502:	bf00      	nop
 8002504:	e7fd      	b.n	8002502 <I2C3_Init+0x5e>
    }
    return;
 8002506:	bf00      	nop
}
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40023800 	.word	0x40023800
 8002514:	20025b58 	.word	0x20025b58
 8002518:	40005c00 	.word	0x40005c00
 800251c:	000186a0 	.word	0x000186a0

08002520 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b088      	sub	sp, #32
 8002524:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002526:	f107 030c 	add.w	r3, r7, #12
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	605a      	str	r2, [r3, #4]
 8002530:	609a      	str	r2, [r3, #8]
 8002532:	60da      	str	r2, [r3, #12]
 8002534:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	4b20      	ldr	r3, [pc, #128]	@ (80025bc <I2C3_MspInit+0x9c>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253e:	4a1f      	ldr	r2, [pc, #124]	@ (80025bc <I2C3_MspInit+0x9c>)
 8002540:	f043 0304 	orr.w	r3, r3, #4
 8002544:	6313      	str	r3, [r2, #48]	@ 0x30
 8002546:	4b1d      	ldr	r3, [pc, #116]	@ (80025bc <I2C3_MspInit+0x9c>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	60bb      	str	r3, [r7, #8]
 8002550:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	607b      	str	r3, [r7, #4]
 8002556:	4b19      	ldr	r3, [pc, #100]	@ (80025bc <I2C3_MspInit+0x9c>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255a:	4a18      	ldr	r2, [pc, #96]	@ (80025bc <I2C3_MspInit+0x9c>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	6313      	str	r3, [r2, #48]	@ 0x30
 8002562:	4b16      	ldr	r3, [pc, #88]	@ (80025bc <I2C3_MspInit+0x9c>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	607b      	str	r3, [r7, #4]
 800256c:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800256e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002572:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002574:	2312      	movs	r3, #18
 8002576:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257c:	2300      	movs	r3, #0
 800257e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002580:	2304      	movs	r3, #4
 8002582:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002584:	f107 030c 	add.w	r3, r7, #12
 8002588:	4619      	mov	r1, r3
 800258a:	480d      	ldr	r0, [pc, #52]	@ (80025c0 <I2C3_MspInit+0xa0>)
 800258c:	f000 fafe 	bl	8002b8c <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002590:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002594:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002596:	2312      	movs	r3, #18
 8002598:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259a:	2300      	movs	r3, #0
 800259c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259e:	2300      	movs	r3, #0
 80025a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80025a2:	2304      	movs	r3, #4
 80025a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80025a6:	f107 030c 	add.w	r3, r7, #12
 80025aa:	4619      	mov	r1, r3
 80025ac:	4805      	ldr	r0, [pc, #20]	@ (80025c4 <I2C3_MspInit+0xa4>)
 80025ae:	f000 faed 	bl	8002b8c <HAL_GPIO_Init>
    
}
 80025b2:	bf00      	nop
 80025b4:	3720      	adds	r7, #32
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40023800 	.word	0x40023800
 80025c0:	40020800 	.word	0x40020800
 80025c4:	40020000 	.word	0x40020000

080025c8 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b088      	sub	sp, #32
 80025cc:	af04      	add	r7, sp, #16
 80025ce:	4603      	mov	r3, r0
 80025d0:	80fb      	strh	r3, [r7, #6]
 80025d2:	460b      	mov	r3, r1
 80025d4:	717b      	strb	r3, [r7, #5]
 80025d6:	4613      	mov	r3, r2
 80025d8:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 80025da:	793b      	ldrb	r3, [r7, #4]
 80025dc:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80025de:	797b      	ldrb	r3, [r7, #5]
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	88f9      	ldrh	r1, [r7, #6]
 80025e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002610 <I2C3_Write+0x48>)
 80025e6:	9302      	str	r3, [sp, #8]
 80025e8:	2301      	movs	r3, #1
 80025ea:	9301      	str	r3, [sp, #4]
 80025ec:	f107 030f 	add.w	r3, r7, #15
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	2301      	movs	r3, #1
 80025f4:	4807      	ldr	r0, [pc, #28]	@ (8002614 <I2C3_Write+0x4c>)
 80025f6:	f000 fedf 	bl	80033b8 <HAL_I2C_Mem_Write>
 80025fa:	4603      	mov	r3, r0
 80025fc:	461a      	mov	r2, r3
 80025fe:	4b06      	ldr	r3, [pc, #24]	@ (8002618 <I2C3_Write+0x50>)
 8002600:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002602:	f7ff ff3f 	bl	8002484 <verifyHAL_I2C_IS_OKAY>
}
 8002606:	bf00      	nop
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	0003d090 	.word	0x0003d090
 8002614:	20025b58 	.word	0x20025b58
 8002618:	20025bac 	.word	0x20025bac

0800261c <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af04      	add	r7, sp, #16
 8002622:	4603      	mov	r3, r0
 8002624:	603a      	str	r2, [r7, #0]
 8002626:	71fb      	strb	r3, [r7, #7]
 8002628:	460b      	mov	r3, r1
 800262a:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 800262c:	79fb      	ldrb	r3, [r7, #7]
 800262e:	b299      	uxth	r1, r3
 8002630:	79bb      	ldrb	r3, [r7, #6]
 8002632:	b29a      	uxth	r2, r3
 8002634:	4b09      	ldr	r3, [pc, #36]	@ (800265c <I2C3_Read+0x40>)
 8002636:	9302      	str	r3, [sp, #8]
 8002638:	2301      	movs	r3, #1
 800263a:	9301      	str	r3, [sp, #4]
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	2301      	movs	r3, #1
 8002642:	4807      	ldr	r0, [pc, #28]	@ (8002660 <I2C3_Read+0x44>)
 8002644:	f000 ffb2 	bl	80035ac <HAL_I2C_Mem_Read>
 8002648:	4603      	mov	r3, r0
 800264a:	461a      	mov	r2, r3
 800264c:	4b05      	ldr	r3, [pc, #20]	@ (8002664 <I2C3_Read+0x48>)
 800264e:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002650:	f7ff ff18 	bl	8002484 <verifyHAL_I2C_IS_OKAY>
}
 8002654:	bf00      	nop
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	0003d090 	.word	0x0003d090
 8002660:	20025b58 	.word	0x20025b58
 8002664:	20025bac 	.word	0x20025bac

08002668 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af04      	add	r7, sp, #16
 800266e:	603a      	str	r2, [r7, #0]
 8002670:	461a      	mov	r2, r3
 8002672:	4603      	mov	r3, r0
 8002674:	71fb      	strb	r3, [r7, #7]
 8002676:	460b      	mov	r3, r1
 8002678:	71bb      	strb	r3, [r7, #6]
 800267a:	4613      	mov	r3, r2
 800267c:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 800267e:	79fb      	ldrb	r3, [r7, #7]
 8002680:	b299      	uxth	r1, r3
 8002682:	79bb      	ldrb	r3, [r7, #6]
 8002684:	b29a      	uxth	r2, r3
 8002686:	4b07      	ldr	r3, [pc, #28]	@ (80026a4 <I2C3_MulitByteRead+0x3c>)
 8002688:	9302      	str	r3, [sp, #8]
 800268a:	88bb      	ldrh	r3, [r7, #4]
 800268c:	9301      	str	r3, [sp, #4]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	2301      	movs	r3, #1
 8002694:	4804      	ldr	r0, [pc, #16]	@ (80026a8 <I2C3_MulitByteRead+0x40>)
 8002696:	f000 ff89 	bl	80035ac <HAL_I2C_Mem_Read>
}
 800269a:	bf00      	nop
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	0003d090 	.word	0x0003d090
 80026a8:	20025b58 	.word	0x20025b58

080026ac <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 80026b6:	204d      	movs	r0, #77	@ 0x4d
 80026b8:	f7ff fe06 	bl	80022c8 <STMPE811_Read>
 80026bc:	4603      	mov	r3, r0
 80026be:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 80026c0:	204e      	movs	r0, #78	@ 0x4e
 80026c2:	f7ff fe01 	bl	80022c8 <STMPE811_Read>
 80026c6:	4603      	mov	r3, r0
 80026c8:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 80026ca:	7a7b      	ldrb	r3, [r7, #9]
 80026cc:	021b      	lsls	r3, r3, #8
 80026ce:	b21a      	sxth	r2, r3
 80026d0:	7a3b      	ldrb	r3, [r7, #8]
 80026d2:	b21b      	sxth	r3, r3
 80026d4:	4313      	orrs	r3, r2
 80026d6:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 80026d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026dc:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80026e0:	4293      	cmp	r3, r2
 80026e2:	dc06      	bgt.n	80026f2 <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 80026e4:	89fb      	ldrh	r3, [r7, #14]
 80026e6:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 80026ea:	330c      	adds	r3, #12
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	81fb      	strh	r3, [r7, #14]
 80026f0:	e005      	b.n	80026fe <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 80026f2:	89fb      	ldrh	r3, [r7, #14]
 80026f4:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 80026f8:	3308      	adds	r3, #8
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 80026fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002702:	4a18      	ldr	r2, [pc, #96]	@ (8002764 <TM_STMPE811_ReadX+0xb8>)
 8002704:	fb82 1203 	smull	r1, r2, r2, r3
 8002708:	441a      	add	r2, r3
 800270a:	10d2      	asrs	r2, r2, #3
 800270c:	17db      	asrs	r3, r3, #31
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8002712:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002716:	2bef      	cmp	r3, #239	@ 0xef
 8002718:	dd02      	ble.n	8002720 <TM_STMPE811_ReadX+0x74>
        val = 239;
 800271a:	23ef      	movs	r3, #239	@ 0xef
 800271c:	81fb      	strh	r3, [r7, #14]
 800271e:	e005      	b.n	800272c <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8002720:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002724:	2b00      	cmp	r3, #0
 8002726:	da01      	bge.n	800272c <TM_STMPE811_ReadX+0x80>
        val = 0;
 8002728:	2300      	movs	r3, #0
 800272a:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 800272c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002730:	88fb      	ldrh	r3, [r7, #6]
 8002732:	429a      	cmp	r2, r3
 8002734:	dd05      	ble.n	8002742 <TM_STMPE811_ReadX+0x96>
 8002736:	89fa      	ldrh	r2, [r7, #14]
 8002738:	88fb      	ldrh	r3, [r7, #6]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	b29b      	uxth	r3, r3
 800273e:	b21b      	sxth	r3, r3
 8002740:	e004      	b.n	800274c <TM_STMPE811_ReadX+0xa0>
 8002742:	89fb      	ldrh	r3, [r7, #14]
 8002744:	88fa      	ldrh	r2, [r7, #6]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	b29b      	uxth	r3, r3
 800274a:	b21b      	sxth	r3, r3
 800274c:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 800274e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002752:	2b04      	cmp	r3, #4
 8002754:	dd01      	ble.n	800275a <TM_STMPE811_ReadX+0xae>
        return val;
 8002756:	89fb      	ldrh	r3, [r7, #14]
 8002758:	e000      	b.n	800275c <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 800275a:	88fb      	ldrh	r3, [r7, #6]
}
 800275c:	4618      	mov	r0, r3
 800275e:	3710      	adds	r7, #16
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	88888889 	.word	0x88888889

08002768 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8002772:	204f      	movs	r0, #79	@ 0x4f
 8002774:	f7ff fda8 	bl	80022c8 <STMPE811_Read>
 8002778:	4603      	mov	r3, r0
 800277a:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 800277c:	2050      	movs	r0, #80	@ 0x50
 800277e:	f7ff fda3 	bl	80022c8 <STMPE811_Read>
 8002782:	4603      	mov	r3, r0
 8002784:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002786:	7a7b      	ldrb	r3, [r7, #9]
 8002788:	021b      	lsls	r3, r3, #8
 800278a:	b21a      	sxth	r2, r3
 800278c:	7a3b      	ldrb	r3, [r7, #8]
 800278e:	b21b      	sxth	r3, r3
 8002790:	4313      	orrs	r3, r2
 8002792:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8002794:	89fb      	ldrh	r3, [r7, #14]
 8002796:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800279a:	b29b      	uxth	r3, r3
 800279c:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 800279e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027a2:	4a19      	ldr	r2, [pc, #100]	@ (8002808 <TM_STMPE811_ReadY+0xa0>)
 80027a4:	fb82 1203 	smull	r1, r2, r2, r3
 80027a8:	1052      	asrs	r2, r2, #1
 80027aa:	17db      	asrs	r3, r3, #31
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 80027b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	dc02      	bgt.n	80027be <TM_STMPE811_ReadY+0x56>
        val = 0;
 80027b8:	2300      	movs	r3, #0
 80027ba:	81fb      	strh	r3, [r7, #14]
 80027bc:	e007      	b.n	80027ce <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 80027be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027c2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80027c6:	db02      	blt.n	80027ce <TM_STMPE811_ReadY+0x66>
        val = 319;
 80027c8:	f240 133f 	movw	r3, #319	@ 0x13f
 80027cc:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 80027ce:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80027d2:	88fb      	ldrh	r3, [r7, #6]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	dd05      	ble.n	80027e4 <TM_STMPE811_ReadY+0x7c>
 80027d8:	89fa      	ldrh	r2, [r7, #14]
 80027da:	88fb      	ldrh	r3, [r7, #6]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	b29b      	uxth	r3, r3
 80027e0:	b21b      	sxth	r3, r3
 80027e2:	e004      	b.n	80027ee <TM_STMPE811_ReadY+0x86>
 80027e4:	89fb      	ldrh	r3, [r7, #14]
 80027e6:	88fa      	ldrh	r2, [r7, #6]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	b21b      	sxth	r3, r3
 80027ee:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 80027f0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80027f4:	2b04      	cmp	r3, #4
 80027f6:	dd01      	ble.n	80027fc <TM_STMPE811_ReadY+0x94>
        return val;
 80027f8:	89fb      	ldrh	r3, [r7, #14]
 80027fa:	e000      	b.n	80027fe <TM_STMPE811_ReadY+0x96>
    }
    return y;
 80027fc:	88fb      	ldrh	r3, [r7, #6]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	2e8ba2e9 	.word	0x2e8ba2e9

0800280c <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
}
 8002810:	bf00      	nop
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
	...

0800281c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002820:	4b06      	ldr	r3, [pc, #24]	@ (800283c <SystemInit+0x20>)
 8002822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002826:	4a05      	ldr	r2, [pc, #20]	@ (800283c <SystemInit+0x20>)
 8002828:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800282c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002830:	bf00      	nop
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002840:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002878 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002844:	f7ff ffea 	bl	800281c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002848:	480c      	ldr	r0, [pc, #48]	@ (800287c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800284a:	490d      	ldr	r1, [pc, #52]	@ (8002880 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800284c:	4a0d      	ldr	r2, [pc, #52]	@ (8002884 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800284e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002850:	e002      	b.n	8002858 <LoopCopyDataInit>

08002852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002856:	3304      	adds	r3, #4

08002858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800285a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800285c:	d3f9      	bcc.n	8002852 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800285e:	4a0a      	ldr	r2, [pc, #40]	@ (8002888 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002860:	4c0a      	ldr	r4, [pc, #40]	@ (800288c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002864:	e001      	b.n	800286a <LoopFillZerobss>

08002866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002868:	3204      	adds	r2, #4

0800286a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800286a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800286c:	d3fb      	bcc.n	8002866 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800286e:	f003 fbd3 	bl	8006018 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002872:	f7fe fe1a 	bl	80014aa <main>
  bx  lr    
 8002876:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002878:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800287c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002880:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8002884:	08007270 	.word	0x08007270
  ldr r2, =_sbss
 8002888:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 800288c:	20025bb4 	.word	0x20025bb4

08002890 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002890:	e7fe      	b.n	8002890 <ADC_IRQHandler>
	...

08002894 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002898:	4b0e      	ldr	r3, [pc, #56]	@ (80028d4 <HAL_Init+0x40>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a0d      	ldr	r2, [pc, #52]	@ (80028d4 <HAL_Init+0x40>)
 800289e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028a4:	4b0b      	ldr	r3, [pc, #44]	@ (80028d4 <HAL_Init+0x40>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a0a      	ldr	r2, [pc, #40]	@ (80028d4 <HAL_Init+0x40>)
 80028aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028b0:	4b08      	ldr	r3, [pc, #32]	@ (80028d4 <HAL_Init+0x40>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a07      	ldr	r2, [pc, #28]	@ (80028d4 <HAL_Init+0x40>)
 80028b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028bc:	2003      	movs	r0, #3
 80028be:	f000 f931 	bl	8002b24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028c2:	2000      	movs	r0, #0
 80028c4:	f000 f808 	bl	80028d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028c8:	f7ff f9c6 	bl	8001c58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40023c00 	.word	0x40023c00

080028d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028e0:	4b12      	ldr	r3, [pc, #72]	@ (800292c <HAL_InitTick+0x54>)
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	4b12      	ldr	r3, [pc, #72]	@ (8002930 <HAL_InitTick+0x58>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	4619      	mov	r1, r3
 80028ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80028f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 f93b 	bl	8002b72 <HAL_SYSTICK_Config>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e00e      	b.n	8002924 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b0f      	cmp	r3, #15
 800290a:	d80a      	bhi.n	8002922 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800290c:	2200      	movs	r2, #0
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002914:	f000 f911 	bl	8002b3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002918:	4a06      	ldr	r2, [pc, #24]	@ (8002934 <HAL_InitTick+0x5c>)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800291e:	2300      	movs	r3, #0
 8002920:	e000      	b.n	8002924 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
}
 8002924:	4618      	mov	r0, r3
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	20000010 	.word	0x20000010
 8002930:	20000018 	.word	0x20000018
 8002934:	20000014 	.word	0x20000014

08002938 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800293c:	4b06      	ldr	r3, [pc, #24]	@ (8002958 <HAL_IncTick+0x20>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	461a      	mov	r2, r3
 8002942:	4b06      	ldr	r3, [pc, #24]	@ (800295c <HAL_IncTick+0x24>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4413      	add	r3, r2
 8002948:	4a04      	ldr	r2, [pc, #16]	@ (800295c <HAL_IncTick+0x24>)
 800294a:	6013      	str	r3, [r2, #0]
}
 800294c:	bf00      	nop
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	20000018 	.word	0x20000018
 800295c:	20025bb0 	.word	0x20025bb0

08002960 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  return uwTick;
 8002964:	4b03      	ldr	r3, [pc, #12]	@ (8002974 <HAL_GetTick+0x14>)
 8002966:	681b      	ldr	r3, [r3, #0]
}
 8002968:	4618      	mov	r0, r3
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	20025bb0 	.word	0x20025bb0

08002978 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002980:	f7ff ffee 	bl	8002960 <HAL_GetTick>
 8002984:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002990:	d005      	beq.n	800299e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002992:	4b0a      	ldr	r3, [pc, #40]	@ (80029bc <HAL_Delay+0x44>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	461a      	mov	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4413      	add	r3, r2
 800299c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800299e:	bf00      	nop
 80029a0:	f7ff ffde 	bl	8002960 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d8f7      	bhi.n	80029a0 <HAL_Delay+0x28>
  {
  }
}
 80029b0:	bf00      	nop
 80029b2:	bf00      	nop
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	20000018 	.word	0x20000018

080029c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002a04 <__NVIC_SetPriorityGrouping+0x44>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029dc:	4013      	ands	r3, r2
 80029de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80029ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029f2:	4a04      	ldr	r2, [pc, #16]	@ (8002a04 <__NVIC_SetPriorityGrouping+0x44>)
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	60d3      	str	r3, [r2, #12]
}
 80029f8:	bf00      	nop
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	e000ed00 	.word	0xe000ed00

08002a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a0c:	4b04      	ldr	r3, [pc, #16]	@ (8002a20 <__NVIC_GetPriorityGrouping+0x18>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	0a1b      	lsrs	r3, r3, #8
 8002a12:	f003 0307 	and.w	r3, r3, #7
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	e000ed00 	.word	0xe000ed00

08002a24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	6039      	str	r1, [r7, #0]
 8002a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	db0a      	blt.n	8002a4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	490c      	ldr	r1, [pc, #48]	@ (8002a70 <__NVIC_SetPriority+0x4c>)
 8002a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a42:	0112      	lsls	r2, r2, #4
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	440b      	add	r3, r1
 8002a48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a4c:	e00a      	b.n	8002a64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	4908      	ldr	r1, [pc, #32]	@ (8002a74 <__NVIC_SetPriority+0x50>)
 8002a54:	79fb      	ldrb	r3, [r7, #7]
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	3b04      	subs	r3, #4
 8002a5c:	0112      	lsls	r2, r2, #4
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	440b      	add	r3, r1
 8002a62:	761a      	strb	r2, [r3, #24]
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	e000e100 	.word	0xe000e100
 8002a74:	e000ed00 	.word	0xe000ed00

08002a78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b089      	sub	sp, #36	@ 0x24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	f1c3 0307 	rsb	r3, r3, #7
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	bf28      	it	cs
 8002a96:	2304      	movcs	r3, #4
 8002a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	2b06      	cmp	r3, #6
 8002aa0:	d902      	bls.n	8002aa8 <NVIC_EncodePriority+0x30>
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	3b03      	subs	r3, #3
 8002aa6:	e000      	b.n	8002aaa <NVIC_EncodePriority+0x32>
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	43da      	mvns	r2, r3
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	401a      	ands	r2, r3
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ac0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aca:	43d9      	mvns	r1, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad0:	4313      	orrs	r3, r2
         );
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3724      	adds	r7, #36	@ 0x24
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
	...

08002ae0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3b01      	subs	r3, #1
 8002aec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002af0:	d301      	bcc.n	8002af6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002af2:	2301      	movs	r3, #1
 8002af4:	e00f      	b.n	8002b16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002af6:	4a0a      	ldr	r2, [pc, #40]	@ (8002b20 <SysTick_Config+0x40>)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3b01      	subs	r3, #1
 8002afc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002afe:	210f      	movs	r1, #15
 8002b00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002b04:	f7ff ff8e 	bl	8002a24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b08:	4b05      	ldr	r3, [pc, #20]	@ (8002b20 <SysTick_Config+0x40>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b0e:	4b04      	ldr	r3, [pc, #16]	@ (8002b20 <SysTick_Config+0x40>)
 8002b10:	2207      	movs	r2, #7
 8002b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	e000e010 	.word	0xe000e010

08002b24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7ff ff47 	bl	80029c0 <__NVIC_SetPriorityGrouping>
}
 8002b32:	bf00      	nop
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b086      	sub	sp, #24
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	4603      	mov	r3, r0
 8002b42:	60b9      	str	r1, [r7, #8]
 8002b44:	607a      	str	r2, [r7, #4]
 8002b46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b4c:	f7ff ff5c 	bl	8002a08 <__NVIC_GetPriorityGrouping>
 8002b50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	68b9      	ldr	r1, [r7, #8]
 8002b56:	6978      	ldr	r0, [r7, #20]
 8002b58:	f7ff ff8e 	bl	8002a78 <NVIC_EncodePriority>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b62:	4611      	mov	r1, r2
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff ff5d 	bl	8002a24 <__NVIC_SetPriority>
}
 8002b6a:	bf00      	nop
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b082      	sub	sp, #8
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7ff ffb0 	bl	8002ae0 <SysTick_Config>
 8002b80:	4603      	mov	r3, r0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
	...

08002b8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b089      	sub	sp, #36	@ 0x24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b96:	2300      	movs	r3, #0
 8002b98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61fb      	str	r3, [r7, #28]
 8002ba6:	e177      	b.n	8002e98 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ba8:	2201      	movs	r2, #1
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	f040 8166 	bne.w	8002e92 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d005      	beq.n	8002bde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d130      	bne.n	8002c40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	2203      	movs	r2, #3
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	68da      	ldr	r2, [r3, #12]
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c14:	2201      	movs	r2, #1
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4013      	ands	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	091b      	lsrs	r3, r3, #4
 8002c2a:	f003 0201 	and.w	r2, r3, #1
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 0303 	and.w	r3, r3, #3
 8002c48:	2b03      	cmp	r3, #3
 8002c4a:	d017      	beq.n	8002c7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	2203      	movs	r2, #3
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4013      	ands	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 0303 	and.w	r3, r3, #3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d123      	bne.n	8002cd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	08da      	lsrs	r2, r3, #3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3208      	adds	r2, #8
 8002c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	f003 0307 	and.w	r3, r3, #7
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	220f      	movs	r2, #15
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	691a      	ldr	r2, [r3, #16]
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	08da      	lsrs	r2, r3, #3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	3208      	adds	r2, #8
 8002cca:	69b9      	ldr	r1, [r7, #24]
 8002ccc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	2203      	movs	r2, #3
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f003 0203 	and.w	r2, r3, #3
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 80c0 	beq.w	8002e92 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d12:	2300      	movs	r3, #0
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	4b66      	ldr	r3, [pc, #408]	@ (8002eb0 <HAL_GPIO_Init+0x324>)
 8002d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d1a:	4a65      	ldr	r2, [pc, #404]	@ (8002eb0 <HAL_GPIO_Init+0x324>)
 8002d1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d20:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d22:	4b63      	ldr	r3, [pc, #396]	@ (8002eb0 <HAL_GPIO_Init+0x324>)
 8002d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d2a:	60fb      	str	r3, [r7, #12]
 8002d2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d2e:	4a61      	ldr	r2, [pc, #388]	@ (8002eb4 <HAL_GPIO_Init+0x328>)
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	089b      	lsrs	r3, r3, #2
 8002d34:	3302      	adds	r3, #2
 8002d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	220f      	movs	r2, #15
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a58      	ldr	r2, [pc, #352]	@ (8002eb8 <HAL_GPIO_Init+0x32c>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d037      	beq.n	8002dca <HAL_GPIO_Init+0x23e>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a57      	ldr	r2, [pc, #348]	@ (8002ebc <HAL_GPIO_Init+0x330>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d031      	beq.n	8002dc6 <HAL_GPIO_Init+0x23a>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a56      	ldr	r2, [pc, #344]	@ (8002ec0 <HAL_GPIO_Init+0x334>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d02b      	beq.n	8002dc2 <HAL_GPIO_Init+0x236>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a55      	ldr	r2, [pc, #340]	@ (8002ec4 <HAL_GPIO_Init+0x338>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d025      	beq.n	8002dbe <HAL_GPIO_Init+0x232>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a54      	ldr	r2, [pc, #336]	@ (8002ec8 <HAL_GPIO_Init+0x33c>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d01f      	beq.n	8002dba <HAL_GPIO_Init+0x22e>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a53      	ldr	r2, [pc, #332]	@ (8002ecc <HAL_GPIO_Init+0x340>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d019      	beq.n	8002db6 <HAL_GPIO_Init+0x22a>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a52      	ldr	r2, [pc, #328]	@ (8002ed0 <HAL_GPIO_Init+0x344>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d013      	beq.n	8002db2 <HAL_GPIO_Init+0x226>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a51      	ldr	r2, [pc, #324]	@ (8002ed4 <HAL_GPIO_Init+0x348>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d00d      	beq.n	8002dae <HAL_GPIO_Init+0x222>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a50      	ldr	r2, [pc, #320]	@ (8002ed8 <HAL_GPIO_Init+0x34c>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d007      	beq.n	8002daa <HAL_GPIO_Init+0x21e>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a4f      	ldr	r2, [pc, #316]	@ (8002edc <HAL_GPIO_Init+0x350>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d101      	bne.n	8002da6 <HAL_GPIO_Init+0x21a>
 8002da2:	2309      	movs	r3, #9
 8002da4:	e012      	b.n	8002dcc <HAL_GPIO_Init+0x240>
 8002da6:	230a      	movs	r3, #10
 8002da8:	e010      	b.n	8002dcc <HAL_GPIO_Init+0x240>
 8002daa:	2308      	movs	r3, #8
 8002dac:	e00e      	b.n	8002dcc <HAL_GPIO_Init+0x240>
 8002dae:	2307      	movs	r3, #7
 8002db0:	e00c      	b.n	8002dcc <HAL_GPIO_Init+0x240>
 8002db2:	2306      	movs	r3, #6
 8002db4:	e00a      	b.n	8002dcc <HAL_GPIO_Init+0x240>
 8002db6:	2305      	movs	r3, #5
 8002db8:	e008      	b.n	8002dcc <HAL_GPIO_Init+0x240>
 8002dba:	2304      	movs	r3, #4
 8002dbc:	e006      	b.n	8002dcc <HAL_GPIO_Init+0x240>
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e004      	b.n	8002dcc <HAL_GPIO_Init+0x240>
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	e002      	b.n	8002dcc <HAL_GPIO_Init+0x240>
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e000      	b.n	8002dcc <HAL_GPIO_Init+0x240>
 8002dca:	2300      	movs	r3, #0
 8002dcc:	69fa      	ldr	r2, [r7, #28]
 8002dce:	f002 0203 	and.w	r2, r2, #3
 8002dd2:	0092      	lsls	r2, r2, #2
 8002dd4:	4093      	lsls	r3, r2
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ddc:	4935      	ldr	r1, [pc, #212]	@ (8002eb4 <HAL_GPIO_Init+0x328>)
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	089b      	lsrs	r3, r3, #2
 8002de2:	3302      	adds	r3, #2
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dea:	4b3d      	ldr	r3, [pc, #244]	@ (8002ee0 <HAL_GPIO_Init+0x354>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	43db      	mvns	r3, r3
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	4013      	ands	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e0e:	4a34      	ldr	r2, [pc, #208]	@ (8002ee0 <HAL_GPIO_Init+0x354>)
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e14:	4b32      	ldr	r3, [pc, #200]	@ (8002ee0 <HAL_GPIO_Init+0x354>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4013      	ands	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d003      	beq.n	8002e38 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e38:	4a29      	ldr	r2, [pc, #164]	@ (8002ee0 <HAL_GPIO_Init+0x354>)
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e3e:	4b28      	ldr	r3, [pc, #160]	@ (8002ee0 <HAL_GPIO_Init+0x354>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	43db      	mvns	r3, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e62:	4a1f      	ldr	r2, [pc, #124]	@ (8002ee0 <HAL_GPIO_Init+0x354>)
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e68:	4b1d      	ldr	r3, [pc, #116]	@ (8002ee0 <HAL_GPIO_Init+0x354>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	43db      	mvns	r3, r3
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4013      	ands	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e8c:	4a14      	ldr	r2, [pc, #80]	@ (8002ee0 <HAL_GPIO_Init+0x354>)
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	3301      	adds	r3, #1
 8002e96:	61fb      	str	r3, [r7, #28]
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	2b0f      	cmp	r3, #15
 8002e9c:	f67f ae84 	bls.w	8002ba8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ea0:	bf00      	nop
 8002ea2:	bf00      	nop
 8002ea4:	3724      	adds	r7, #36	@ 0x24
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	40013800 	.word	0x40013800
 8002eb8:	40020000 	.word	0x40020000
 8002ebc:	40020400 	.word	0x40020400
 8002ec0:	40020800 	.word	0x40020800
 8002ec4:	40020c00 	.word	0x40020c00
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	40021400 	.word	0x40021400
 8002ed0:	40021800 	.word	0x40021800
 8002ed4:	40021c00 	.word	0x40021c00
 8002ed8:	40022000 	.word	0x40022000
 8002edc:	40022400 	.word	0x40022400
 8002ee0:	40013c00 	.word	0x40013c00

08002ee4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b087      	sub	sp, #28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002efa:	2300      	movs	r3, #0
 8002efc:	617b      	str	r3, [r7, #20]
 8002efe:	e0d9      	b.n	80030b4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f00:	2201      	movs	r2, #1
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	f040 80c9 	bne.w	80030ae <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002f1c:	4a6b      	ldr	r2, [pc, #428]	@ (80030cc <HAL_GPIO_DeInit+0x1e8>)
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	089b      	lsrs	r3, r3, #2
 8002f22:	3302      	adds	r3, #2
 8002f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f28:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f003 0303 	and.w	r3, r3, #3
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	220f      	movs	r2, #15
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a63      	ldr	r2, [pc, #396]	@ (80030d0 <HAL_GPIO_DeInit+0x1ec>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d037      	beq.n	8002fb6 <HAL_GPIO_DeInit+0xd2>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a62      	ldr	r2, [pc, #392]	@ (80030d4 <HAL_GPIO_DeInit+0x1f0>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d031      	beq.n	8002fb2 <HAL_GPIO_DeInit+0xce>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a61      	ldr	r2, [pc, #388]	@ (80030d8 <HAL_GPIO_DeInit+0x1f4>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d02b      	beq.n	8002fae <HAL_GPIO_DeInit+0xca>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a60      	ldr	r2, [pc, #384]	@ (80030dc <HAL_GPIO_DeInit+0x1f8>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d025      	beq.n	8002faa <HAL_GPIO_DeInit+0xc6>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a5f      	ldr	r2, [pc, #380]	@ (80030e0 <HAL_GPIO_DeInit+0x1fc>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d01f      	beq.n	8002fa6 <HAL_GPIO_DeInit+0xc2>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a5e      	ldr	r2, [pc, #376]	@ (80030e4 <HAL_GPIO_DeInit+0x200>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d019      	beq.n	8002fa2 <HAL_GPIO_DeInit+0xbe>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a5d      	ldr	r2, [pc, #372]	@ (80030e8 <HAL_GPIO_DeInit+0x204>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d013      	beq.n	8002f9e <HAL_GPIO_DeInit+0xba>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a5c      	ldr	r2, [pc, #368]	@ (80030ec <HAL_GPIO_DeInit+0x208>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d00d      	beq.n	8002f9a <HAL_GPIO_DeInit+0xb6>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a5b      	ldr	r2, [pc, #364]	@ (80030f0 <HAL_GPIO_DeInit+0x20c>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d007      	beq.n	8002f96 <HAL_GPIO_DeInit+0xb2>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a5a      	ldr	r2, [pc, #360]	@ (80030f4 <HAL_GPIO_DeInit+0x210>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d101      	bne.n	8002f92 <HAL_GPIO_DeInit+0xae>
 8002f8e:	2309      	movs	r3, #9
 8002f90:	e012      	b.n	8002fb8 <HAL_GPIO_DeInit+0xd4>
 8002f92:	230a      	movs	r3, #10
 8002f94:	e010      	b.n	8002fb8 <HAL_GPIO_DeInit+0xd4>
 8002f96:	2308      	movs	r3, #8
 8002f98:	e00e      	b.n	8002fb8 <HAL_GPIO_DeInit+0xd4>
 8002f9a:	2307      	movs	r3, #7
 8002f9c:	e00c      	b.n	8002fb8 <HAL_GPIO_DeInit+0xd4>
 8002f9e:	2306      	movs	r3, #6
 8002fa0:	e00a      	b.n	8002fb8 <HAL_GPIO_DeInit+0xd4>
 8002fa2:	2305      	movs	r3, #5
 8002fa4:	e008      	b.n	8002fb8 <HAL_GPIO_DeInit+0xd4>
 8002fa6:	2304      	movs	r3, #4
 8002fa8:	e006      	b.n	8002fb8 <HAL_GPIO_DeInit+0xd4>
 8002faa:	2303      	movs	r3, #3
 8002fac:	e004      	b.n	8002fb8 <HAL_GPIO_DeInit+0xd4>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	e002      	b.n	8002fb8 <HAL_GPIO_DeInit+0xd4>
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e000      	b.n	8002fb8 <HAL_GPIO_DeInit+0xd4>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	f002 0203 	and.w	r2, r2, #3
 8002fbe:	0092      	lsls	r2, r2, #2
 8002fc0:	4093      	lsls	r3, r2
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d132      	bne.n	800302e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002fc8:	4b4b      	ldr	r3, [pc, #300]	@ (80030f8 <HAL_GPIO_DeInit+0x214>)
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	43db      	mvns	r3, r3
 8002fd0:	4949      	ldr	r1, [pc, #292]	@ (80030f8 <HAL_GPIO_DeInit+0x214>)
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002fd6:	4b48      	ldr	r3, [pc, #288]	@ (80030f8 <HAL_GPIO_DeInit+0x214>)
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	4946      	ldr	r1, [pc, #280]	@ (80030f8 <HAL_GPIO_DeInit+0x214>)
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002fe4:	4b44      	ldr	r3, [pc, #272]	@ (80030f8 <HAL_GPIO_DeInit+0x214>)
 8002fe6:	68da      	ldr	r2, [r3, #12]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	43db      	mvns	r3, r3
 8002fec:	4942      	ldr	r1, [pc, #264]	@ (80030f8 <HAL_GPIO_DeInit+0x214>)
 8002fee:	4013      	ands	r3, r2
 8002ff0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002ff2:	4b41      	ldr	r3, [pc, #260]	@ (80030f8 <HAL_GPIO_DeInit+0x214>)
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	493f      	ldr	r1, [pc, #252]	@ (80030f8 <HAL_GPIO_DeInit+0x214>)
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	220f      	movs	r2, #15
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003010:	4a2e      	ldr	r2, [pc, #184]	@ (80030cc <HAL_GPIO_DeInit+0x1e8>)
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	089b      	lsrs	r3, r3, #2
 8003016:	3302      	adds	r3, #2
 8003018:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	43da      	mvns	r2, r3
 8003020:	482a      	ldr	r0, [pc, #168]	@ (80030cc <HAL_GPIO_DeInit+0x1e8>)
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	089b      	lsrs	r3, r3, #2
 8003026:	400a      	ands	r2, r1
 8003028:	3302      	adds	r3, #2
 800302a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	2103      	movs	r1, #3
 8003038:	fa01 f303 	lsl.w	r3, r1, r3
 800303c:	43db      	mvns	r3, r3
 800303e:	401a      	ands	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	08da      	lsrs	r2, r3, #3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3208      	adds	r2, #8
 800304c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	220f      	movs	r2, #15
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	43db      	mvns	r3, r3
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	08d2      	lsrs	r2, r2, #3
 8003064:	4019      	ands	r1, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	3208      	adds	r2, #8
 800306a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68da      	ldr	r2, [r3, #12]
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	2103      	movs	r1, #3
 8003078:	fa01 f303 	lsl.w	r3, r1, r3
 800307c:	43db      	mvns	r3, r3
 800307e:	401a      	ands	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	2101      	movs	r1, #1
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	fa01 f303 	lsl.w	r3, r1, r3
 8003090:	43db      	mvns	r3, r3
 8003092:	401a      	ands	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	2103      	movs	r1, #3
 80030a2:	fa01 f303 	lsl.w	r3, r1, r3
 80030a6:	43db      	mvns	r3, r3
 80030a8:	401a      	ands	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	3301      	adds	r3, #1
 80030b2:	617b      	str	r3, [r7, #20]
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	2b0f      	cmp	r3, #15
 80030b8:	f67f af22 	bls.w	8002f00 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80030bc:	bf00      	nop
 80030be:	bf00      	nop
 80030c0:	371c      	adds	r7, #28
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	40013800 	.word	0x40013800
 80030d0:	40020000 	.word	0x40020000
 80030d4:	40020400 	.word	0x40020400
 80030d8:	40020800 	.word	0x40020800
 80030dc:	40020c00 	.word	0x40020c00
 80030e0:	40021000 	.word	0x40021000
 80030e4:	40021400 	.word	0x40021400
 80030e8:	40021800 	.word	0x40021800
 80030ec:	40021c00 	.word	0x40021c00
 80030f0:	40022000 	.word	0x40022000
 80030f4:	40022400 	.word	0x40022400
 80030f8:	40013c00 	.word	0x40013c00

080030fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	460b      	mov	r3, r1
 8003106:	807b      	strh	r3, [r7, #2]
 8003108:	4613      	mov	r3, r2
 800310a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800310c:	787b      	ldrb	r3, [r7, #1]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003112:	887a      	ldrh	r2, [r7, #2]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003118:	e003      	b.n	8003122 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800311a:	887b      	ldrh	r3, [r7, #2]
 800311c:	041a      	lsls	r2, r3, #16
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	619a      	str	r2, [r3, #24]
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
	...

08003130 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e12b      	b.n	800339a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d106      	bne.n	800315c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7fe fda6 	bl	8001ca8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2224      	movs	r2, #36	@ 0x24
 8003160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 0201 	bic.w	r2, r2, #1
 8003172:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003182:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003192:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003194:	f001 ff82 	bl	800509c <HAL_RCC_GetPCLK1Freq>
 8003198:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	4a81      	ldr	r2, [pc, #516]	@ (80033a4 <HAL_I2C_Init+0x274>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d807      	bhi.n	80031b4 <HAL_I2C_Init+0x84>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	4a80      	ldr	r2, [pc, #512]	@ (80033a8 <HAL_I2C_Init+0x278>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	bf94      	ite	ls
 80031ac:	2301      	movls	r3, #1
 80031ae:	2300      	movhi	r3, #0
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	e006      	b.n	80031c2 <HAL_I2C_Init+0x92>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	4a7d      	ldr	r2, [pc, #500]	@ (80033ac <HAL_I2C_Init+0x27c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	bf94      	ite	ls
 80031bc:	2301      	movls	r3, #1
 80031be:	2300      	movhi	r3, #0
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e0e7      	b.n	800339a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	4a78      	ldr	r2, [pc, #480]	@ (80033b0 <HAL_I2C_Init+0x280>)
 80031ce:	fba2 2303 	umull	r2, r3, r2, r3
 80031d2:	0c9b      	lsrs	r3, r3, #18
 80031d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68ba      	ldr	r2, [r7, #8]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	4a6a      	ldr	r2, [pc, #424]	@ (80033a4 <HAL_I2C_Init+0x274>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d802      	bhi.n	8003204 <HAL_I2C_Init+0xd4>
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	3301      	adds	r3, #1
 8003202:	e009      	b.n	8003218 <HAL_I2C_Init+0xe8>
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800320a:	fb02 f303 	mul.w	r3, r2, r3
 800320e:	4a69      	ldr	r2, [pc, #420]	@ (80033b4 <HAL_I2C_Init+0x284>)
 8003210:	fba2 2303 	umull	r2, r3, r2, r3
 8003214:	099b      	lsrs	r3, r3, #6
 8003216:	3301      	adds	r3, #1
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6812      	ldr	r2, [r2, #0]
 800321c:	430b      	orrs	r3, r1
 800321e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800322a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	495c      	ldr	r1, [pc, #368]	@ (80033a4 <HAL_I2C_Init+0x274>)
 8003234:	428b      	cmp	r3, r1
 8003236:	d819      	bhi.n	800326c <HAL_I2C_Init+0x13c>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	1e59      	subs	r1, r3, #1
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	fbb1 f3f3 	udiv	r3, r1, r3
 8003246:	1c59      	adds	r1, r3, #1
 8003248:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800324c:	400b      	ands	r3, r1
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00a      	beq.n	8003268 <HAL_I2C_Init+0x138>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	1e59      	subs	r1, r3, #1
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003260:	3301      	adds	r3, #1
 8003262:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003266:	e051      	b.n	800330c <HAL_I2C_Init+0x1dc>
 8003268:	2304      	movs	r3, #4
 800326a:	e04f      	b.n	800330c <HAL_I2C_Init+0x1dc>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d111      	bne.n	8003298 <HAL_I2C_Init+0x168>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	1e58      	subs	r0, r3, #1
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6859      	ldr	r1, [r3, #4]
 800327c:	460b      	mov	r3, r1
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	440b      	add	r3, r1
 8003282:	fbb0 f3f3 	udiv	r3, r0, r3
 8003286:	3301      	adds	r3, #1
 8003288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800328c:	2b00      	cmp	r3, #0
 800328e:	bf0c      	ite	eq
 8003290:	2301      	moveq	r3, #1
 8003292:	2300      	movne	r3, #0
 8003294:	b2db      	uxtb	r3, r3
 8003296:	e012      	b.n	80032be <HAL_I2C_Init+0x18e>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	1e58      	subs	r0, r3, #1
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6859      	ldr	r1, [r3, #4]
 80032a0:	460b      	mov	r3, r1
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	0099      	lsls	r1, r3, #2
 80032a8:	440b      	add	r3, r1
 80032aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ae:	3301      	adds	r3, #1
 80032b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	bf0c      	ite	eq
 80032b8:	2301      	moveq	r3, #1
 80032ba:	2300      	movne	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <HAL_I2C_Init+0x196>
 80032c2:	2301      	movs	r3, #1
 80032c4:	e022      	b.n	800330c <HAL_I2C_Init+0x1dc>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10e      	bne.n	80032ec <HAL_I2C_Init+0x1bc>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	1e58      	subs	r0, r3, #1
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6859      	ldr	r1, [r3, #4]
 80032d6:	460b      	mov	r3, r1
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	440b      	add	r3, r1
 80032dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80032e0:	3301      	adds	r3, #1
 80032e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032ea:	e00f      	b.n	800330c <HAL_I2C_Init+0x1dc>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	1e58      	subs	r0, r3, #1
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6859      	ldr	r1, [r3, #4]
 80032f4:	460b      	mov	r3, r1
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	0099      	lsls	r1, r3, #2
 80032fc:	440b      	add	r3, r1
 80032fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003302:	3301      	adds	r3, #1
 8003304:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003308:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	6809      	ldr	r1, [r1, #0]
 8003310:	4313      	orrs	r3, r2
 8003312:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	69da      	ldr	r2, [r3, #28]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	431a      	orrs	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800333a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6911      	ldr	r1, [r2, #16]
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	68d2      	ldr	r2, [r2, #12]
 8003346:	4311      	orrs	r1, r2
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	6812      	ldr	r2, [r2, #0]
 800334c:	430b      	orrs	r3, r1
 800334e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	695a      	ldr	r2, [r3, #20]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	431a      	orrs	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	430a      	orrs	r2, r1
 800336a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0201 	orr.w	r2, r2, #1
 800337a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2220      	movs	r2, #32
 8003386:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	000186a0 	.word	0x000186a0
 80033a8:	001e847f 	.word	0x001e847f
 80033ac:	003d08ff 	.word	0x003d08ff
 80033b0:	431bde83 	.word	0x431bde83
 80033b4:	10624dd3 	.word	0x10624dd3

080033b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b088      	sub	sp, #32
 80033bc:	af02      	add	r7, sp, #8
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	4608      	mov	r0, r1
 80033c2:	4611      	mov	r1, r2
 80033c4:	461a      	mov	r2, r3
 80033c6:	4603      	mov	r3, r0
 80033c8:	817b      	strh	r3, [r7, #10]
 80033ca:	460b      	mov	r3, r1
 80033cc:	813b      	strh	r3, [r7, #8]
 80033ce:	4613      	mov	r3, r2
 80033d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033d2:	f7ff fac5 	bl	8002960 <HAL_GetTick>
 80033d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2b20      	cmp	r3, #32
 80033e2:	f040 80d9 	bne.w	8003598 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	2319      	movs	r3, #25
 80033ec:	2201      	movs	r2, #1
 80033ee:	496d      	ldr	r1, [pc, #436]	@ (80035a4 <HAL_I2C_Mem_Write+0x1ec>)
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 fc8b 	bl	8003d0c <I2C_WaitOnFlagUntilTimeout>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80033fc:	2302      	movs	r3, #2
 80033fe:	e0cc      	b.n	800359a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003406:	2b01      	cmp	r3, #1
 8003408:	d101      	bne.n	800340e <HAL_I2C_Mem_Write+0x56>
 800340a:	2302      	movs	r3, #2
 800340c:	e0c5      	b.n	800359a <HAL_I2C_Mem_Write+0x1e2>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b01      	cmp	r3, #1
 8003422:	d007      	beq.n	8003434 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0201 	orr.w	r2, r2, #1
 8003432:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003442:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2221      	movs	r2, #33	@ 0x21
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2240      	movs	r2, #64	@ 0x40
 8003450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6a3a      	ldr	r2, [r7, #32]
 800345e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003464:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800346a:	b29a      	uxth	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	4a4d      	ldr	r2, [pc, #308]	@ (80035a8 <HAL_I2C_Mem_Write+0x1f0>)
 8003474:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003476:	88f8      	ldrh	r0, [r7, #6]
 8003478:	893a      	ldrh	r2, [r7, #8]
 800347a:	8979      	ldrh	r1, [r7, #10]
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	9301      	str	r3, [sp, #4]
 8003480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	4603      	mov	r3, r0
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f000 fac2 	bl	8003a10 <I2C_RequestMemoryWrite>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d052      	beq.n	8003538 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e081      	b.n	800359a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f000 fd50 	bl	8003f40 <I2C_WaitOnTXEFlagUntilTimeout>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00d      	beq.n	80034c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034aa:	2b04      	cmp	r3, #4
 80034ac:	d107      	bne.n	80034be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e06b      	b.n	800359a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c6:	781a      	ldrb	r2, [r3, #0]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d2:	1c5a      	adds	r2, r3, #1
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034dc:	3b01      	subs	r3, #1
 80034de:	b29a      	uxth	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	3b01      	subs	r3, #1
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b04      	cmp	r3, #4
 80034fe:	d11b      	bne.n	8003538 <HAL_I2C_Mem_Write+0x180>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003504:	2b00      	cmp	r3, #0
 8003506:	d017      	beq.n	8003538 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350c:	781a      	ldrb	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003518:	1c5a      	adds	r2, r3, #1
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003522:	3b01      	subs	r3, #1
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800352e:	b29b      	uxth	r3, r3
 8003530:	3b01      	subs	r3, #1
 8003532:	b29a      	uxth	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1aa      	bne.n	8003496 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 fd43 	bl	8003fd0 <I2C_WaitOnBTFFlagUntilTimeout>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00d      	beq.n	800356c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003554:	2b04      	cmp	r3, #4
 8003556:	d107      	bne.n	8003568 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003566:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e016      	b.n	800359a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800357a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2220      	movs	r2, #32
 8003580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003594:	2300      	movs	r3, #0
 8003596:	e000      	b.n	800359a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003598:	2302      	movs	r3, #2
  }
}
 800359a:	4618      	mov	r0, r3
 800359c:	3718      	adds	r7, #24
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	00100002 	.word	0x00100002
 80035a8:	ffff0000 	.word	0xffff0000

080035ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b08c      	sub	sp, #48	@ 0x30
 80035b0:	af02      	add	r7, sp, #8
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	4608      	mov	r0, r1
 80035b6:	4611      	mov	r1, r2
 80035b8:	461a      	mov	r2, r3
 80035ba:	4603      	mov	r3, r0
 80035bc:	817b      	strh	r3, [r7, #10]
 80035be:	460b      	mov	r3, r1
 80035c0:	813b      	strh	r3, [r7, #8]
 80035c2:	4613      	mov	r3, r2
 80035c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035c6:	f7ff f9cb 	bl	8002960 <HAL_GetTick>
 80035ca:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b20      	cmp	r3, #32
 80035d6:	f040 8214 	bne.w	8003a02 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035dc:	9300      	str	r3, [sp, #0]
 80035de:	2319      	movs	r3, #25
 80035e0:	2201      	movs	r2, #1
 80035e2:	497b      	ldr	r1, [pc, #492]	@ (80037d0 <HAL_I2C_Mem_Read+0x224>)
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 fb91 	bl	8003d0c <I2C_WaitOnFlagUntilTimeout>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80035f0:	2302      	movs	r3, #2
 80035f2:	e207      	b.n	8003a04 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d101      	bne.n	8003602 <HAL_I2C_Mem_Read+0x56>
 80035fe:	2302      	movs	r3, #2
 8003600:	e200      	b.n	8003a04 <HAL_I2C_Mem_Read+0x458>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b01      	cmp	r3, #1
 8003616:	d007      	beq.n	8003628 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 0201 	orr.w	r2, r2, #1
 8003626:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003636:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2222      	movs	r2, #34	@ 0x22
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2240      	movs	r2, #64	@ 0x40
 8003644:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003652:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003658:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800365e:	b29a      	uxth	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	4a5b      	ldr	r2, [pc, #364]	@ (80037d4 <HAL_I2C_Mem_Read+0x228>)
 8003668:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800366a:	88f8      	ldrh	r0, [r7, #6]
 800366c:	893a      	ldrh	r2, [r7, #8]
 800366e:	8979      	ldrh	r1, [r7, #10]
 8003670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003672:	9301      	str	r3, [sp, #4]
 8003674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	4603      	mov	r3, r0
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f000 fa5e 	bl	8003b3c <I2C_RequestMemoryRead>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e1bc      	b.n	8003a04 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800368e:	2b00      	cmp	r3, #0
 8003690:	d113      	bne.n	80036ba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003692:	2300      	movs	r3, #0
 8003694:	623b      	str	r3, [r7, #32]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	623b      	str	r3, [r7, #32]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	623b      	str	r3, [r7, #32]
 80036a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	e190      	b.n	80039dc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d11b      	bne.n	80036fa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036d2:	2300      	movs	r3, #0
 80036d4:	61fb      	str	r3, [r7, #28]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	61fb      	str	r3, [r7, #28]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	61fb      	str	r3, [r7, #28]
 80036e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	e170      	b.n	80039dc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d11b      	bne.n	800373a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003710:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003720:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003722:	2300      	movs	r3, #0
 8003724:	61bb      	str	r3, [r7, #24]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	61bb      	str	r3, [r7, #24]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	61bb      	str	r3, [r7, #24]
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	e150      	b.n	80039dc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800373a:	2300      	movs	r3, #0
 800373c:	617b      	str	r3, [r7, #20]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	617b      	str	r3, [r7, #20]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	617b      	str	r3, [r7, #20]
 800374e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003750:	e144      	b.n	80039dc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003756:	2b03      	cmp	r3, #3
 8003758:	f200 80f1 	bhi.w	800393e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003760:	2b01      	cmp	r3, #1
 8003762:	d123      	bne.n	80037ac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003764:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003766:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f000 fc79 	bl	8004060 <I2C_WaitOnRXNEFlagUntilTimeout>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e145      	b.n	8003a04 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	691a      	ldr	r2, [r3, #16]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003782:	b2d2      	uxtb	r2, r2
 8003784:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378a:	1c5a      	adds	r2, r3, #1
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003794:	3b01      	subs	r3, #1
 8003796:	b29a      	uxth	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	3b01      	subs	r3, #1
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80037aa:	e117      	b.n	80039dc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d14e      	bne.n	8003852 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b6:	9300      	str	r3, [sp, #0]
 80037b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037ba:	2200      	movs	r2, #0
 80037bc:	4906      	ldr	r1, [pc, #24]	@ (80037d8 <HAL_I2C_Mem_Read+0x22c>)
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f000 faa4 	bl	8003d0c <I2C_WaitOnFlagUntilTimeout>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d008      	beq.n	80037dc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e11a      	b.n	8003a04 <HAL_I2C_Mem_Read+0x458>
 80037ce:	bf00      	nop
 80037d0:	00100002 	.word	0x00100002
 80037d4:	ffff0000 	.word	0xffff0000
 80037d8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	691a      	ldr	r2, [r3, #16]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f6:	b2d2      	uxtb	r2, r2
 80037f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fe:	1c5a      	adds	r2, r3, #1
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003808:	3b01      	subs	r3, #1
 800380a:	b29a      	uxth	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003814:	b29b      	uxth	r3, r3
 8003816:	3b01      	subs	r3, #1
 8003818:	b29a      	uxth	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003828:	b2d2      	uxtb	r2, r2
 800382a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003830:	1c5a      	adds	r2, r3, #1
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800383a:	3b01      	subs	r3, #1
 800383c:	b29a      	uxth	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003846:	b29b      	uxth	r3, r3
 8003848:	3b01      	subs	r3, #1
 800384a:	b29a      	uxth	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003850:	e0c4      	b.n	80039dc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003854:	9300      	str	r3, [sp, #0]
 8003856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003858:	2200      	movs	r2, #0
 800385a:	496c      	ldr	r1, [pc, #432]	@ (8003a0c <HAL_I2C_Mem_Read+0x460>)
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 fa55 	bl	8003d0c <I2C_WaitOnFlagUntilTimeout>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e0cb      	b.n	8003a04 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800387a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	691a      	ldr	r2, [r3, #16]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003886:	b2d2      	uxtb	r2, r2
 8003888:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388e:	1c5a      	adds	r2, r3, #1
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003898:	3b01      	subs	r3, #1
 800389a:	b29a      	uxth	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	3b01      	subs	r3, #1
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038b4:	2200      	movs	r2, #0
 80038b6:	4955      	ldr	r1, [pc, #340]	@ (8003a0c <HAL_I2C_Mem_Read+0x460>)
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f000 fa27 	bl	8003d0c <I2C_WaitOnFlagUntilTimeout>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e09d      	b.n	8003a04 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	691a      	ldr	r2, [r3, #16]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ea:	1c5a      	adds	r2, r3, #1
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038f4:	3b01      	subs	r3, #1
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003900:	b29b      	uxth	r3, r3
 8003902:	3b01      	subs	r3, #1
 8003904:	b29a      	uxth	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	691a      	ldr	r2, [r3, #16]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003914:	b2d2      	uxtb	r2, r2
 8003916:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391c:	1c5a      	adds	r2, r3, #1
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003926:	3b01      	subs	r3, #1
 8003928:	b29a      	uxth	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003932:	b29b      	uxth	r3, r3
 8003934:	3b01      	subs	r3, #1
 8003936:	b29a      	uxth	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800393c:	e04e      	b.n	80039dc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800393e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003940:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f000 fb8c 	bl	8004060 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e058      	b.n	8003a04 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	691a      	ldr	r2, [r3, #16]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395c:	b2d2      	uxtb	r2, r2
 800395e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003964:	1c5a      	adds	r2, r3, #1
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800396e:	3b01      	subs	r3, #1
 8003970:	b29a      	uxth	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800397a:	b29b      	uxth	r3, r3
 800397c:	3b01      	subs	r3, #1
 800397e:	b29a      	uxth	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	f003 0304 	and.w	r3, r3, #4
 800398e:	2b04      	cmp	r3, #4
 8003990:	d124      	bne.n	80039dc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003996:	2b03      	cmp	r3, #3
 8003998:	d107      	bne.n	80039aa <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039a8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	691a      	ldr	r2, [r3, #16]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b4:	b2d2      	uxtb	r2, r2
 80039b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039bc:	1c5a      	adds	r2, r3, #1
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039c6:	3b01      	subs	r3, #1
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	3b01      	subs	r3, #1
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f47f aeb6 	bne.w	8003752 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2220      	movs	r2, #32
 80039ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80039fe:	2300      	movs	r3, #0
 8003a00:	e000      	b.n	8003a04 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003a02:	2302      	movs	r3, #2
  }
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3728      	adds	r7, #40	@ 0x28
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	00010004 	.word	0x00010004

08003a10 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b088      	sub	sp, #32
 8003a14:	af02      	add	r7, sp, #8
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	4608      	mov	r0, r1
 8003a1a:	4611      	mov	r1, r2
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	4603      	mov	r3, r0
 8003a20:	817b      	strh	r3, [r7, #10]
 8003a22:	460b      	mov	r3, r1
 8003a24:	813b      	strh	r3, [r7, #8]
 8003a26:	4613      	mov	r3, r2
 8003a28:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a38:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	6a3b      	ldr	r3, [r7, #32]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 f960 	bl	8003d0c <I2C_WaitOnFlagUntilTimeout>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00d      	beq.n	8003a6e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a60:	d103      	bne.n	8003a6a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a68:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e05f      	b.n	8003b2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a6e:	897b      	ldrh	r3, [r7, #10]
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	461a      	mov	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a7c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a80:	6a3a      	ldr	r2, [r7, #32]
 8003a82:	492d      	ldr	r1, [pc, #180]	@ (8003b38 <I2C_RequestMemoryWrite+0x128>)
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f000 f9bb 	bl	8003e00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e04c      	b.n	8003b2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a94:	2300      	movs	r3, #0
 8003a96:	617b      	str	r3, [r7, #20]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	617b      	str	r3, [r7, #20]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	617b      	str	r3, [r7, #20]
 8003aa8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aac:	6a39      	ldr	r1, [r7, #32]
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f000 fa46 	bl	8003f40 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00d      	beq.n	8003ad6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d107      	bne.n	8003ad2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ad0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e02b      	b.n	8003b2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ad6:	88fb      	ldrh	r3, [r7, #6]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d105      	bne.n	8003ae8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003adc:	893b      	ldrh	r3, [r7, #8]
 8003ade:	b2da      	uxtb	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	611a      	str	r2, [r3, #16]
 8003ae6:	e021      	b.n	8003b2c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ae8:	893b      	ldrh	r3, [r7, #8]
 8003aea:	0a1b      	lsrs	r3, r3, #8
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	b2da      	uxtb	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003af8:	6a39      	ldr	r1, [r7, #32]
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f000 fa20 	bl	8003f40 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00d      	beq.n	8003b22 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0a:	2b04      	cmp	r3, #4
 8003b0c:	d107      	bne.n	8003b1e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b1c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e005      	b.n	8003b2e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b22:	893b      	ldrh	r3, [r7, #8]
 8003b24:	b2da      	uxtb	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3718      	adds	r7, #24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	00010002 	.word	0x00010002

08003b3c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b088      	sub	sp, #32
 8003b40:	af02      	add	r7, sp, #8
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	4608      	mov	r0, r1
 8003b46:	4611      	mov	r1, r2
 8003b48:	461a      	mov	r2, r3
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	817b      	strh	r3, [r7, #10]
 8003b4e:	460b      	mov	r3, r1
 8003b50:	813b      	strh	r3, [r7, #8]
 8003b52:	4613      	mov	r3, r2
 8003b54:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003b64:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b74:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	6a3b      	ldr	r3, [r7, #32]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f000 f8c2 	bl	8003d0c <I2C_WaitOnFlagUntilTimeout>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00d      	beq.n	8003baa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b9c:	d103      	bne.n	8003ba6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ba4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e0aa      	b.n	8003d00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003baa:	897b      	ldrh	r3, [r7, #10]
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	461a      	mov	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003bb8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bbc:	6a3a      	ldr	r2, [r7, #32]
 8003bbe:	4952      	ldr	r1, [pc, #328]	@ (8003d08 <I2C_RequestMemoryRead+0x1cc>)
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f000 f91d 	bl	8003e00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e097      	b.n	8003d00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	617b      	str	r3, [r7, #20]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	617b      	str	r3, [r7, #20]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	617b      	str	r3, [r7, #20]
 8003be4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003be6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003be8:	6a39      	ldr	r1, [r7, #32]
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f000 f9a8 	bl	8003f40 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00d      	beq.n	8003c12 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d107      	bne.n	8003c0e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c0c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e076      	b.n	8003d00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c12:	88fb      	ldrh	r3, [r7, #6]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d105      	bne.n	8003c24 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c18:	893b      	ldrh	r3, [r7, #8]
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	611a      	str	r2, [r3, #16]
 8003c22:	e021      	b.n	8003c68 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c24:	893b      	ldrh	r3, [r7, #8]
 8003c26:	0a1b      	lsrs	r3, r3, #8
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c34:	6a39      	ldr	r1, [r7, #32]
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f000 f982 	bl	8003f40 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00d      	beq.n	8003c5e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c46:	2b04      	cmp	r3, #4
 8003c48:	d107      	bne.n	8003c5a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c58:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e050      	b.n	8003d00 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c5e:	893b      	ldrh	r3, [r7, #8]
 8003c60:	b2da      	uxtb	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c6a:	6a39      	ldr	r1, [r7, #32]
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 f967 	bl	8003f40 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00d      	beq.n	8003c94 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7c:	2b04      	cmp	r3, #4
 8003c7e:	d107      	bne.n	8003c90 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c8e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e035      	b.n	8003d00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ca2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f000 f82b 	bl	8003d0c <I2C_WaitOnFlagUntilTimeout>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00d      	beq.n	8003cd8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cca:	d103      	bne.n	8003cd4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cd2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e013      	b.n	8003d00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003cd8:	897b      	ldrh	r3, [r7, #10]
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	f043 0301 	orr.w	r3, r3, #1
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cea:	6a3a      	ldr	r2, [r7, #32]
 8003cec:	4906      	ldr	r1, [pc, #24]	@ (8003d08 <I2C_RequestMemoryRead+0x1cc>)
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f000 f886 	bl	8003e00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e000      	b.n	8003d00 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3718      	adds	r7, #24
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	00010002 	.word	0x00010002

08003d0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	603b      	str	r3, [r7, #0]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d1c:	e048      	b.n	8003db0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d24:	d044      	beq.n	8003db0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d26:	f7fe fe1b 	bl	8002960 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d302      	bcc.n	8003d3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d139      	bne.n	8003db0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	0c1b      	lsrs	r3, r3, #16
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d10d      	bne.n	8003d62 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	43da      	mvns	r2, r3
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	4013      	ands	r3, r2
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	bf0c      	ite	eq
 8003d58:	2301      	moveq	r3, #1
 8003d5a:	2300      	movne	r3, #0
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	461a      	mov	r2, r3
 8003d60:	e00c      	b.n	8003d7c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	43da      	mvns	r2, r3
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	bf0c      	ite	eq
 8003d74:	2301      	moveq	r3, #1
 8003d76:	2300      	movne	r3, #0
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	79fb      	ldrb	r3, [r7, #7]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d116      	bne.n	8003db0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9c:	f043 0220 	orr.w	r2, r3, #32
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e023      	b.n	8003df8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	0c1b      	lsrs	r3, r3, #16
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d10d      	bne.n	8003dd6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	43da      	mvns	r2, r3
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	bf0c      	ite	eq
 8003dcc:	2301      	moveq	r3, #1
 8003dce:	2300      	movne	r3, #0
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	e00c      	b.n	8003df0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	43da      	mvns	r2, r3
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	4013      	ands	r3, r2
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	bf0c      	ite	eq
 8003de8:	2301      	moveq	r3, #1
 8003dea:	2300      	movne	r3, #0
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	461a      	mov	r2, r3
 8003df0:	79fb      	ldrb	r3, [r7, #7]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d093      	beq.n	8003d1e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
 8003e0c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e0e:	e071      	b.n	8003ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e1e:	d123      	bne.n	8003e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e2e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2220      	movs	r2, #32
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e54:	f043 0204 	orr.w	r2, r3, #4
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e067      	b.n	8003f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e6e:	d041      	beq.n	8003ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e70:	f7fe fd76 	bl	8002960 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d302      	bcc.n	8003e86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d136      	bne.n	8003ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	0c1b      	lsrs	r3, r3, #16
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d10c      	bne.n	8003eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	43da      	mvns	r2, r3
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	bf14      	ite	ne
 8003ea2:	2301      	movne	r3, #1
 8003ea4:	2300      	moveq	r3, #0
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	e00b      	b.n	8003ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	43da      	mvns	r2, r3
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	bf14      	ite	ne
 8003ebc:	2301      	movne	r3, #1
 8003ebe:	2300      	moveq	r3, #0
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d016      	beq.n	8003ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee0:	f043 0220 	orr.w	r2, r3, #32
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e021      	b.n	8003f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	0c1b      	lsrs	r3, r3, #16
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d10c      	bne.n	8003f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	43da      	mvns	r2, r3
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	bf14      	ite	ne
 8003f10:	2301      	movne	r3, #1
 8003f12:	2300      	moveq	r3, #0
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	e00b      	b.n	8003f30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	43da      	mvns	r2, r3
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	4013      	ands	r3, r2
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	bf14      	ite	ne
 8003f2a:	2301      	movne	r3, #1
 8003f2c:	2300      	moveq	r3, #0
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f47f af6d 	bne.w	8003e10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f4c:	e034      	b.n	8003fb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f000 f8e3 	bl	800411a <I2C_IsAcknowledgeFailed>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e034      	b.n	8003fc8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f64:	d028      	beq.n	8003fb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f66:	f7fe fcfb 	bl	8002960 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	68ba      	ldr	r2, [r7, #8]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d302      	bcc.n	8003f7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d11d      	bne.n	8003fb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f86:	2b80      	cmp	r3, #128	@ 0x80
 8003f88:	d016      	beq.n	8003fb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2220      	movs	r2, #32
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa4:	f043 0220 	orr.w	r2, r3, #32
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e007      	b.n	8003fc8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fc2:	2b80      	cmp	r3, #128	@ 0x80
 8003fc4:	d1c3      	bne.n	8003f4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fdc:	e034      	b.n	8004048 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f000 f89b 	bl	800411a <I2C_IsAcknowledgeFailed>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e034      	b.n	8004058 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ff4:	d028      	beq.n	8004048 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ff6:	f7fe fcb3 	bl	8002960 <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	429a      	cmp	r2, r3
 8004004:	d302      	bcc.n	800400c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d11d      	bne.n	8004048 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	f003 0304 	and.w	r3, r3, #4
 8004016:	2b04      	cmp	r3, #4
 8004018:	d016      	beq.n	8004048 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2220      	movs	r2, #32
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004034:	f043 0220 	orr.w	r2, r3, #32
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e007      	b.n	8004058 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	f003 0304 	and.w	r3, r3, #4
 8004052:	2b04      	cmp	r3, #4
 8004054:	d1c3      	bne.n	8003fde <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800406c:	e049      	b.n	8004102 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	f003 0310 	and.w	r3, r3, #16
 8004078:	2b10      	cmp	r3, #16
 800407a:	d119      	bne.n	80040b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f06f 0210 	mvn.w	r2, #16
 8004084:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2220      	movs	r2, #32
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e030      	b.n	8004112 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040b0:	f7fe fc56 	bl	8002960 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	68ba      	ldr	r2, [r7, #8]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d302      	bcc.n	80040c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d11d      	bne.n	8004102 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040d0:	2b40      	cmp	r3, #64	@ 0x40
 80040d2:	d016      	beq.n	8004102 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2220      	movs	r2, #32
 80040de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ee:	f043 0220 	orr.w	r2, r3, #32
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e007      	b.n	8004112 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800410c:	2b40      	cmp	r3, #64	@ 0x40
 800410e:	d1ae      	bne.n	800406e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800411a:	b480      	push	{r7}
 800411c:	b083      	sub	sp, #12
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800412c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004130:	d11b      	bne.n	800416a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800413a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2220      	movs	r2, #32
 8004146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004156:	f043 0204 	orr.w	r2, r3, #4
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e000      	b.n	800416c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b20      	cmp	r3, #32
 800418c:	d129      	bne.n	80041e2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2224      	movs	r2, #36	@ 0x24
 8004192:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0201 	bic.w	r2, r2, #1
 80041a4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 0210 	bic.w	r2, r2, #16
 80041b4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f042 0201 	orr.w	r2, r2, #1
 80041d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2220      	movs	r2, #32
 80041da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80041de:	2300      	movs	r3, #0
 80041e0:	e000      	b.n	80041e4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80041e2:	2302      	movs	r3, #2
  }
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80041fa:	2300      	movs	r3, #0
 80041fc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b20      	cmp	r3, #32
 8004208:	d12a      	bne.n	8004260 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2224      	movs	r2, #36	@ 0x24
 800420e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 0201 	bic.w	r2, r2, #1
 8004220:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004228:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800422a:	89fb      	ldrh	r3, [r7, #14]
 800422c:	f023 030f 	bic.w	r3, r3, #15
 8004230:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	b29a      	uxth	r2, r3
 8004236:	89fb      	ldrh	r3, [r7, #14]
 8004238:	4313      	orrs	r3, r2
 800423a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	89fa      	ldrh	r2, [r7, #14]
 8004242:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0201 	orr.w	r2, r2, #1
 8004252:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2220      	movs	r2, #32
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800425c:	2300      	movs	r3, #0
 800425e:	e000      	b.n	8004262 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004260:	2302      	movs	r3, #2
  }
}
 8004262:	4618      	mov	r0, r3
 8004264:	3714      	adds	r7, #20
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
	...

08004270 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e0bf      	b.n	8004402 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d106      	bne.n	800429c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7fd fd70 	bl	8001d7c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2202      	movs	r2, #2
 80042a0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	699a      	ldr	r2, [r3, #24]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80042b2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6999      	ldr	r1, [r3, #24]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80042c8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6899      	ldr	r1, [r3, #8]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	4b4a      	ldr	r3, [pc, #296]	@ (800440c <HAL_LTDC_Init+0x19c>)
 80042e4:	400b      	ands	r3, r1
 80042e6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	041b      	lsls	r3, r3, #16
 80042ee:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6899      	ldr	r1, [r3, #8]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	699a      	ldr	r2, [r3, #24]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	431a      	orrs	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	430a      	orrs	r2, r1
 8004304:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68d9      	ldr	r1, [r3, #12]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	4b3e      	ldr	r3, [pc, #248]	@ (800440c <HAL_LTDC_Init+0x19c>)
 8004312:	400b      	ands	r3, r1
 8004314:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	041b      	lsls	r3, r3, #16
 800431c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68d9      	ldr	r1, [r3, #12]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a1a      	ldr	r2, [r3, #32]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	431a      	orrs	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	430a      	orrs	r2, r1
 8004332:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	6919      	ldr	r1, [r3, #16]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	4b33      	ldr	r3, [pc, #204]	@ (800440c <HAL_LTDC_Init+0x19c>)
 8004340:	400b      	ands	r3, r1
 8004342:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004348:	041b      	lsls	r3, r3, #16
 800434a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	6919      	ldr	r1, [r3, #16]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	431a      	orrs	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	6959      	ldr	r1, [r3, #20]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	4b27      	ldr	r3, [pc, #156]	@ (800440c <HAL_LTDC_Init+0x19c>)
 800436e:	400b      	ands	r3, r1
 8004370:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004376:	041b      	lsls	r3, r3, #16
 8004378:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6959      	ldr	r1, [r3, #20]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	431a      	orrs	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	430a      	orrs	r2, r1
 800438e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004396:	021b      	lsls	r3, r3, #8
 8004398:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80043a0:	041b      	lsls	r3, r3, #16
 80043a2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80043b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80043ba:	68ba      	ldr	r2, [r7, #8]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4313      	orrs	r3, r2
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80043c6:	431a      	orrs	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	430a      	orrs	r2, r1
 80043ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f042 0206 	orr.w	r2, r2, #6
 80043de:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	699a      	ldr	r2, [r3, #24]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f042 0201 	orr.w	r2, r2, #1
 80043ee:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	f000f800 	.word	0xf000f800

08004410 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004410:	b5b0      	push	{r4, r5, r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004422:	2b01      	cmp	r3, #1
 8004424:	d101      	bne.n	800442a <HAL_LTDC_ConfigLayer+0x1a>
 8004426:	2302      	movs	r3, #2
 8004428:	e02c      	b.n	8004484 <HAL_LTDC_ConfigLayer+0x74>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2202      	movs	r2, #2
 8004436:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2134      	movs	r1, #52	@ 0x34
 8004440:	fb01 f303 	mul.w	r3, r1, r3
 8004444:	4413      	add	r3, r2
 8004446:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	4614      	mov	r4, r2
 800444e:	461d      	mov	r5, r3
 8004450:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004452:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004454:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004456:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004458:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800445a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800445c:	682b      	ldr	r3, [r5, #0]
 800445e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	68b9      	ldr	r1, [r7, #8]
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f000 f811 	bl	800448c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2201      	movs	r2, #1
 8004470:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bdb0      	pop	{r4, r5, r7, pc}

0800448c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800448c:	b480      	push	{r7}
 800448e:	b089      	sub	sp, #36	@ 0x24
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	0c1b      	lsrs	r3, r3, #16
 80044a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044a8:	4413      	add	r3, r2
 80044aa:	041b      	lsls	r3, r3, #16
 80044ac:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	461a      	mov	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	01db      	lsls	r3, r3, #7
 80044b8:	4413      	add	r3, r2
 80044ba:	3384      	adds	r3, #132	@ 0x84
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	6812      	ldr	r2, [r2, #0]
 80044c2:	4611      	mov	r1, r2
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	01d2      	lsls	r2, r2, #7
 80044c8:	440a      	add	r2, r1
 80044ca:	3284      	adds	r2, #132	@ 0x84
 80044cc:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80044d0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	0c1b      	lsrs	r3, r3, #16
 80044de:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80044e2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80044e4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4619      	mov	r1, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	01db      	lsls	r3, r3, #7
 80044f0:	440b      	add	r3, r1
 80044f2:	3384      	adds	r3, #132	@ 0x84
 80044f4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80044fa:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	68da      	ldr	r2, [r3, #12]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800450a:	4413      	add	r3, r2
 800450c:	041b      	lsls	r3, r3, #16
 800450e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	461a      	mov	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	01db      	lsls	r3, r3, #7
 800451a:	4413      	add	r3, r2
 800451c:	3384      	adds	r3, #132	@ 0x84
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	6812      	ldr	r2, [r2, #0]
 8004524:	4611      	mov	r1, r2
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	01d2      	lsls	r2, r2, #7
 800452a:	440a      	add	r2, r1
 800452c:	3284      	adds	r2, #132	@ 0x84
 800452e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004532:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	689a      	ldr	r2, [r3, #8]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004542:	4413      	add	r3, r2
 8004544:	1c5a      	adds	r2, r3, #1
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4619      	mov	r1, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	01db      	lsls	r3, r3, #7
 8004550:	440b      	add	r3, r1
 8004552:	3384      	adds	r3, #132	@ 0x84
 8004554:	4619      	mov	r1, r3
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	4313      	orrs	r3, r2
 800455a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	461a      	mov	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	01db      	lsls	r3, r3, #7
 8004566:	4413      	add	r3, r2
 8004568:	3384      	adds	r3, #132	@ 0x84
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	6812      	ldr	r2, [r2, #0]
 8004570:	4611      	mov	r1, r2
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	01d2      	lsls	r2, r2, #7
 8004576:	440a      	add	r2, r1
 8004578:	3284      	adds	r2, #132	@ 0x84
 800457a:	f023 0307 	bic.w	r3, r3, #7
 800457e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	461a      	mov	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	01db      	lsls	r3, r3, #7
 800458a:	4413      	add	r3, r2
 800458c:	3384      	adds	r3, #132	@ 0x84
 800458e:	461a      	mov	r2, r3
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800459c:	021b      	lsls	r3, r3, #8
 800459e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80045a6:	041b      	lsls	r3, r3, #16
 80045a8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	061b      	lsls	r3, r3, #24
 80045b0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	461a      	mov	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	01db      	lsls	r3, r3, #7
 80045bc:	4413      	add	r3, r2
 80045be:	3384      	adds	r3, #132	@ 0x84
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	461a      	mov	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	01db      	lsls	r3, r3, #7
 80045cc:	4413      	add	r3, r2
 80045ce:	3384      	adds	r3, #132	@ 0x84
 80045d0:	461a      	mov	r2, r3
 80045d2:	2300      	movs	r3, #0
 80045d4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80045dc:	461a      	mov	r2, r3
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	431a      	orrs	r2, r3
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	431a      	orrs	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4619      	mov	r1, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	01db      	lsls	r3, r3, #7
 80045f0:	440b      	add	r3, r1
 80045f2:	3384      	adds	r3, #132	@ 0x84
 80045f4:	4619      	mov	r1, r3
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	461a      	mov	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	01db      	lsls	r3, r3, #7
 8004606:	4413      	add	r3, r2
 8004608:	3384      	adds	r3, #132	@ 0x84
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	6812      	ldr	r2, [r2, #0]
 8004610:	4611      	mov	r1, r2
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	01d2      	lsls	r2, r2, #7
 8004616:	440a      	add	r2, r1
 8004618:	3284      	adds	r2, #132	@ 0x84
 800461a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800461e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	461a      	mov	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	01db      	lsls	r3, r3, #7
 800462a:	4413      	add	r3, r2
 800462c:	3384      	adds	r3, #132	@ 0x84
 800462e:	461a      	mov	r2, r3
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	461a      	mov	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	01db      	lsls	r3, r3, #7
 8004640:	4413      	add	r3, r2
 8004642:	3384      	adds	r3, #132	@ 0x84
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	6812      	ldr	r2, [r2, #0]
 800464a:	4611      	mov	r1, r2
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	01d2      	lsls	r2, r2, #7
 8004650:	440a      	add	r2, r1
 8004652:	3284      	adds	r2, #132	@ 0x84
 8004654:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004658:	f023 0307 	bic.w	r3, r3, #7
 800465c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	69da      	ldr	r2, [r3, #28]
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	68f9      	ldr	r1, [r7, #12]
 8004668:	6809      	ldr	r1, [r1, #0]
 800466a:	4608      	mov	r0, r1
 800466c:	6879      	ldr	r1, [r7, #4]
 800466e:	01c9      	lsls	r1, r1, #7
 8004670:	4401      	add	r1, r0
 8004672:	3184      	adds	r1, #132	@ 0x84
 8004674:	4313      	orrs	r3, r2
 8004676:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	461a      	mov	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	01db      	lsls	r3, r3, #7
 8004682:	4413      	add	r3, r2
 8004684:	3384      	adds	r3, #132	@ 0x84
 8004686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	461a      	mov	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	01db      	lsls	r3, r3, #7
 8004692:	4413      	add	r3, r2
 8004694:	3384      	adds	r3, #132	@ 0x84
 8004696:	461a      	mov	r2, r3
 8004698:	2300      	movs	r3, #0
 800469a:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	461a      	mov	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	01db      	lsls	r3, r3, #7
 80046a6:	4413      	add	r3, r2
 80046a8:	3384      	adds	r3, #132	@ 0x84
 80046aa:	461a      	mov	r2, r3
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b0:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d102      	bne.n	80046c0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80046ba:	2304      	movs	r3, #4
 80046bc:	61fb      	str	r3, [r7, #28]
 80046be:	e01b      	b.n	80046f8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d102      	bne.n	80046ce <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80046c8:	2303      	movs	r3, #3
 80046ca:	61fb      	str	r3, [r7, #28]
 80046cc:	e014      	b.n	80046f8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	2b04      	cmp	r3, #4
 80046d4:	d00b      	beq.n	80046ee <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d007      	beq.n	80046ee <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80046e2:	2b03      	cmp	r3, #3
 80046e4:	d003      	beq.n	80046ee <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80046ea:	2b07      	cmp	r3, #7
 80046ec:	d102      	bne.n	80046f4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80046ee:	2302      	movs	r3, #2
 80046f0:	61fb      	str	r3, [r7, #28]
 80046f2:	e001      	b.n	80046f8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80046f4:	2301      	movs	r3, #1
 80046f6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	461a      	mov	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	01db      	lsls	r3, r3, #7
 8004702:	4413      	add	r3, r2
 8004704:	3384      	adds	r3, #132	@ 0x84
 8004706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	6812      	ldr	r2, [r2, #0]
 800470c:	4611      	mov	r1, r2
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	01d2      	lsls	r2, r2, #7
 8004712:	440a      	add	r2, r1
 8004714:	3284      	adds	r2, #132	@ 0x84
 8004716:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800471a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004720:	69fa      	ldr	r2, [r7, #28]
 8004722:	fb02 f303 	mul.w	r3, r2, r3
 8004726:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	6859      	ldr	r1, [r3, #4]
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	1acb      	subs	r3, r1, r3
 8004732:	69f9      	ldr	r1, [r7, #28]
 8004734:	fb01 f303 	mul.w	r3, r1, r3
 8004738:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800473a:	68f9      	ldr	r1, [r7, #12]
 800473c:	6809      	ldr	r1, [r1, #0]
 800473e:	4608      	mov	r0, r1
 8004740:	6879      	ldr	r1, [r7, #4]
 8004742:	01c9      	lsls	r1, r1, #7
 8004744:	4401      	add	r1, r0
 8004746:	3184      	adds	r1, #132	@ 0x84
 8004748:	4313      	orrs	r3, r2
 800474a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	461a      	mov	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	01db      	lsls	r3, r3, #7
 8004756:	4413      	add	r3, r2
 8004758:	3384      	adds	r3, #132	@ 0x84
 800475a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	6812      	ldr	r2, [r2, #0]
 8004760:	4611      	mov	r1, r2
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	01d2      	lsls	r2, r2, #7
 8004766:	440a      	add	r2, r1
 8004768:	3284      	adds	r2, #132	@ 0x84
 800476a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800476e:	f023 0307 	bic.w	r3, r3, #7
 8004772:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	461a      	mov	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	01db      	lsls	r3, r3, #7
 800477e:	4413      	add	r3, r2
 8004780:	3384      	adds	r3, #132	@ 0x84
 8004782:	461a      	mov	r2, r3
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004788:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	461a      	mov	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	01db      	lsls	r3, r3, #7
 8004794:	4413      	add	r3, r2
 8004796:	3384      	adds	r3, #132	@ 0x84
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	6812      	ldr	r2, [r2, #0]
 800479e:	4611      	mov	r1, r2
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	01d2      	lsls	r2, r2, #7
 80047a4:	440a      	add	r2, r1
 80047a6:	3284      	adds	r2, #132	@ 0x84
 80047a8:	f043 0301 	orr.w	r3, r3, #1
 80047ac:	6013      	str	r3, [r2, #0]
}
 80047ae:	bf00      	nop
 80047b0:	3724      	adds	r7, #36	@ 0x24
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
	...

080047bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e267      	b.n	8004c9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d075      	beq.n	80048c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80047da:	4b88      	ldr	r3, [pc, #544]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 030c 	and.w	r3, r3, #12
 80047e2:	2b04      	cmp	r3, #4
 80047e4:	d00c      	beq.n	8004800 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047e6:	4b85      	ldr	r3, [pc, #532]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80047ee:	2b08      	cmp	r3, #8
 80047f0:	d112      	bne.n	8004818 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047f2:	4b82      	ldr	r3, [pc, #520]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047fe:	d10b      	bne.n	8004818 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004800:	4b7e      	ldr	r3, [pc, #504]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d05b      	beq.n	80048c4 <HAL_RCC_OscConfig+0x108>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d157      	bne.n	80048c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e242      	b.n	8004c9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004820:	d106      	bne.n	8004830 <HAL_RCC_OscConfig+0x74>
 8004822:	4b76      	ldr	r3, [pc, #472]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a75      	ldr	r2, [pc, #468]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 8004828:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800482c:	6013      	str	r3, [r2, #0]
 800482e:	e01d      	b.n	800486c <HAL_RCC_OscConfig+0xb0>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004838:	d10c      	bne.n	8004854 <HAL_RCC_OscConfig+0x98>
 800483a:	4b70      	ldr	r3, [pc, #448]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a6f      	ldr	r2, [pc, #444]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 8004840:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004844:	6013      	str	r3, [r2, #0]
 8004846:	4b6d      	ldr	r3, [pc, #436]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a6c      	ldr	r2, [pc, #432]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 800484c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004850:	6013      	str	r3, [r2, #0]
 8004852:	e00b      	b.n	800486c <HAL_RCC_OscConfig+0xb0>
 8004854:	4b69      	ldr	r3, [pc, #420]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a68      	ldr	r2, [pc, #416]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 800485a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800485e:	6013      	str	r3, [r2, #0]
 8004860:	4b66      	ldr	r3, [pc, #408]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a65      	ldr	r2, [pc, #404]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 8004866:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800486a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d013      	beq.n	800489c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004874:	f7fe f874 	bl	8002960 <HAL_GetTick>
 8004878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800487a:	e008      	b.n	800488e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800487c:	f7fe f870 	bl	8002960 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b64      	cmp	r3, #100	@ 0x64
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e207      	b.n	8004c9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800488e:	4b5b      	ldr	r3, [pc, #364]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d0f0      	beq.n	800487c <HAL_RCC_OscConfig+0xc0>
 800489a:	e014      	b.n	80048c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800489c:	f7fe f860 	bl	8002960 <HAL_GetTick>
 80048a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048a2:	e008      	b.n	80048b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048a4:	f7fe f85c 	bl	8002960 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b64      	cmp	r3, #100	@ 0x64
 80048b0:	d901      	bls.n	80048b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e1f3      	b.n	8004c9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048b6:	4b51      	ldr	r3, [pc, #324]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1f0      	bne.n	80048a4 <HAL_RCC_OscConfig+0xe8>
 80048c2:	e000      	b.n	80048c6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d063      	beq.n	800499a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80048d2:	4b4a      	ldr	r3, [pc, #296]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f003 030c 	and.w	r3, r3, #12
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00b      	beq.n	80048f6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048de:	4b47      	ldr	r3, [pc, #284]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80048e6:	2b08      	cmp	r3, #8
 80048e8:	d11c      	bne.n	8004924 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048ea:	4b44      	ldr	r3, [pc, #272]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d116      	bne.n	8004924 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048f6:	4b41      	ldr	r3, [pc, #260]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d005      	beq.n	800490e <HAL_RCC_OscConfig+0x152>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d001      	beq.n	800490e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e1c7      	b.n	8004c9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800490e:	4b3b      	ldr	r3, [pc, #236]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	00db      	lsls	r3, r3, #3
 800491c:	4937      	ldr	r1, [pc, #220]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 800491e:	4313      	orrs	r3, r2
 8004920:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004922:	e03a      	b.n	800499a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d020      	beq.n	800496e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800492c:	4b34      	ldr	r3, [pc, #208]	@ (8004a00 <HAL_RCC_OscConfig+0x244>)
 800492e:	2201      	movs	r2, #1
 8004930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004932:	f7fe f815 	bl	8002960 <HAL_GetTick>
 8004936:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004938:	e008      	b.n	800494c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800493a:	f7fe f811 	bl	8002960 <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	2b02      	cmp	r3, #2
 8004946:	d901      	bls.n	800494c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e1a8      	b.n	8004c9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800494c:	4b2b      	ldr	r3, [pc, #172]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0302 	and.w	r3, r3, #2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d0f0      	beq.n	800493a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004958:	4b28      	ldr	r3, [pc, #160]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	00db      	lsls	r3, r3, #3
 8004966:	4925      	ldr	r1, [pc, #148]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 8004968:	4313      	orrs	r3, r2
 800496a:	600b      	str	r3, [r1, #0]
 800496c:	e015      	b.n	800499a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800496e:	4b24      	ldr	r3, [pc, #144]	@ (8004a00 <HAL_RCC_OscConfig+0x244>)
 8004970:	2200      	movs	r2, #0
 8004972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004974:	f7fd fff4 	bl	8002960 <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800497a:	e008      	b.n	800498e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800497c:	f7fd fff0 	bl	8002960 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b02      	cmp	r3, #2
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e187      	b.n	8004c9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800498e:	4b1b      	ldr	r3, [pc, #108]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1f0      	bne.n	800497c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0308 	and.w	r3, r3, #8
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d036      	beq.n	8004a14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d016      	beq.n	80049dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049ae:	4b15      	ldr	r3, [pc, #84]	@ (8004a04 <HAL_RCC_OscConfig+0x248>)
 80049b0:	2201      	movs	r2, #1
 80049b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b4:	f7fd ffd4 	bl	8002960 <HAL_GetTick>
 80049b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049bc:	f7fd ffd0 	bl	8002960 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e167      	b.n	8004c9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049ce:	4b0b      	ldr	r3, [pc, #44]	@ (80049fc <HAL_RCC_OscConfig+0x240>)
 80049d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d0f0      	beq.n	80049bc <HAL_RCC_OscConfig+0x200>
 80049da:	e01b      	b.n	8004a14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049dc:	4b09      	ldr	r3, [pc, #36]	@ (8004a04 <HAL_RCC_OscConfig+0x248>)
 80049de:	2200      	movs	r2, #0
 80049e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049e2:	f7fd ffbd 	bl	8002960 <HAL_GetTick>
 80049e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049e8:	e00e      	b.n	8004a08 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049ea:	f7fd ffb9 	bl	8002960 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d907      	bls.n	8004a08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e150      	b.n	8004c9e <HAL_RCC_OscConfig+0x4e2>
 80049fc:	40023800 	.word	0x40023800
 8004a00:	42470000 	.word	0x42470000
 8004a04:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a08:	4b88      	ldr	r3, [pc, #544]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004a0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1ea      	bne.n	80049ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f000 8097 	beq.w	8004b50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a22:	2300      	movs	r3, #0
 8004a24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a26:	4b81      	ldr	r3, [pc, #516]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10f      	bne.n	8004a52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a32:	2300      	movs	r3, #0
 8004a34:	60bb      	str	r3, [r7, #8]
 8004a36:	4b7d      	ldr	r3, [pc, #500]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a3a:	4a7c      	ldr	r2, [pc, #496]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004a3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a40:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a42:	4b7a      	ldr	r3, [pc, #488]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a4a:	60bb      	str	r3, [r7, #8]
 8004a4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a52:	4b77      	ldr	r3, [pc, #476]	@ (8004c30 <HAL_RCC_OscConfig+0x474>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d118      	bne.n	8004a90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a5e:	4b74      	ldr	r3, [pc, #464]	@ (8004c30 <HAL_RCC_OscConfig+0x474>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a73      	ldr	r2, [pc, #460]	@ (8004c30 <HAL_RCC_OscConfig+0x474>)
 8004a64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a6a:	f7fd ff79 	bl	8002960 <HAL_GetTick>
 8004a6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a70:	e008      	b.n	8004a84 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a72:	f7fd ff75 	bl	8002960 <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d901      	bls.n	8004a84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e10c      	b.n	8004c9e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a84:	4b6a      	ldr	r3, [pc, #424]	@ (8004c30 <HAL_RCC_OscConfig+0x474>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d0f0      	beq.n	8004a72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d106      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x2ea>
 8004a98:	4b64      	ldr	r3, [pc, #400]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a9c:	4a63      	ldr	r2, [pc, #396]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004a9e:	f043 0301 	orr.w	r3, r3, #1
 8004aa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004aa4:	e01c      	b.n	8004ae0 <HAL_RCC_OscConfig+0x324>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	2b05      	cmp	r3, #5
 8004aac:	d10c      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x30c>
 8004aae:	4b5f      	ldr	r3, [pc, #380]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ab2:	4a5e      	ldr	r2, [pc, #376]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004ab4:	f043 0304 	orr.w	r3, r3, #4
 8004ab8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004aba:	4b5c      	ldr	r3, [pc, #368]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004abe:	4a5b      	ldr	r2, [pc, #364]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004ac0:	f043 0301 	orr.w	r3, r3, #1
 8004ac4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ac6:	e00b      	b.n	8004ae0 <HAL_RCC_OscConfig+0x324>
 8004ac8:	4b58      	ldr	r3, [pc, #352]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004aca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004acc:	4a57      	ldr	r2, [pc, #348]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004ace:	f023 0301 	bic.w	r3, r3, #1
 8004ad2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ad4:	4b55      	ldr	r3, [pc, #340]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ad8:	4a54      	ldr	r2, [pc, #336]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004ada:	f023 0304 	bic.w	r3, r3, #4
 8004ade:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d015      	beq.n	8004b14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ae8:	f7fd ff3a 	bl	8002960 <HAL_GetTick>
 8004aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aee:	e00a      	b.n	8004b06 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004af0:	f7fd ff36 	bl	8002960 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d901      	bls.n	8004b06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e0cb      	b.n	8004c9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b06:	4b49      	ldr	r3, [pc, #292]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d0ee      	beq.n	8004af0 <HAL_RCC_OscConfig+0x334>
 8004b12:	e014      	b.n	8004b3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b14:	f7fd ff24 	bl	8002960 <HAL_GetTick>
 8004b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b1a:	e00a      	b.n	8004b32 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b1c:	f7fd ff20 	bl	8002960 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e0b5      	b.n	8004c9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b32:	4b3e      	ldr	r3, [pc, #248]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1ee      	bne.n	8004b1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b3e:	7dfb      	ldrb	r3, [r7, #23]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d105      	bne.n	8004b50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b44:	4b39      	ldr	r3, [pc, #228]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b48:	4a38      	ldr	r2, [pc, #224]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004b4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b4e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f000 80a1 	beq.w	8004c9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b5a:	4b34      	ldr	r3, [pc, #208]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f003 030c 	and.w	r3, r3, #12
 8004b62:	2b08      	cmp	r3, #8
 8004b64:	d05c      	beq.n	8004c20 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d141      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b6e:	4b31      	ldr	r3, [pc, #196]	@ (8004c34 <HAL_RCC_OscConfig+0x478>)
 8004b70:	2200      	movs	r2, #0
 8004b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b74:	f7fd fef4 	bl	8002960 <HAL_GetTick>
 8004b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b7a:	e008      	b.n	8004b8e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b7c:	f7fd fef0 	bl	8002960 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e087      	b.n	8004c9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b8e:	4b27      	ldr	r3, [pc, #156]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1f0      	bne.n	8004b7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	69da      	ldr	r2, [r3, #28]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba8:	019b      	lsls	r3, r3, #6
 8004baa:	431a      	orrs	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb0:	085b      	lsrs	r3, r3, #1
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	041b      	lsls	r3, r3, #16
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bbc:	061b      	lsls	r3, r3, #24
 8004bbe:	491b      	ldr	r1, [pc, #108]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8004c34 <HAL_RCC_OscConfig+0x478>)
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bca:	f7fd fec9 	bl	8002960 <HAL_GetTick>
 8004bce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bd0:	e008      	b.n	8004be4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bd2:	f7fd fec5 	bl	8002960 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e05c      	b.n	8004c9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004be4:	4b11      	ldr	r3, [pc, #68]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d0f0      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x416>
 8004bf0:	e054      	b.n	8004c9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bf2:	4b10      	ldr	r3, [pc, #64]	@ (8004c34 <HAL_RCC_OscConfig+0x478>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf8:	f7fd feb2 	bl	8002960 <HAL_GetTick>
 8004bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bfe:	e008      	b.n	8004c12 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c00:	f7fd feae 	bl	8002960 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e045      	b.n	8004c9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c12:	4b06      	ldr	r3, [pc, #24]	@ (8004c2c <HAL_RCC_OscConfig+0x470>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1f0      	bne.n	8004c00 <HAL_RCC_OscConfig+0x444>
 8004c1e:	e03d      	b.n	8004c9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d107      	bne.n	8004c38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e038      	b.n	8004c9e <HAL_RCC_OscConfig+0x4e2>
 8004c2c:	40023800 	.word	0x40023800
 8004c30:	40007000 	.word	0x40007000
 8004c34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c38:	4b1b      	ldr	r3, [pc, #108]	@ (8004ca8 <HAL_RCC_OscConfig+0x4ec>)
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d028      	beq.n	8004c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d121      	bne.n	8004c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d11a      	bne.n	8004c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004c68:	4013      	ands	r3, r2
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004c6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d111      	bne.n	8004c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c7e:	085b      	lsrs	r3, r3, #1
 8004c80:	3b01      	subs	r3, #1
 8004c82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d107      	bne.n	8004c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d001      	beq.n	8004c9c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e000      	b.n	8004c9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3718      	adds	r7, #24
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	40023800 	.word	0x40023800

08004cac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d101      	bne.n	8004cc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e0cc      	b.n	8004e5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cc0:	4b68      	ldr	r3, [pc, #416]	@ (8004e64 <HAL_RCC_ClockConfig+0x1b8>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 030f 	and.w	r3, r3, #15
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d90c      	bls.n	8004ce8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cce:	4b65      	ldr	r3, [pc, #404]	@ (8004e64 <HAL_RCC_ClockConfig+0x1b8>)
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	b2d2      	uxtb	r2, r2
 8004cd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cd6:	4b63      	ldr	r3, [pc, #396]	@ (8004e64 <HAL_RCC_ClockConfig+0x1b8>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 030f 	and.w	r3, r3, #15
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d001      	beq.n	8004ce8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e0b8      	b.n	8004e5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d020      	beq.n	8004d36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0304 	and.w	r3, r3, #4
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d005      	beq.n	8004d0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d00:	4b59      	ldr	r3, [pc, #356]	@ (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	4a58      	ldr	r2, [pc, #352]	@ (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004d06:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004d0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0308 	and.w	r3, r3, #8
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d005      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d18:	4b53      	ldr	r3, [pc, #332]	@ (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	4a52      	ldr	r2, [pc, #328]	@ (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004d22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d24:	4b50      	ldr	r3, [pc, #320]	@ (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	494d      	ldr	r1, [pc, #308]	@ (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d044      	beq.n	8004dcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d107      	bne.n	8004d5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d4a:	4b47      	ldr	r3, [pc, #284]	@ (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d119      	bne.n	8004d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e07f      	b.n	8004e5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d003      	beq.n	8004d6a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d66:	2b03      	cmp	r3, #3
 8004d68:	d107      	bne.n	8004d7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d6a:	4b3f      	ldr	r3, [pc, #252]	@ (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d109      	bne.n	8004d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e06f      	b.n	8004e5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d7a:	4b3b      	ldr	r3, [pc, #236]	@ (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e067      	b.n	8004e5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d8a:	4b37      	ldr	r3, [pc, #220]	@ (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f023 0203 	bic.w	r2, r3, #3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	4934      	ldr	r1, [pc, #208]	@ (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d9c:	f7fd fde0 	bl	8002960 <HAL_GetTick>
 8004da0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004da2:	e00a      	b.n	8004dba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004da4:	f7fd fddc 	bl	8002960 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e04f      	b.n	8004e5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dba:	4b2b      	ldr	r3, [pc, #172]	@ (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f003 020c 	and.w	r2, r3, #12
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d1eb      	bne.n	8004da4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004dcc:	4b25      	ldr	r3, [pc, #148]	@ (8004e64 <HAL_RCC_ClockConfig+0x1b8>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 030f 	and.w	r3, r3, #15
 8004dd4:	683a      	ldr	r2, [r7, #0]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d20c      	bcs.n	8004df4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dda:	4b22      	ldr	r3, [pc, #136]	@ (8004e64 <HAL_RCC_ClockConfig+0x1b8>)
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	b2d2      	uxtb	r2, r2
 8004de0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004de2:	4b20      	ldr	r3, [pc, #128]	@ (8004e64 <HAL_RCC_ClockConfig+0x1b8>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 030f 	and.w	r3, r3, #15
 8004dea:	683a      	ldr	r2, [r7, #0]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d001      	beq.n	8004df4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e032      	b.n	8004e5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0304 	and.w	r3, r3, #4
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d008      	beq.n	8004e12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e00:	4b19      	ldr	r3, [pc, #100]	@ (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	4916      	ldr	r1, [pc, #88]	@ (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0308 	and.w	r3, r3, #8
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d009      	beq.n	8004e32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e1e:	4b12      	ldr	r3, [pc, #72]	@ (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	00db      	lsls	r3, r3, #3
 8004e2c:	490e      	ldr	r1, [pc, #56]	@ (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e32:	f000 f821 	bl	8004e78 <HAL_RCC_GetSysClockFreq>
 8004e36:	4602      	mov	r2, r0
 8004e38:	4b0b      	ldr	r3, [pc, #44]	@ (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	091b      	lsrs	r3, r3, #4
 8004e3e:	f003 030f 	and.w	r3, r3, #15
 8004e42:	490a      	ldr	r1, [pc, #40]	@ (8004e6c <HAL_RCC_ClockConfig+0x1c0>)
 8004e44:	5ccb      	ldrb	r3, [r1, r3]
 8004e46:	fa22 f303 	lsr.w	r3, r2, r3
 8004e4a:	4a09      	ldr	r2, [pc, #36]	@ (8004e70 <HAL_RCC_ClockConfig+0x1c4>)
 8004e4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004e4e:	4b09      	ldr	r3, [pc, #36]	@ (8004e74 <HAL_RCC_ClockConfig+0x1c8>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7fd fd40 	bl	80028d8 <HAL_InitTick>

  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	40023c00 	.word	0x40023c00
 8004e68:	40023800 	.word	0x40023800
 8004e6c:	08007248 	.word	0x08007248
 8004e70:	20000010 	.word	0x20000010
 8004e74:	20000014 	.word	0x20000014

08004e78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e7c:	b094      	sub	sp, #80	@ 0x50
 8004e7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004e84:	2300      	movs	r3, #0
 8004e86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e90:	4b79      	ldr	r3, [pc, #484]	@ (8005078 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f003 030c 	and.w	r3, r3, #12
 8004e98:	2b08      	cmp	r3, #8
 8004e9a:	d00d      	beq.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x40>
 8004e9c:	2b08      	cmp	r3, #8
 8004e9e:	f200 80e1 	bhi.w	8005064 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d002      	beq.n	8004eac <HAL_RCC_GetSysClockFreq+0x34>
 8004ea6:	2b04      	cmp	r3, #4
 8004ea8:	d003      	beq.n	8004eb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004eaa:	e0db      	b.n	8005064 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004eac:	4b73      	ldr	r3, [pc, #460]	@ (800507c <HAL_RCC_GetSysClockFreq+0x204>)
 8004eae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004eb0:	e0db      	b.n	800506a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004eb2:	4b73      	ldr	r3, [pc, #460]	@ (8005080 <HAL_RCC_GetSysClockFreq+0x208>)
 8004eb4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004eb6:	e0d8      	b.n	800506a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004eb8:	4b6f      	ldr	r3, [pc, #444]	@ (8005078 <HAL_RCC_GetSysClockFreq+0x200>)
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ec0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ec2:	4b6d      	ldr	r3, [pc, #436]	@ (8005078 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d063      	beq.n	8004f96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ece:	4b6a      	ldr	r3, [pc, #424]	@ (8005078 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	099b      	lsrs	r3, r3, #6
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ed8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004edc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ee0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ee6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004eea:	4622      	mov	r2, r4
 8004eec:	462b      	mov	r3, r5
 8004eee:	f04f 0000 	mov.w	r0, #0
 8004ef2:	f04f 0100 	mov.w	r1, #0
 8004ef6:	0159      	lsls	r1, r3, #5
 8004ef8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004efc:	0150      	lsls	r0, r2, #5
 8004efe:	4602      	mov	r2, r0
 8004f00:	460b      	mov	r3, r1
 8004f02:	4621      	mov	r1, r4
 8004f04:	1a51      	subs	r1, r2, r1
 8004f06:	6139      	str	r1, [r7, #16]
 8004f08:	4629      	mov	r1, r5
 8004f0a:	eb63 0301 	sbc.w	r3, r3, r1
 8004f0e:	617b      	str	r3, [r7, #20]
 8004f10:	f04f 0200 	mov.w	r2, #0
 8004f14:	f04f 0300 	mov.w	r3, #0
 8004f18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f1c:	4659      	mov	r1, fp
 8004f1e:	018b      	lsls	r3, r1, #6
 8004f20:	4651      	mov	r1, sl
 8004f22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f26:	4651      	mov	r1, sl
 8004f28:	018a      	lsls	r2, r1, #6
 8004f2a:	4651      	mov	r1, sl
 8004f2c:	ebb2 0801 	subs.w	r8, r2, r1
 8004f30:	4659      	mov	r1, fp
 8004f32:	eb63 0901 	sbc.w	r9, r3, r1
 8004f36:	f04f 0200 	mov.w	r2, #0
 8004f3a:	f04f 0300 	mov.w	r3, #0
 8004f3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f4a:	4690      	mov	r8, r2
 8004f4c:	4699      	mov	r9, r3
 8004f4e:	4623      	mov	r3, r4
 8004f50:	eb18 0303 	adds.w	r3, r8, r3
 8004f54:	60bb      	str	r3, [r7, #8]
 8004f56:	462b      	mov	r3, r5
 8004f58:	eb49 0303 	adc.w	r3, r9, r3
 8004f5c:	60fb      	str	r3, [r7, #12]
 8004f5e:	f04f 0200 	mov.w	r2, #0
 8004f62:	f04f 0300 	mov.w	r3, #0
 8004f66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004f6a:	4629      	mov	r1, r5
 8004f6c:	024b      	lsls	r3, r1, #9
 8004f6e:	4621      	mov	r1, r4
 8004f70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f74:	4621      	mov	r1, r4
 8004f76:	024a      	lsls	r2, r1, #9
 8004f78:	4610      	mov	r0, r2
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f7e:	2200      	movs	r2, #0
 8004f80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004f88:	f7fb f930 	bl	80001ec <__aeabi_uldivmod>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	460b      	mov	r3, r1
 8004f90:	4613      	mov	r3, r2
 8004f92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f94:	e058      	b.n	8005048 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f96:	4b38      	ldr	r3, [pc, #224]	@ (8005078 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	099b      	lsrs	r3, r3, #6
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	4611      	mov	r1, r2
 8004fa2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004fa6:	623b      	str	r3, [r7, #32]
 8004fa8:	2300      	movs	r3, #0
 8004faa:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004fb0:	4642      	mov	r2, r8
 8004fb2:	464b      	mov	r3, r9
 8004fb4:	f04f 0000 	mov.w	r0, #0
 8004fb8:	f04f 0100 	mov.w	r1, #0
 8004fbc:	0159      	lsls	r1, r3, #5
 8004fbe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fc2:	0150      	lsls	r0, r2, #5
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	4641      	mov	r1, r8
 8004fca:	ebb2 0a01 	subs.w	sl, r2, r1
 8004fce:	4649      	mov	r1, r9
 8004fd0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004fd4:	f04f 0200 	mov.w	r2, #0
 8004fd8:	f04f 0300 	mov.w	r3, #0
 8004fdc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004fe0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004fe4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004fe8:	ebb2 040a 	subs.w	r4, r2, sl
 8004fec:	eb63 050b 	sbc.w	r5, r3, fp
 8004ff0:	f04f 0200 	mov.w	r2, #0
 8004ff4:	f04f 0300 	mov.w	r3, #0
 8004ff8:	00eb      	lsls	r3, r5, #3
 8004ffa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ffe:	00e2      	lsls	r2, r4, #3
 8005000:	4614      	mov	r4, r2
 8005002:	461d      	mov	r5, r3
 8005004:	4643      	mov	r3, r8
 8005006:	18e3      	adds	r3, r4, r3
 8005008:	603b      	str	r3, [r7, #0]
 800500a:	464b      	mov	r3, r9
 800500c:	eb45 0303 	adc.w	r3, r5, r3
 8005010:	607b      	str	r3, [r7, #4]
 8005012:	f04f 0200 	mov.w	r2, #0
 8005016:	f04f 0300 	mov.w	r3, #0
 800501a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800501e:	4629      	mov	r1, r5
 8005020:	028b      	lsls	r3, r1, #10
 8005022:	4621      	mov	r1, r4
 8005024:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005028:	4621      	mov	r1, r4
 800502a:	028a      	lsls	r2, r1, #10
 800502c:	4610      	mov	r0, r2
 800502e:	4619      	mov	r1, r3
 8005030:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005032:	2200      	movs	r2, #0
 8005034:	61bb      	str	r3, [r7, #24]
 8005036:	61fa      	str	r2, [r7, #28]
 8005038:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800503c:	f7fb f8d6 	bl	80001ec <__aeabi_uldivmod>
 8005040:	4602      	mov	r2, r0
 8005042:	460b      	mov	r3, r1
 8005044:	4613      	mov	r3, r2
 8005046:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005048:	4b0b      	ldr	r3, [pc, #44]	@ (8005078 <HAL_RCC_GetSysClockFreq+0x200>)
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	0c1b      	lsrs	r3, r3, #16
 800504e:	f003 0303 	and.w	r3, r3, #3
 8005052:	3301      	adds	r3, #1
 8005054:	005b      	lsls	r3, r3, #1
 8005056:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005058:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800505a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800505c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005060:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005062:	e002      	b.n	800506a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005064:	4b05      	ldr	r3, [pc, #20]	@ (800507c <HAL_RCC_GetSysClockFreq+0x204>)
 8005066:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005068:	bf00      	nop
    }
  }
  return sysclockfreq;
 800506a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800506c:	4618      	mov	r0, r3
 800506e:	3750      	adds	r7, #80	@ 0x50
 8005070:	46bd      	mov	sp, r7
 8005072:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005076:	bf00      	nop
 8005078:	40023800 	.word	0x40023800
 800507c:	00f42400 	.word	0x00f42400
 8005080:	007a1200 	.word	0x007a1200

08005084 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005084:	b480      	push	{r7}
 8005086:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005088:	4b03      	ldr	r3, [pc, #12]	@ (8005098 <HAL_RCC_GetHCLKFreq+0x14>)
 800508a:	681b      	ldr	r3, [r3, #0]
}
 800508c:	4618      	mov	r0, r3
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	20000010 	.word	0x20000010

0800509c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80050a0:	f7ff fff0 	bl	8005084 <HAL_RCC_GetHCLKFreq>
 80050a4:	4602      	mov	r2, r0
 80050a6:	4b05      	ldr	r3, [pc, #20]	@ (80050bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	0a9b      	lsrs	r3, r3, #10
 80050ac:	f003 0307 	and.w	r3, r3, #7
 80050b0:	4903      	ldr	r1, [pc, #12]	@ (80050c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050b2:	5ccb      	ldrb	r3, [r1, r3]
 80050b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	40023800 	.word	0x40023800
 80050c0:	08007258 	.word	0x08007258

080050c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050cc:	2300      	movs	r3, #0
 80050ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80050d0:	2300      	movs	r3, #0
 80050d2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0301 	and.w	r3, r3, #1
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d10b      	bne.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d105      	bne.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d075      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80050f8:	4b91      	ldr	r3, [pc, #580]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80050fa:	2200      	movs	r2, #0
 80050fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050fe:	f7fd fc2f 	bl	8002960 <HAL_GetTick>
 8005102:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005104:	e008      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005106:	f7fd fc2b 	bl	8002960 <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	2b02      	cmp	r3, #2
 8005112:	d901      	bls.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e189      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005118:	4b8a      	ldr	r3, [pc, #552]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1f0      	bne.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0301 	and.w	r3, r3, #1
 800512c:	2b00      	cmp	r3, #0
 800512e:	d009      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	019a      	lsls	r2, r3, #6
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	071b      	lsls	r3, r3, #28
 800513c:	4981      	ldr	r1, [pc, #516]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800513e:	4313      	orrs	r3, r2
 8005140:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0302 	and.w	r3, r3, #2
 800514c:	2b00      	cmp	r3, #0
 800514e:	d01f      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005150:	4b7c      	ldr	r3, [pc, #496]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005152:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005156:	0f1b      	lsrs	r3, r3, #28
 8005158:	f003 0307 	and.w	r3, r3, #7
 800515c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	019a      	lsls	r2, r3, #6
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	061b      	lsls	r3, r3, #24
 800516a:	431a      	orrs	r2, r3
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	071b      	lsls	r3, r3, #28
 8005170:	4974      	ldr	r1, [pc, #464]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005172:	4313      	orrs	r3, r2
 8005174:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005178:	4b72      	ldr	r3, [pc, #456]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800517a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800517e:	f023 021f 	bic.w	r2, r3, #31
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	3b01      	subs	r3, #1
 8005188:	496e      	ldr	r1, [pc, #440]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800518a:	4313      	orrs	r3, r2
 800518c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00d      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	019a      	lsls	r2, r3, #6
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	061b      	lsls	r3, r3, #24
 80051a8:	431a      	orrs	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	071b      	lsls	r3, r3, #28
 80051b0:	4964      	ldr	r1, [pc, #400]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80051b8:	4b61      	ldr	r3, [pc, #388]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80051ba:	2201      	movs	r2, #1
 80051bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051be:	f7fd fbcf 	bl	8002960 <HAL_GetTick>
 80051c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051c4:	e008      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80051c6:	f7fd fbcb 	bl	8002960 <HAL_GetTick>
 80051ca:	4602      	mov	r2, r0
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d901      	bls.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e129      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051d8:	4b5a      	ldr	r3, [pc, #360]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d0f0      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0304 	and.w	r3, r3, #4
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d105      	bne.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d079      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80051fc:	4b52      	ldr	r3, [pc, #328]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80051fe:	2200      	movs	r2, #0
 8005200:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005202:	f7fd fbad 	bl	8002960 <HAL_GetTick>
 8005206:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005208:	e008      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800520a:	f7fd fba9 	bl	8002960 <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	2b02      	cmp	r3, #2
 8005216:	d901      	bls.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e107      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800521c:	4b49      	ldr	r3, [pc, #292]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005224:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005228:	d0ef      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0304 	and.w	r3, r3, #4
 8005232:	2b00      	cmp	r3, #0
 8005234:	d020      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005236:	4b43      	ldr	r3, [pc, #268]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800523c:	0f1b      	lsrs	r3, r3, #28
 800523e:	f003 0307 	and.w	r3, r3, #7
 8005242:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	019a      	lsls	r2, r3, #6
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	061b      	lsls	r3, r3, #24
 8005250:	431a      	orrs	r2, r3
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	071b      	lsls	r3, r3, #28
 8005256:	493b      	ldr	r1, [pc, #236]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005258:	4313      	orrs	r3, r2
 800525a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800525e:	4b39      	ldr	r3, [pc, #228]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005260:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005264:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	3b01      	subs	r3, #1
 800526e:	021b      	lsls	r3, r3, #8
 8005270:	4934      	ldr	r1, [pc, #208]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005272:	4313      	orrs	r3, r2
 8005274:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0308 	and.w	r3, r3, #8
 8005280:	2b00      	cmp	r3, #0
 8005282:	d01e      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005284:	4b2f      	ldr	r3, [pc, #188]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800528a:	0e1b      	lsrs	r3, r3, #24
 800528c:	f003 030f 	and.w	r3, r3, #15
 8005290:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	019a      	lsls	r2, r3, #6
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	061b      	lsls	r3, r3, #24
 800529c:	431a      	orrs	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	699b      	ldr	r3, [r3, #24]
 80052a2:	071b      	lsls	r3, r3, #28
 80052a4:	4927      	ldr	r1, [pc, #156]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80052ac:	4b25      	ldr	r3, [pc, #148]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052b2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ba:	4922      	ldr	r1, [pc, #136]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80052c2:	4b21      	ldr	r3, [pc, #132]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80052c4:	2201      	movs	r2, #1
 80052c6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052c8:	f7fd fb4a 	bl	8002960 <HAL_GetTick>
 80052cc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052ce:	e008      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80052d0:	f7fd fb46 	bl	8002960 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d901      	bls.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e0a4      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052e2:	4b18      	ldr	r3, [pc, #96]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80052ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052ee:	d1ef      	bne.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0320 	and.w	r3, r3, #32
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f000 808b 	beq.w	8005414 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80052fe:	2300      	movs	r3, #0
 8005300:	60fb      	str	r3, [r7, #12]
 8005302:	4b10      	ldr	r3, [pc, #64]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005306:	4a0f      	ldr	r2, [pc, #60]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005308:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800530c:	6413      	str	r3, [r2, #64]	@ 0x40
 800530e:	4b0d      	ldr	r3, [pc, #52]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005312:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005316:	60fb      	str	r3, [r7, #12]
 8005318:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800531a:	4b0c      	ldr	r3, [pc, #48]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a0b      	ldr	r2, [pc, #44]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005320:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005324:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005326:	f7fd fb1b 	bl	8002960 <HAL_GetTick>
 800532a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800532c:	e010      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800532e:	f7fd fb17 	bl	8002960 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b02      	cmp	r3, #2
 800533a:	d909      	bls.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e075      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005340:	42470068 	.word	0x42470068
 8005344:	40023800 	.word	0x40023800
 8005348:	42470070 	.word	0x42470070
 800534c:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005350:	4b38      	ldr	r3, [pc, #224]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005358:	2b00      	cmp	r3, #0
 800535a:	d0e8      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800535c:	4b36      	ldr	r3, [pc, #216]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800535e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005360:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005364:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d02f      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x308>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005370:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005374:	693a      	ldr	r2, [r7, #16]
 8005376:	429a      	cmp	r2, r3
 8005378:	d028      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800537a:	4b2f      	ldr	r3, [pc, #188]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800537c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800537e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005382:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005384:	4b2d      	ldr	r3, [pc, #180]	@ (800543c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005386:	2201      	movs	r2, #1
 8005388:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800538a:	4b2c      	ldr	r3, [pc, #176]	@ (800543c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800538c:	2200      	movs	r2, #0
 800538e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005390:	4a29      	ldr	r2, [pc, #164]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005396:	4b28      	ldr	r3, [pc, #160]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800539a:	f003 0301 	and.w	r3, r3, #1
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d114      	bne.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80053a2:	f7fd fadd 	bl	8002960 <HAL_GetTick>
 80053a6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053a8:	e00a      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053aa:	f7fd fad9 	bl	8002960 <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d901      	bls.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e035      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053c4:	f003 0302 	and.w	r3, r3, #2
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d0ee      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053d8:	d10d      	bne.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80053da:	4b17      	ldr	r3, [pc, #92]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053e6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80053ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053ee:	4912      	ldr	r1, [pc, #72]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	608b      	str	r3, [r1, #8]
 80053f4:	e005      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80053f6:	4b10      	ldr	r3, [pc, #64]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	4a0f      	ldr	r2, [pc, #60]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053fc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005400:	6093      	str	r3, [r2, #8]
 8005402:	4b0d      	ldr	r3, [pc, #52]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005404:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800540a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800540e:	490a      	ldr	r1, [pc, #40]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005410:	4313      	orrs	r3, r2
 8005412:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0310 	and.w	r3, r3, #16
 800541c:	2b00      	cmp	r3, #0
 800541e:	d004      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005426:	4b06      	ldr	r3, [pc, #24]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005428:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3718      	adds	r7, #24
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	40007000 	.word	0x40007000
 8005438:	40023800 	.word	0x40023800
 800543c:	42470e40 	.word	0x42470e40
 8005440:	424711e0 	.word	0x424711e0

08005444 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d101      	bne.n	8005456 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e01c      	b.n	8005490 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	795b      	ldrb	r3, [r3, #5]
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b00      	cmp	r3, #0
 800545e:	d105      	bne.n	800546c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7fc fdb0 	bl	8001fcc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2202      	movs	r2, #2
 8005470:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f042 0204 	orr.w	r2, r2, #4
 8005480:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3708      	adds	r7, #8
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d101      	bne.n	80054aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e07b      	b.n	80055a2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d108      	bne.n	80054c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054ba:	d009      	beq.n	80054d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	61da      	str	r2, [r3, #28]
 80054c2:	e005      	b.n	80054d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d106      	bne.n	80054f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f7fc fd90 	bl	8002010 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2202      	movs	r2, #2
 80054f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005506:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005518:	431a      	orrs	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005522:	431a      	orrs	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	f003 0302 	and.w	r3, r3, #2
 800552c:	431a      	orrs	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	431a      	orrs	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005540:	431a      	orrs	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	69db      	ldr	r3, [r3, #28]
 8005546:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800554a:	431a      	orrs	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a1b      	ldr	r3, [r3, #32]
 8005550:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005554:	ea42 0103 	orr.w	r1, r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800555c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	430a      	orrs	r2, r1
 8005566:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	0c1b      	lsrs	r3, r3, #16
 800556e:	f003 0104 	and.w	r1, r3, #4
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005576:	f003 0210 	and.w	r2, r3, #16
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	430a      	orrs	r2, r1
 8005580:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	69da      	ldr	r2, [r3, #28]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005590:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3708      	adds	r7, #8
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b082      	sub	sp, #8
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d101      	bne.n	80055bc <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e01a      	b.n	80055f2 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2202      	movs	r2, #2
 80055c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055d2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f7fc fd63 	bl	80020a0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3708      	adds	r7, #8
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}

080055fa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b088      	sub	sp, #32
 80055fe:	af00      	add	r7, sp, #0
 8005600:	60f8      	str	r0, [r7, #12]
 8005602:	60b9      	str	r1, [r7, #8]
 8005604:	603b      	str	r3, [r7, #0]
 8005606:	4613      	mov	r3, r2
 8005608:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800560a:	f7fd f9a9 	bl	8002960 <HAL_GetTick>
 800560e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005610:	88fb      	ldrh	r3, [r7, #6]
 8005612:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800561a:	b2db      	uxtb	r3, r3
 800561c:	2b01      	cmp	r3, #1
 800561e:	d001      	beq.n	8005624 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005620:	2302      	movs	r3, #2
 8005622:	e12a      	b.n	800587a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d002      	beq.n	8005630 <HAL_SPI_Transmit+0x36>
 800562a:	88fb      	ldrh	r3, [r7, #6]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d101      	bne.n	8005634 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e122      	b.n	800587a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800563a:	2b01      	cmp	r3, #1
 800563c:	d101      	bne.n	8005642 <HAL_SPI_Transmit+0x48>
 800563e:	2302      	movs	r3, #2
 8005640:	e11b      	b.n	800587a <HAL_SPI_Transmit+0x280>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2203      	movs	r2, #3
 800564e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	68ba      	ldr	r2, [r7, #8]
 800565c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	88fa      	ldrh	r2, [r7, #6]
 8005662:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	88fa      	ldrh	r2, [r7, #6]
 8005668:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005690:	d10f      	bne.n	80056b2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056bc:	2b40      	cmp	r3, #64	@ 0x40
 80056be:	d007      	beq.n	80056d0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80056ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056d8:	d152      	bne.n	8005780 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d002      	beq.n	80056e8 <HAL_SPI_Transmit+0xee>
 80056e2:	8b7b      	ldrh	r3, [r7, #26]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d145      	bne.n	8005774 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ec:	881a      	ldrh	r2, [r3, #0]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056f8:	1c9a      	adds	r2, r3, #2
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005702:	b29b      	uxth	r3, r3
 8005704:	3b01      	subs	r3, #1
 8005706:	b29a      	uxth	r2, r3
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800570c:	e032      	b.n	8005774 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f003 0302 	and.w	r3, r3, #2
 8005718:	2b02      	cmp	r3, #2
 800571a:	d112      	bne.n	8005742 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005720:	881a      	ldrh	r2, [r3, #0]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800572c:	1c9a      	adds	r2, r3, #2
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005736:	b29b      	uxth	r3, r3
 8005738:	3b01      	subs	r3, #1
 800573a:	b29a      	uxth	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005740:	e018      	b.n	8005774 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005742:	f7fd f90d 	bl	8002960 <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	683a      	ldr	r2, [r7, #0]
 800574e:	429a      	cmp	r2, r3
 8005750:	d803      	bhi.n	800575a <HAL_SPI_Transmit+0x160>
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005758:	d102      	bne.n	8005760 <HAL_SPI_Transmit+0x166>
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d109      	bne.n	8005774 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	e082      	b.n	800587a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005778:	b29b      	uxth	r3, r3
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1c7      	bne.n	800570e <HAL_SPI_Transmit+0x114>
 800577e:	e053      	b.n	8005828 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d002      	beq.n	800578e <HAL_SPI_Transmit+0x194>
 8005788:	8b7b      	ldrh	r3, [r7, #26]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d147      	bne.n	800581e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	330c      	adds	r3, #12
 8005798:	7812      	ldrb	r2, [r2, #0]
 800579a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057a0:	1c5a      	adds	r2, r3, #1
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	3b01      	subs	r3, #1
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80057b4:	e033      	b.n	800581e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f003 0302 	and.w	r3, r3, #2
 80057c0:	2b02      	cmp	r3, #2
 80057c2:	d113      	bne.n	80057ec <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	330c      	adds	r3, #12
 80057ce:	7812      	ldrb	r2, [r2, #0]
 80057d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057d6:	1c5a      	adds	r2, r3, #1
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	3b01      	subs	r3, #1
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80057ea:	e018      	b.n	800581e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057ec:	f7fd f8b8 	bl	8002960 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	683a      	ldr	r2, [r7, #0]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d803      	bhi.n	8005804 <HAL_SPI_Transmit+0x20a>
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005802:	d102      	bne.n	800580a <HAL_SPI_Transmit+0x210>
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d109      	bne.n	800581e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e02d      	b.n	800587a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005822:	b29b      	uxth	r3, r3
 8005824:	2b00      	cmp	r3, #0
 8005826:	d1c6      	bne.n	80057b6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005828:	69fa      	ldr	r2, [r7, #28]
 800582a:	6839      	ldr	r1, [r7, #0]
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f000 f8bf 	bl	80059b0 <SPI_EndRxTxTransaction>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d002      	beq.n	800583e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2220      	movs	r2, #32
 800583c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d10a      	bne.n	800585c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005846:	2300      	movs	r3, #0
 8005848:	617b      	str	r3, [r7, #20]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	617b      	str	r3, [r7, #20]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	617b      	str	r3, [r7, #20]
 800585a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005870:	2b00      	cmp	r3, #0
 8005872:	d001      	beq.n	8005878 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e000      	b.n	800587a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005878:	2300      	movs	r3, #0
  }
}
 800587a:	4618      	mov	r0, r3
 800587c:	3720      	adds	r7, #32
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005882:	b480      	push	{r7}
 8005884:	b083      	sub	sp, #12
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005890:	b2db      	uxtb	r3, r3
}
 8005892:	4618      	mov	r0, r3
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
	...

080058a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b088      	sub	sp, #32
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	603b      	str	r3, [r7, #0]
 80058ac:	4613      	mov	r3, r2
 80058ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80058b0:	f7fd f856 	bl	8002960 <HAL_GetTick>
 80058b4:	4602      	mov	r2, r0
 80058b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058b8:	1a9b      	subs	r3, r3, r2
 80058ba:	683a      	ldr	r2, [r7, #0]
 80058bc:	4413      	add	r3, r2
 80058be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80058c0:	f7fd f84e 	bl	8002960 <HAL_GetTick>
 80058c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80058c6:	4b39      	ldr	r3, [pc, #228]	@ (80059ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	015b      	lsls	r3, r3, #5
 80058cc:	0d1b      	lsrs	r3, r3, #20
 80058ce:	69fa      	ldr	r2, [r7, #28]
 80058d0:	fb02 f303 	mul.w	r3, r2, r3
 80058d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058d6:	e054      	b.n	8005982 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058de:	d050      	beq.n	8005982 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80058e0:	f7fd f83e 	bl	8002960 <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	69fa      	ldr	r2, [r7, #28]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d902      	bls.n	80058f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d13d      	bne.n	8005972 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	685a      	ldr	r2, [r3, #4]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005904:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800590e:	d111      	bne.n	8005934 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005918:	d004      	beq.n	8005924 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005922:	d107      	bne.n	8005934 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005932:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005938:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800593c:	d10f      	bne.n	800595e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800594c:	601a      	str	r2, [r3, #0]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800595c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e017      	b.n	80059a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d101      	bne.n	800597c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005978:	2300      	movs	r3, #0
 800597a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	3b01      	subs	r3, #1
 8005980:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	689a      	ldr	r2, [r3, #8]
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	4013      	ands	r3, r2
 800598c:	68ba      	ldr	r2, [r7, #8]
 800598e:	429a      	cmp	r2, r3
 8005990:	bf0c      	ite	eq
 8005992:	2301      	moveq	r3, #1
 8005994:	2300      	movne	r3, #0
 8005996:	b2db      	uxtb	r3, r3
 8005998:	461a      	mov	r2, r3
 800599a:	79fb      	ldrb	r3, [r7, #7]
 800599c:	429a      	cmp	r2, r3
 800599e:	d19b      	bne.n	80058d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3720      	adds	r7, #32
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	20000010 	.word	0x20000010

080059b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b088      	sub	sp, #32
 80059b4:	af02      	add	r7, sp, #8
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	9300      	str	r3, [sp, #0]
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	2201      	movs	r2, #1
 80059c4:	2102      	movs	r1, #2
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f7ff ff6a 	bl	80058a0 <SPI_WaitFlagStateUntilTimeout>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d007      	beq.n	80059e2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059d6:	f043 0220 	orr.w	r2, r3, #32
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e032      	b.n	8005a48 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80059e2:	4b1b      	ldr	r3, [pc, #108]	@ (8005a50 <SPI_EndRxTxTransaction+0xa0>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a1b      	ldr	r2, [pc, #108]	@ (8005a54 <SPI_EndRxTxTransaction+0xa4>)
 80059e8:	fba2 2303 	umull	r2, r3, r2, r3
 80059ec:	0d5b      	lsrs	r3, r3, #21
 80059ee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80059f2:	fb02 f303 	mul.w	r3, r2, r3
 80059f6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a00:	d112      	bne.n	8005a28 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	9300      	str	r3, [sp, #0]
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	2180      	movs	r1, #128	@ 0x80
 8005a0c:	68f8      	ldr	r0, [r7, #12]
 8005a0e:	f7ff ff47 	bl	80058a0 <SPI_WaitFlagStateUntilTimeout>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d016      	beq.n	8005a46 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a1c:	f043 0220 	orr.w	r2, r3, #32
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005a24:	2303      	movs	r3, #3
 8005a26:	e00f      	b.n	8005a48 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00a      	beq.n	8005a44 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	3b01      	subs	r3, #1
 8005a32:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a3e:	2b80      	cmp	r3, #128	@ 0x80
 8005a40:	d0f2      	beq.n	8005a28 <SPI_EndRxTxTransaction+0x78>
 8005a42:	e000      	b.n	8005a46 <SPI_EndRxTxTransaction+0x96>
        break;
 8005a44:	bf00      	nop
  }

  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3718      	adds	r7, #24
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	20000010 	.word	0x20000010
 8005a54:	165e9f81 	.word	0x165e9f81

08005a58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d101      	bne.n	8005a6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e041      	b.n	8005aee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d106      	bne.n	8005a84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f7fc fb2c 	bl	80020dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2202      	movs	r2, #2
 8005a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	3304      	adds	r3, #4
 8005a94:	4619      	mov	r1, r3
 8005a96:	4610      	mov	r0, r2
 8005a98:	f000 f8f4 	bl	8005c84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3708      	adds	r7, #8
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b084      	sub	sp, #16
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
 8005afe:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b00:	2300      	movs	r3, #0
 8005b02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d101      	bne.n	8005b12 <HAL_TIM_ConfigClockSource+0x1c>
 8005b0e:	2302      	movs	r3, #2
 8005b10:	e0b4      	b.n	8005c7c <HAL_TIM_ConfigClockSource+0x186>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2201      	movs	r2, #1
 8005b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2202      	movs	r2, #2
 8005b1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005b30:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b38:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b4a:	d03e      	beq.n	8005bca <HAL_TIM_ConfigClockSource+0xd4>
 8005b4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b50:	f200 8087 	bhi.w	8005c62 <HAL_TIM_ConfigClockSource+0x16c>
 8005b54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b58:	f000 8086 	beq.w	8005c68 <HAL_TIM_ConfigClockSource+0x172>
 8005b5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b60:	d87f      	bhi.n	8005c62 <HAL_TIM_ConfigClockSource+0x16c>
 8005b62:	2b70      	cmp	r3, #112	@ 0x70
 8005b64:	d01a      	beq.n	8005b9c <HAL_TIM_ConfigClockSource+0xa6>
 8005b66:	2b70      	cmp	r3, #112	@ 0x70
 8005b68:	d87b      	bhi.n	8005c62 <HAL_TIM_ConfigClockSource+0x16c>
 8005b6a:	2b60      	cmp	r3, #96	@ 0x60
 8005b6c:	d050      	beq.n	8005c10 <HAL_TIM_ConfigClockSource+0x11a>
 8005b6e:	2b60      	cmp	r3, #96	@ 0x60
 8005b70:	d877      	bhi.n	8005c62 <HAL_TIM_ConfigClockSource+0x16c>
 8005b72:	2b50      	cmp	r3, #80	@ 0x50
 8005b74:	d03c      	beq.n	8005bf0 <HAL_TIM_ConfigClockSource+0xfa>
 8005b76:	2b50      	cmp	r3, #80	@ 0x50
 8005b78:	d873      	bhi.n	8005c62 <HAL_TIM_ConfigClockSource+0x16c>
 8005b7a:	2b40      	cmp	r3, #64	@ 0x40
 8005b7c:	d058      	beq.n	8005c30 <HAL_TIM_ConfigClockSource+0x13a>
 8005b7e:	2b40      	cmp	r3, #64	@ 0x40
 8005b80:	d86f      	bhi.n	8005c62 <HAL_TIM_ConfigClockSource+0x16c>
 8005b82:	2b30      	cmp	r3, #48	@ 0x30
 8005b84:	d064      	beq.n	8005c50 <HAL_TIM_ConfigClockSource+0x15a>
 8005b86:	2b30      	cmp	r3, #48	@ 0x30
 8005b88:	d86b      	bhi.n	8005c62 <HAL_TIM_ConfigClockSource+0x16c>
 8005b8a:	2b20      	cmp	r3, #32
 8005b8c:	d060      	beq.n	8005c50 <HAL_TIM_ConfigClockSource+0x15a>
 8005b8e:	2b20      	cmp	r3, #32
 8005b90:	d867      	bhi.n	8005c62 <HAL_TIM_ConfigClockSource+0x16c>
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d05c      	beq.n	8005c50 <HAL_TIM_ConfigClockSource+0x15a>
 8005b96:	2b10      	cmp	r3, #16
 8005b98:	d05a      	beq.n	8005c50 <HAL_TIM_ConfigClockSource+0x15a>
 8005b9a:	e062      	b.n	8005c62 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005bac:	f000 f990 	bl	8005ed0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005bbe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	609a      	str	r2, [r3, #8]
      break;
 8005bc8:	e04f      	b.n	8005c6a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005bda:	f000 f979 	bl	8005ed0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	689a      	ldr	r2, [r3, #8]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005bec:	609a      	str	r2, [r3, #8]
      break;
 8005bee:	e03c      	b.n	8005c6a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	f000 f8ed 	bl	8005ddc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2150      	movs	r1, #80	@ 0x50
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f000 f946 	bl	8005e9a <TIM_ITRx_SetConfig>
      break;
 8005c0e:	e02c      	b.n	8005c6a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	f000 f90c 	bl	8005e3a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2160      	movs	r1, #96	@ 0x60
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f000 f936 	bl	8005e9a <TIM_ITRx_SetConfig>
      break;
 8005c2e:	e01c      	b.n	8005c6a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	f000 f8cd 	bl	8005ddc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2140      	movs	r1, #64	@ 0x40
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f000 f926 	bl	8005e9a <TIM_ITRx_SetConfig>
      break;
 8005c4e:	e00c      	b.n	8005c6a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4619      	mov	r1, r3
 8005c5a:	4610      	mov	r0, r2
 8005c5c:	f000 f91d 	bl	8005e9a <TIM_ITRx_SetConfig>
      break;
 8005c60:	e003      	b.n	8005c6a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	73fb      	strb	r3, [r7, #15]
      break;
 8005c66:	e000      	b.n	8005c6a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c68:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3710      	adds	r7, #16
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a46      	ldr	r2, [pc, #280]	@ (8005db0 <TIM_Base_SetConfig+0x12c>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d013      	beq.n	8005cc4 <TIM_Base_SetConfig+0x40>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ca2:	d00f      	beq.n	8005cc4 <TIM_Base_SetConfig+0x40>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a43      	ldr	r2, [pc, #268]	@ (8005db4 <TIM_Base_SetConfig+0x130>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d00b      	beq.n	8005cc4 <TIM_Base_SetConfig+0x40>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a42      	ldr	r2, [pc, #264]	@ (8005db8 <TIM_Base_SetConfig+0x134>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d007      	beq.n	8005cc4 <TIM_Base_SetConfig+0x40>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a41      	ldr	r2, [pc, #260]	@ (8005dbc <TIM_Base_SetConfig+0x138>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d003      	beq.n	8005cc4 <TIM_Base_SetConfig+0x40>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a40      	ldr	r2, [pc, #256]	@ (8005dc0 <TIM_Base_SetConfig+0x13c>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d108      	bne.n	8005cd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a35      	ldr	r2, [pc, #212]	@ (8005db0 <TIM_Base_SetConfig+0x12c>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d02b      	beq.n	8005d36 <TIM_Base_SetConfig+0xb2>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ce4:	d027      	beq.n	8005d36 <TIM_Base_SetConfig+0xb2>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a32      	ldr	r2, [pc, #200]	@ (8005db4 <TIM_Base_SetConfig+0x130>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d023      	beq.n	8005d36 <TIM_Base_SetConfig+0xb2>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a31      	ldr	r2, [pc, #196]	@ (8005db8 <TIM_Base_SetConfig+0x134>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d01f      	beq.n	8005d36 <TIM_Base_SetConfig+0xb2>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a30      	ldr	r2, [pc, #192]	@ (8005dbc <TIM_Base_SetConfig+0x138>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d01b      	beq.n	8005d36 <TIM_Base_SetConfig+0xb2>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a2f      	ldr	r2, [pc, #188]	@ (8005dc0 <TIM_Base_SetConfig+0x13c>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d017      	beq.n	8005d36 <TIM_Base_SetConfig+0xb2>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a2e      	ldr	r2, [pc, #184]	@ (8005dc4 <TIM_Base_SetConfig+0x140>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d013      	beq.n	8005d36 <TIM_Base_SetConfig+0xb2>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a2d      	ldr	r2, [pc, #180]	@ (8005dc8 <TIM_Base_SetConfig+0x144>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d00f      	beq.n	8005d36 <TIM_Base_SetConfig+0xb2>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a2c      	ldr	r2, [pc, #176]	@ (8005dcc <TIM_Base_SetConfig+0x148>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d00b      	beq.n	8005d36 <TIM_Base_SetConfig+0xb2>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a2b      	ldr	r2, [pc, #172]	@ (8005dd0 <TIM_Base_SetConfig+0x14c>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d007      	beq.n	8005d36 <TIM_Base_SetConfig+0xb2>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a2a      	ldr	r2, [pc, #168]	@ (8005dd4 <TIM_Base_SetConfig+0x150>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d003      	beq.n	8005d36 <TIM_Base_SetConfig+0xb2>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a29      	ldr	r2, [pc, #164]	@ (8005dd8 <TIM_Base_SetConfig+0x154>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d108      	bne.n	8005d48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	689a      	ldr	r2, [r3, #8]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a10      	ldr	r2, [pc, #64]	@ (8005db0 <TIM_Base_SetConfig+0x12c>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d003      	beq.n	8005d7c <TIM_Base_SetConfig+0xf8>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a12      	ldr	r2, [pc, #72]	@ (8005dc0 <TIM_Base_SetConfig+0x13c>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d103      	bne.n	8005d84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	691a      	ldr	r2, [r3, #16]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d105      	bne.n	8005da2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	f023 0201 	bic.w	r2, r3, #1
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	611a      	str	r2, [r3, #16]
  }
}
 8005da2:	bf00      	nop
 8005da4:	3714      	adds	r7, #20
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	40010000 	.word	0x40010000
 8005db4:	40000400 	.word	0x40000400
 8005db8:	40000800 	.word	0x40000800
 8005dbc:	40000c00 	.word	0x40000c00
 8005dc0:	40010400 	.word	0x40010400
 8005dc4:	40014000 	.word	0x40014000
 8005dc8:	40014400 	.word	0x40014400
 8005dcc:	40014800 	.word	0x40014800
 8005dd0:	40001800 	.word	0x40001800
 8005dd4:	40001c00 	.word	0x40001c00
 8005dd8:	40002000 	.word	0x40002000

08005ddc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b087      	sub	sp, #28
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6a1b      	ldr	r3, [r3, #32]
 8005dec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	f023 0201 	bic.w	r2, r3, #1
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	011b      	lsls	r3, r3, #4
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f023 030a 	bic.w	r3, r3, #10
 8005e18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	621a      	str	r2, [r3, #32]
}
 8005e2e:	bf00      	nop
 8005e30:	371c      	adds	r7, #28
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr

08005e3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e3a:	b480      	push	{r7}
 8005e3c:	b087      	sub	sp, #28
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	60f8      	str	r0, [r7, #12]
 8005e42:	60b9      	str	r1, [r7, #8]
 8005e44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6a1b      	ldr	r3, [r3, #32]
 8005e50:	f023 0210 	bic.w	r2, r3, #16
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	031b      	lsls	r3, r3, #12
 8005e6a:	693a      	ldr	r2, [r7, #16]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005e76:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	011b      	lsls	r3, r3, #4
 8005e7c:	697a      	ldr	r2, [r7, #20]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	697a      	ldr	r2, [r7, #20]
 8005e8c:	621a      	str	r2, [r3, #32]
}
 8005e8e:	bf00      	nop
 8005e90:	371c      	adds	r7, #28
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr

08005e9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e9a:	b480      	push	{r7}
 8005e9c:	b085      	sub	sp, #20
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
 8005ea2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005eb2:	683a      	ldr	r2, [r7, #0]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	f043 0307 	orr.w	r3, r3, #7
 8005ebc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	609a      	str	r2, [r3, #8]
}
 8005ec4:	bf00      	nop
 8005ec6:	3714      	adds	r7, #20
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b087      	sub	sp, #28
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	607a      	str	r2, [r7, #4]
 8005edc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005eea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	021a      	lsls	r2, r3, #8
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	431a      	orrs	r2, r3
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	697a      	ldr	r2, [r7, #20]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	609a      	str	r2, [r3, #8]
}
 8005f04:	bf00      	nop
 8005f06:	371c      	adds	r7, #28
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d101      	bne.n	8005f28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f24:	2302      	movs	r3, #2
 8005f26:	e05a      	b.n	8005fde <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2202      	movs	r2, #2
 8005f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a21      	ldr	r2, [pc, #132]	@ (8005fec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d022      	beq.n	8005fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f74:	d01d      	beq.n	8005fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a1d      	ldr	r2, [pc, #116]	@ (8005ff0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d018      	beq.n	8005fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a1b      	ldr	r2, [pc, #108]	@ (8005ff4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d013      	beq.n	8005fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a1a      	ldr	r2, [pc, #104]	@ (8005ff8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d00e      	beq.n	8005fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a18      	ldr	r2, [pc, #96]	@ (8005ffc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d009      	beq.n	8005fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a17      	ldr	r2, [pc, #92]	@ (8006000 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d004      	beq.n	8005fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a15      	ldr	r2, [pc, #84]	@ (8006004 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d10c      	bne.n	8005fcc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	68ba      	ldr	r2, [r7, #8]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68ba      	ldr	r2, [r7, #8]
 8005fca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3714      	adds	r7, #20
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	40010000 	.word	0x40010000
 8005ff0:	40000400 	.word	0x40000400
 8005ff4:	40000800 	.word	0x40000800
 8005ff8:	40000c00 	.word	0x40000c00
 8005ffc:	40010400 	.word	0x40010400
 8006000:	40014000 	.word	0x40014000
 8006004:	40001800 	.word	0x40001800

08006008 <memset>:
 8006008:	4402      	add	r2, r0
 800600a:	4603      	mov	r3, r0
 800600c:	4293      	cmp	r3, r2
 800600e:	d100      	bne.n	8006012 <memset+0xa>
 8006010:	4770      	bx	lr
 8006012:	f803 1b01 	strb.w	r1, [r3], #1
 8006016:	e7f9      	b.n	800600c <memset+0x4>

08006018 <__libc_init_array>:
 8006018:	b570      	push	{r4, r5, r6, lr}
 800601a:	4d0d      	ldr	r5, [pc, #52]	@ (8006050 <__libc_init_array+0x38>)
 800601c:	4c0d      	ldr	r4, [pc, #52]	@ (8006054 <__libc_init_array+0x3c>)
 800601e:	1b64      	subs	r4, r4, r5
 8006020:	10a4      	asrs	r4, r4, #2
 8006022:	2600      	movs	r6, #0
 8006024:	42a6      	cmp	r6, r4
 8006026:	d109      	bne.n	800603c <__libc_init_array+0x24>
 8006028:	4d0b      	ldr	r5, [pc, #44]	@ (8006058 <__libc_init_array+0x40>)
 800602a:	4c0c      	ldr	r4, [pc, #48]	@ (800605c <__libc_init_array+0x44>)
 800602c:	f000 f818 	bl	8006060 <_init>
 8006030:	1b64      	subs	r4, r4, r5
 8006032:	10a4      	asrs	r4, r4, #2
 8006034:	2600      	movs	r6, #0
 8006036:	42a6      	cmp	r6, r4
 8006038:	d105      	bne.n	8006046 <__libc_init_array+0x2e>
 800603a:	bd70      	pop	{r4, r5, r6, pc}
 800603c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006040:	4798      	blx	r3
 8006042:	3601      	adds	r6, #1
 8006044:	e7ee      	b.n	8006024 <__libc_init_array+0xc>
 8006046:	f855 3b04 	ldr.w	r3, [r5], #4
 800604a:	4798      	blx	r3
 800604c:	3601      	adds	r6, #1
 800604e:	e7f2      	b.n	8006036 <__libc_init_array+0x1e>
 8006050:	08007268 	.word	0x08007268
 8006054:	08007268 	.word	0x08007268
 8006058:	08007268 	.word	0x08007268
 800605c:	0800726c 	.word	0x0800726c

08006060 <_init>:
 8006060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006062:	bf00      	nop
 8006064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006066:	bc08      	pop	{r3}
 8006068:	469e      	mov	lr, r3
 800606a:	4770      	bx	lr

0800606c <_fini>:
 800606c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800606e:	bf00      	nop
 8006070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006072:	bc08      	pop	{r3}
 8006074:	469e      	mov	lr, r3
 8006076:	4770      	bx	lr
